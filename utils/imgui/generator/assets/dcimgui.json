{
    "defines": [
        {
            "name": "IMGUI_VERSION",
            "content": "\"1.91.7\"",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 31
            }
        },
        {
            "name": "IMGUI_VERSION_NUM",
            "content": "19170",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 32
            }
        },
        {
            "name": "IMGUI_HAS_TABLE",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 33
            }
        },
        {
            "name": "IMGUI_API",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "CIMGUI_API"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 82
            }
        },
        {
            "name": "IMGUI_IMPL_API",
            "content": "IMGUI_API",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "CIMGUI_IMPL_API"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 85
            }
        },
        {
            "name": "IM_MSVC_RUNTIME_CHECKS_OFF",
            "content": "__pragma(runtime_checks(\"\",off))     __pragma(check_stack(off)) __pragma(strict_gs_check(push,off))",
            "conditionals": [
                {
                    "condition": "if",
                    "expression": "defined(_MSC_VER)&&!defined(__clang__)&&!defined(__INTEL_COMPILER)&&!defined(IMGUI_DEBUG_PARANOID)"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 115
            }
        },
        {
            "name": "IM_MSVC_RUNTIME_CHECKS_RESTORE",
            "content": "__pragma(runtime_checks(\"\",restore)) __pragma(check_stack())    __pragma(strict_gs_check(pop))",
            "conditionals": [
                {
                    "condition": "if",
                    "expression": "defined(_MSC_VER)&&!defined(__clang__)&&!defined(__INTEL_COMPILER)&&!defined(IMGUI_DEBUG_PARANOID)"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 116
            }
        },
        {
            "name": "IM_MSVC_RUNTIME_CHECKS_OFF",
            "conditionals": [
                {
                    "condition": "ifnot",
                    "expression": "defined(_MSC_VER)&&!defined(__clang__)&&!defined(__INTEL_COMPILER)&&!defined(IMGUI_DEBUG_PARANOID)"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 118
            }
        },
        {
            "name": "IM_MSVC_RUNTIME_CHECKS_RESTORE",
            "conditionals": [
                {
                    "condition": "ifnot",
                    "expression": "defined(_MSC_VER)&&!defined(__clang__)&&!defined(__INTEL_COMPILER)&&!defined(IMGUI_DEBUG_PARANOID)"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 119
            }
        },
        {
            "name": "IMGUI_PAYLOAD_TYPE_COLOR_3F",
            "content": "\"_COL3F\"",
            "comments": {
                "attached": "// float[3]: Standard type for colors, without alpha. User code may use this type."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1387
            }
        },
        {
            "name": "IMGUI_PAYLOAD_TYPE_COLOR_4F",
            "content": "\"_COL4F\"",
            "comments": {
                "attached": "// float[4]: Standard type for colors. User code may use this type."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1388
            }
        },
        {
            "name": "IM_UNICODE_CODEPOINT_INVALID",
            "content": "0xFFFD",
            "comments": {
                "attached": "// Invalid Unicode code point (standard value)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2522
            }
        },
        {
            "name": "IM_UNICODE_CODEPOINT_MAX",
            "content": "0x10FFFF",
            "comments": {
                "attached": "// Maximum Unicode code point supported by this build."
            },
            "conditionals": [
                {
                    "condition": "ifdef",
                    "expression": "IMGUI_USE_WCHAR32"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2524
            }
        },
        {
            "name": "IM_UNICODE_CODEPOINT_MAX",
            "content": "0xFFFF",
            "comments": {
                "attached": "// Maximum Unicode code point supported by this build."
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_USE_WCHAR32"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2526
            }
        },
        {
            "name": "IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED",
            "conditionals": [
                {
                    "condition": "ifdef",
                    "expression": "IMGUI_DEFINE_MATH_OPERATORS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2702
            }
        },
        {
            "name": "IM_COL32_R_SHIFT",
            "content": "16",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_COL32_R_SHIFT"
                },
                {
                    "condition": "ifdef",
                    "expression": "IMGUI_USE_BGRA_PACKED_COLOR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2732
            }
        },
        {
            "name": "IM_COL32_G_SHIFT",
            "content": "8",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_COL32_R_SHIFT"
                },
                {
                    "condition": "ifdef",
                    "expression": "IMGUI_USE_BGRA_PACKED_COLOR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2733
            }
        },
        {
            "name": "IM_COL32_B_SHIFT",
            "content": "0",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_COL32_R_SHIFT"
                },
                {
                    "condition": "ifdef",
                    "expression": "IMGUI_USE_BGRA_PACKED_COLOR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2734
            }
        },
        {
            "name": "IM_COL32_A_SHIFT",
            "content": "24",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_COL32_R_SHIFT"
                },
                {
                    "condition": "ifdef",
                    "expression": "IMGUI_USE_BGRA_PACKED_COLOR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2735
            }
        },
        {
            "name": "IM_COL32_A_MASK",
            "content": "0xFF000000",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_COL32_R_SHIFT"
                },
                {
                    "condition": "ifdef",
                    "expression": "IMGUI_USE_BGRA_PACKED_COLOR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2736
            }
        },
        {
            "name": "IM_COL32_R_SHIFT",
            "content": "0",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_COL32_R_SHIFT"
                },
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_USE_BGRA_PACKED_COLOR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2738
            }
        },
        {
            "name": "IM_COL32_G_SHIFT",
            "content": "8",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_COL32_R_SHIFT"
                },
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_USE_BGRA_PACKED_COLOR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2739
            }
        },
        {
            "name": "IM_COL32_B_SHIFT",
            "content": "16",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_COL32_R_SHIFT"
                },
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_USE_BGRA_PACKED_COLOR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2740
            }
        },
        {
            "name": "IM_COL32_A_SHIFT",
            "content": "24",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_COL32_R_SHIFT"
                },
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_USE_BGRA_PACKED_COLOR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2741
            }
        },
        {
            "name": "IM_COL32_A_MASK",
            "content": "0xFF000000",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_COL32_R_SHIFT"
                },
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_USE_BGRA_PACKED_COLOR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2742
            }
        },
        {
            "name": "IM_DRAWLIST_TEX_LINES_WIDTH_MAX",
            "content": "63",
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IM_DRAWLIST_TEX_LINES_WIDTH_MAX"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2926
            }
        }
    ],
    "enums": [
        {
            "name": "ImGuiWindowFlags_",
            "original_fully_qualified_name": "ImGuiWindowFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiWindowFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1069
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoTitleBar",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable title-bar"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1070
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoResize",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable user resizing with the lower-right grip"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1071
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoMove",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable user moving the window"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1072
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoScrollbar",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable scrollbars (window can still scroll with mouse or programmatically)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1073
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoScrollWithMouse",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1074
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoCollapse",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1075
                    }
                },
                {
                    "name": "ImGuiWindowFlags_AlwaysAutoResize",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Resize every window to its content every frame"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1076
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoBackground",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1077
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoSavedSettings",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// Never load/save settings in .ini file"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1078
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoMouseInputs",
                    "value_expression": "1<<9",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable catching mouse, hovering test with pass through."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1079
                    }
                },
                {
                    "name": "ImGuiWindowFlags_MenuBar",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "attached": "// Has a menu-bar"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1080
                    }
                },
                {
                    "name": "ImGuiWindowFlags_HorizontalScrollbar",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the \"Horizontal Scrolling\" section."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1081
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoFocusOnAppearing",
                    "value_expression": "1<<12",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable taking focus when transitioning from hidden to visible state"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1082
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoBringToFrontOnFocus",
                    "value_expression": "1<<13",
                    "value": 8192,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1083
                    }
                },
                {
                    "name": "ImGuiWindowFlags_AlwaysVerticalScrollbar",
                    "value_expression": "1<<14",
                    "value": 16384,
                    "is_count": false,
                    "comments": {
                        "attached": "// Always show vertical scrollbar (even if ContentSize.y < Size.y)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1084
                    }
                },
                {
                    "name": "ImGuiWindowFlags_AlwaysHorizontalScrollbar",
                    "value_expression": "1<<15",
                    "value": 32768,
                    "is_count": false,
                    "comments": {
                        "attached": "// Always show horizontal scrollbar (even if ContentSize.x < Size.x)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1085
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoNavInputs",
                    "value_expression": "1<<16",
                    "value": 65536,
                    "is_count": false,
                    "comments": {
                        "attached": "// No keyboard/gamepad navigation within the window"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1086
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoNavFocus",
                    "value_expression": "1<<17",
                    "value": 131072,
                    "is_count": false,
                    "comments": {
                        "attached": "// No focusing toward this window with keyboard/gamepad navigation (e.g. skipped by CTRL+TAB)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1087
                    }
                },
                {
                    "name": "ImGuiWindowFlags_UnsavedDocument",
                    "value_expression": "1<<18",
                    "value": 262144,
                    "is_count": false,
                    "comments": {
                        "attached": "// Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1088
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoNav",
                    "value_expression": "ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus",
                    "value": 196608,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1089
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoDecoration",
                    "value_expression": "ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse",
                    "value": 43,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1090
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NoInputs",
                    "value_expression": "ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus",
                    "value": 197120,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1091
                    }
                },
                {
                    "name": "ImGuiWindowFlags_ChildWindow",
                    "value_expression": "1<<24",
                    "value": 16777216,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// [Internal]"
                        ],
                        "attached": "// Don't use! For internal use by BeginChild()"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1094
                    }
                },
                {
                    "name": "ImGuiWindowFlags_Tooltip",
                    "value_expression": "1<<25",
                    "value": 33554432,
                    "is_count": false,
                    "comments": {
                        "attached": "// Don't use! For internal use by BeginTooltip()"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1095
                    }
                },
                {
                    "name": "ImGuiWindowFlags_Popup",
                    "value_expression": "1<<26",
                    "value": 67108864,
                    "is_count": false,
                    "comments": {
                        "attached": "// Don't use! For internal use by BeginPopup()"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1096
                    }
                },
                {
                    "name": "ImGuiWindowFlags_Modal",
                    "value_expression": "1<<27",
                    "value": 134217728,
                    "is_count": false,
                    "comments": {
                        "attached": "// Don't use! For internal use by BeginPopupModal()"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1097
                    }
                },
                {
                    "name": "ImGuiWindowFlags_ChildMenu",
                    "value_expression": "1<<28",
                    "value": 268435456,
                    "is_count": false,
                    "comments": {
                        "attached": "// Don't use! For internal use by BeginMenu()"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1098
                    }
                },
                {
                    "name": "ImGuiWindowFlags_NavFlattened",
                    "value_expression": "1<<29",
                    "value": 536870912,
                    "is_count": false,
                    "comments": {
                        "attached": "// Obsoleted in 1.90.9: Use ImGuiChildFlags_NavFlattened in BeginChild() call."
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1102
                    }
                },
                {
                    "name": "ImGuiWindowFlags_AlwaysUseWindowPadding",
                    "value_expression": "1<<30",
                    "value": 1073741824,
                    "is_count": false,
                    "comments": {
                        "attached": "// Obsoleted in 1.90.0: Use ImGuiChildFlags_AlwaysUseWindowPadding in BeginChild() call."
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1103
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::Begin()",
                    "// (Those are per-window flags. There are shared flags in ImGuiIO: io.ConfigWindowsResizeFromEdges and io.ConfigWindowsMoveFromTitleBarOnly)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1067
            }
        },
        {
            "name": "ImGuiChildFlags_",
            "original_fully_qualified_name": "ImGuiChildFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiChildFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1118
                    }
                },
                {
                    "name": "ImGuiChildFlags_Borders",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Show an outer border and enable WindowPadding. (IMPORTANT: this is always == 1 == true for legacy reason)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1119
                    }
                },
                {
                    "name": "ImGuiChildFlags_AlwaysUseWindowPadding",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Pad with style.WindowPadding even if no border are drawn (no padding by default for non-bordered child windows because it makes more sense)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1120
                    }
                },
                {
                    "name": "ImGuiChildFlags_ResizeX",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Allow resize from right border (layout direction). Enable .ini saving (unless ImGuiWindowFlags_NoSavedSettings passed to window flags)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1121
                    }
                },
                {
                    "name": "ImGuiChildFlags_ResizeY",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Allow resize from bottom border (layout direction). \""
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1122
                    }
                },
                {
                    "name": "ImGuiChildFlags_AutoResizeX",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable auto-resizing width. Read \"IMPORTANT: Size measurement\" details above."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1123
                    }
                },
                {
                    "name": "ImGuiChildFlags_AutoResizeY",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable auto-resizing height. Read \"IMPORTANT: Size measurement\" details above."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1124
                    }
                },
                {
                    "name": "ImGuiChildFlags_AlwaysAutoResize",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Combined with AutoResizeX/AutoResizeY. Always measure size even when child is hidden, always return true, always disable clipping optimization! NOT RECOMMENDED."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1125
                    }
                },
                {
                    "name": "ImGuiChildFlags_FrameStyle",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Style the child window like a framed item: use FrameBg, FrameRounding, FrameBorderSize, FramePadding instead of ChildBg, ChildRounding, ChildBorderSize, WindowPadding."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1126
                    }
                },
                {
                    "name": "ImGuiChildFlags_NavFlattened",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// [BETA] Share focus scope, allow keyboard/gamepad navigation to cross over parent border to this child or between sibling child windows."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1127
                    }
                },
                {
                    "name": "ImGuiChildFlags_Border",
                    "value_expression": "ImGuiChildFlags_Borders",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Renamed in 1.91.1 (August 2024) for consistency."
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1131
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::BeginChild()",
                    "// (Legacy: bit 0 must always correspond to ImGuiChildFlags_Borders to be backward compatible with old API using 'bool border = false'.",
                    "// About using AutoResizeX/AutoResizeY flags:",
                    "// - May be combined with SetNextWindowSizeConstraints() to set a min/max size for each axis (see \"Demo->Child->Auto-resize with Constraints\").",
                    "// - Size measurement for a given axis is only performed when the child window is within visible boundaries, or is just appearing.",
                    "//   - This allows BeginChild() to return false when not within boundaries (e.g. when scrolling), which is more optimal. BUT it won't update its auto-size while clipped.",
                    "//     While not perfect, it is a better default behavior as the always-on performance gain is more valuable than the occasional \"resizing after becoming visible again\" glitch.",
                    "//   - You may also use ImGuiChildFlags_AlwaysAutoResize to force an update even when child window is not in view.",
                    "//     HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL PREVENT BeginChild() FROM EVER RETURNING FALSE, disabling benefits of coarse clipping."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1116
            }
        },
        {
            "name": "ImGuiItemFlags_",
            "original_fully_qualified_name": "ImGuiItemFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiItemFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "attached": "// (Default)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1139
                    }
                },
                {
                    "name": "ImGuiItemFlags_NoTabStop",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// false    // Disable keyboard tabbing. This is a \"lighter\" version of ImGuiItemFlags_NoNav."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1140
                    }
                },
                {
                    "name": "ImGuiItemFlags_NoNav",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// false    // Disable any form of focusing (keyboard/gamepad directional navigation and SetKeyboardFocusHere() calls)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1141
                    }
                },
                {
                    "name": "ImGuiItemFlags_NoNavDefaultFocus",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// false    // Disable item being a candidate for default focus (e.g. used by title bar items)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1142
                    }
                },
                {
                    "name": "ImGuiItemFlags_ButtonRepeat",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// false    // Any button-like behavior will have repeat mode enabled (based on io.KeyRepeatDelay and io.KeyRepeatRate values). Note that you can also call IsItemActive() after any button to tell if it is being held."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1143
                    }
                },
                {
                    "name": "ImGuiItemFlags_AutoClosePopups",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// true     // MenuItem()/Selectable() automatically close their parent popup window."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1144
                    }
                },
                {
                    "name": "ImGuiItemFlags_AllowDuplicateId",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// false    // Allow submitting an item with the same identifier as an item already submitted this frame without triggering a warning tooltip if io.ConfigDebugHighlightIdConflicts is set."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1145
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::PushItemFlag()",
                    "// (Those are shared by all items)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1137
            }
        },
        {
            "name": "ImGuiInputTextFlags_",
            "original_fully_qualified_name": "ImGuiInputTextFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiInputTextFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Basic filters (also see ImGuiInputTextFlags_CallbackCharFilter)"
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1153
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CharsDecimal",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Allow 0123456789.+-*/"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1154
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CharsHexadecimal",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Allow 0123456789ABCDEFabcdef"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1155
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CharsScientific",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Allow 0123456789.+-*/eE (Scientific notation input)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1156
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CharsUppercase",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Turn a..z into A..Z"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1157
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CharsNoBlank",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Filter out spaces, tabs"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1158
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_AllowTabInput",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Inputs"
                        ],
                        "attached": "// Pressing TAB input a '\\t' character into the text field"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1161
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_EnterReturnsTrue",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider using IsItemDeactivatedAfterEdit() instead!"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1162
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_EscapeClearsAll",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1163
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CtrlEnterForNewLine",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// In multi-line mode, validate with Enter, add new line with Ctrl+Enter (default is opposite: validate with Ctrl+Enter, add line with Enter)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1164
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_ReadOnly",
                    "value_expression": "1<<9",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Other options"
                        ],
                        "attached": "// Read-only mode"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1167
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_Password",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "attached": "// Password mode, display all characters as '*', disable copy"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1168
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_AlwaysOverwrite",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// Overwrite mode"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1169
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_AutoSelectAll",
                    "value_expression": "1<<12",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "attached": "// Select entire text when first taking mouse focus"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1170
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_ParseEmptyRefVal",
                    "value_expression": "1<<13",
                    "value": 8192,
                    "is_count": false,
                    "comments": {
                        "attached": "// InputFloat(), InputInt(), InputScalar() etc. only: parse empty string as zero value."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1171
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_DisplayEmptyRefVal",
                    "value_expression": "1<<14",
                    "value": 16384,
                    "is_count": false,
                    "comments": {
                        "attached": "// InputFloat(), InputInt(), InputScalar() etc. only: when value is zero, do not display it. Generally used with ImGuiInputTextFlags_ParseEmptyRefVal."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1172
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_NoHorizontalScroll",
                    "value_expression": "1<<15",
                    "value": 32768,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable following the cursor horizontally"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1173
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_NoUndoRedo",
                    "value_expression": "1<<16",
                    "value": 65536,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID()."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1174
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_ElideLeft",
                    "value_expression": "1<<17",
                    "value": 131072,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Elide display / Alignment"
                        ],
                        "attached": "// When text doesn't fit, elide left side to ensure right side stays visible. Useful for path/filenames. Single-line only!"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1177
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CallbackCompletion",
                    "value_expression": "1<<18",
                    "value": 262144,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Callback features"
                        ],
                        "attached": "// Callback on pressing TAB (for completion handling)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1180
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CallbackHistory",
                    "value_expression": "1<<19",
                    "value": 524288,
                    "is_count": false,
                    "comments": {
                        "attached": "// Callback on pressing Up/Down arrows (for history handling)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1181
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CallbackAlways",
                    "value_expression": "1<<20",
                    "value": 1048576,
                    "is_count": false,
                    "comments": {
                        "attached": "// Callback on each iteration. User code may query cursor position, modify text buffer."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1182
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CallbackCharFilter",
                    "value_expression": "1<<21",
                    "value": 2097152,
                    "is_count": false,
                    "comments": {
                        "attached": "// Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1183
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CallbackResize",
                    "value_expression": "1<<22",
                    "value": 4194304,
                    "is_count": false,
                    "comments": {
                        "attached": "// Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1184
                    }
                },
                {
                    "name": "ImGuiInputTextFlags_CallbackEdit",
                    "value_expression": "1<<23",
                    "value": 8388608,
                    "is_count": false,
                    "comments": {
                        "attached": "// Callback on any edit. Note that InputText() already returns true on edit + you can always use IsItemEdited(). The callback is useful to manipulate the underlying buffer while focus is active."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1185
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::InputText()",
                    "// (Those are per-item flags. There are shared flags in ImGuiIO: io.ConfigInputTextCursorBlink and io.ConfigInputTextEnterKeepActive)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1150
            }
        },
        {
            "name": "ImGuiTreeNodeFlags_",
            "original_fully_qualified_name": "ImGuiTreeNodeFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiTreeNodeFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1194
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_Selected",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw as selected"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1195
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_Framed",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw frame with background (e.g. for CollapsingHeader)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1196
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_AllowOverlap",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Hit testing to allow subsequent widgets to overlap this one"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1197
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_NoTreePushOnOpen",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1198
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_NoAutoOpenOnLog",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1199
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_DefaultOpen",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Default node to be open"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1200
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_OpenOnDoubleClick",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Open on double-click instead of simple click (default for multi-select unless any _OpenOnXXX behavior is set explicitly). Both behaviors may be combined."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1201
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_OpenOnArrow",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Open when clicking on the arrow part (default for multi-select unless any _OpenOnXXX behavior is set explicitly). Both behaviors may be combined."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1202
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_Leaf",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// No collapsing, no arrow (use as a convenience for leaf nodes)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1203
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_Bullet",
                    "value_expression": "1<<9",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "attached": "// Display a bullet instead of arrow. IMPORTANT: node can still be marked open/close if you don't set the _Leaf flag!"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1204
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_FramePadding",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "attached": "// Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding() before the node."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1205
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_SpanAvailWidth",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line without using AllowOverlap mode."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1206
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_SpanFullWidth",
                    "value_expression": "1<<12",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "attached": "// Extend hit box to the left-most and right-most edges (cover the indent area)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1207
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_SpanLabelWidth",
                    "value_expression": "1<<13",
                    "value": 8192,
                    "is_count": false,
                    "comments": {
                        "attached": "// Narrow hit box + narrow hovering highlight, will only cover the label text."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1208
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_SpanAllColumns",
                    "value_expression": "1<<14",
                    "value": 16384,
                    "is_count": false,
                    "comments": {
                        "attached": "// Frame will span all columns of its container table (label will still fit in current column)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1209
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_LabelSpanAllColumns",
                    "value_expression": "1<<15",
                    "value": 32768,
                    "is_count": false,
                    "comments": {
                        "attached": "// Label will span all columns of its container table"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1210
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_NavLeftJumpsBackHere",
                    "value_expression": "1<<17",
                    "value": 131072,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "//ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 16,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible"
                        ],
                        "attached": "// (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1212
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_CollapsingHeader",
                    "value_expression": "ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog",
                    "value": 26,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1213
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_AllowItemOverlap",
                    "value_expression": "ImGuiTreeNodeFlags_AllowOverlap",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Renamed in 1.89.7"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1216
                    }
                },
                {
                    "name": "ImGuiTreeNodeFlags_SpanTextWidth",
                    "value_expression": "ImGuiTreeNodeFlags_SpanLabelWidth",
                    "value": 8192,
                    "is_count": false,
                    "comments": {
                        "attached": "// Renamed in 1.90.7"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1217
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1192
            }
        },
        {
            "name": "ImGuiPopupFlags_",
            "original_fully_qualified_name": "ImGuiPopupFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiPopupFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1231
                    }
                },
                {
                    "name": "ImGuiPopupFlags_MouseButtonLeft",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "attached": "// For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1232
                    }
                },
                {
                    "name": "ImGuiPopupFlags_MouseButtonRight",
                    "value_expression": "1",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1233
                    }
                },
                {
                    "name": "ImGuiPopupFlags_MouseButtonMiddle",
                    "value_expression": "2",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1234
                    }
                },
                {
                    "name": "ImGuiPopupFlags_MouseButtonMask_",
                    "value_expression": "0x1F",
                    "value": 31,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1235
                    }
                },
                {
                    "name": "ImGuiPopupFlags_MouseButtonDefault_",
                    "value_expression": "1",
                    "value": 1,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1236
                    }
                },
                {
                    "name": "ImGuiPopupFlags_NoReopen",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// For OpenPopup*(), BeginPopupContext*(): don't reopen same popup if already open (won't reposition, won't reinitialize navigation)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1237
                    }
                },
                {
                    "name": "ImGuiPopupFlags_NoOpenOverExistingPopup",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "//ImGuiPopupFlags_NoReopenAlwaysNavInit = 1 << 6,   // For OpenPopup*(), BeginPopupContext*(): focus and initialize navigation even when not reopening."
                        ],
                        "attached": "// For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1239
                    }
                },
                {
                    "name": "ImGuiPopupFlags_NoOpenOverItems",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1240
                    }
                },
                {
                    "name": "ImGuiPopupFlags_AnyPopupId",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "attached": "// For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1241
                    }
                },
                {
                    "name": "ImGuiPopupFlags_AnyPopupLevel",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1242
                    }
                },
                {
                    "name": "ImGuiPopupFlags_AnyPopup",
                    "value_expression": "ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel",
                    "value": 3072,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1243
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for OpenPopup*(), BeginPopupContext*(), IsPopupOpen() functions.",
                    "// - To be backward compatible with older API which took an 'int mouse_button = 1' argument instead of 'ImGuiPopupFlags flags',",
                    "//   we need to treat small flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags.",
                    "//   It is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags.",
                    "// - For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0.",
                    "//   IMPORTANT: because the default parameter is 1 (==ImGuiPopupFlags_MouseButtonRight), if you rely on the default parameter",
                    "//   and want to use another flag, you need to pass in the ImGuiPopupFlags_MouseButtonRight flag explicitly.",
                    "// - Multiple buttons currently cannot be combined/or-ed in those functions (we could allow it later)."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1229
            }
        },
        {
            "name": "ImGuiSelectableFlags_",
            "original_fully_qualified_name": "ImGuiSelectableFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiSelectableFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1249
                    }
                },
                {
                    "name": "ImGuiSelectableFlags_NoAutoClosePopups",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Clicking this doesn't close parent popup window (overrides ImGuiItemFlags_AutoClosePopups)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1250
                    }
                },
                {
                    "name": "ImGuiSelectableFlags_SpanAllColumns",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Frame will span all columns of its container table (text will still fit in current column)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1251
                    }
                },
                {
                    "name": "ImGuiSelectableFlags_AllowDoubleClick",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Generate press events on double clicks too"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1252
                    }
                },
                {
                    "name": "ImGuiSelectableFlags_Disabled",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Cannot be selected, display grayed out text"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1253
                    }
                },
                {
                    "name": "ImGuiSelectableFlags_AllowOverlap",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// (WIP) Hit testing to allow subsequent widgets to overlap this one"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1254
                    }
                },
                {
                    "name": "ImGuiSelectableFlags_Highlight",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Make the item be displayed as if it is hovered"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1255
                    }
                },
                {
                    "name": "ImGuiSelectableFlags_DontClosePopups",
                    "value_expression": "ImGuiSelectableFlags_NoAutoClosePopups",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Renamed in 1.91.0"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1258
                    }
                },
                {
                    "name": "ImGuiSelectableFlags_AllowItemOverlap",
                    "value_expression": "ImGuiSelectableFlags_AllowOverlap",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Renamed in 1.89.7"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1259
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::Selectable()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1247
            }
        },
        {
            "name": "ImGuiComboFlags_",
            "original_fully_qualified_name": "ImGuiComboFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiComboFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1266
                    }
                },
                {
                    "name": "ImGuiComboFlags_PopupAlignLeft",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Align the popup toward the left by default"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1267
                    }
                },
                {
                    "name": "ImGuiComboFlags_HeightSmall",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1268
                    }
                },
                {
                    "name": "ImGuiComboFlags_HeightRegular",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Max ~8 items visible (default)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1269
                    }
                },
                {
                    "name": "ImGuiComboFlags_HeightLarge",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Max ~20 items visible"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1270
                    }
                },
                {
                    "name": "ImGuiComboFlags_HeightLargest",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// As many fitting items as possible"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1271
                    }
                },
                {
                    "name": "ImGuiComboFlags_NoArrowButton",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Display on the preview box without the square arrow button"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1272
                    }
                },
                {
                    "name": "ImGuiComboFlags_NoPreview",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Display only a square arrow button"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1273
                    }
                },
                {
                    "name": "ImGuiComboFlags_WidthFitPreview",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Width dynamically calculated from preview contents"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1274
                    }
                },
                {
                    "name": "ImGuiComboFlags_HeightMask_",
                    "value_expression": "ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest",
                    "value": 30,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1275
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::BeginCombo()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1264
            }
        },
        {
            "name": "ImGuiTabBarFlags_",
            "original_fully_qualified_name": "ImGuiTabBarFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiTabBarFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1281
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_Reorderable",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Allow manually dragging tabs to re-order them + New tabs are appended at the end of list"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1282
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_AutoSelectNewTabs",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Automatically select new tabs when they appear"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1283
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_TabListPopupButton",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable buttons to open the tab list popup"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1284
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_NoCloseWithMiddleMouseButton",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You may handle this behavior manually on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1285
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_NoTabListScrollingButtons",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1286
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_NoTooltip",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable tooltips when hovering a tab"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1287
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_DrawSelectedOverline",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw selected overline markers over selected tab"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1288
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_FittingPolicyResizeDown",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Resize tabs when they don't fit"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1289
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_FittingPolicyScroll",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// Add scroll buttons when tabs don't fit"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1290
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_FittingPolicyMask_",
                    "value_expression": "ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll",
                    "value": 384,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1291
                    }
                },
                {
                    "name": "ImGuiTabBarFlags_FittingPolicyDefault_",
                    "value_expression": "ImGuiTabBarFlags_FittingPolicyResizeDown",
                    "value": 128,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1292
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::BeginTabBar()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1279
            }
        },
        {
            "name": "ImGuiTabItemFlags_",
            "original_fully_qualified_name": "ImGuiTabItemFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiTabItemFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1298
                    }
                },
                {
                    "name": "ImGuiTabItemFlags_UnsavedDocument",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Display a dot next to the title + set ImGuiTabItemFlags_NoAssumedClosure."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1299
                    }
                },
                {
                    "name": "ImGuiTabItemFlags_SetSelected",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Trigger flag to programmatically make the tab selected when calling BeginTabItem()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1300
                    }
                },
                {
                    "name": "ImGuiTabItemFlags_NoCloseWithMiddleMouseButton",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You may handle this behavior manually on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1301
                    }
                },
                {
                    "name": "ImGuiTabItemFlags_NoPushId",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Don't call PushID()/PopID() on BeginTabItem()/EndTabItem()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1302
                    }
                },
                {
                    "name": "ImGuiTabItemFlags_NoTooltip",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable tooltip for the given tab"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1303
                    }
                },
                {
                    "name": "ImGuiTabItemFlags_NoReorder",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable reordering this tab or having another tab cross over this tab"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1304
                    }
                },
                {
                    "name": "ImGuiTabItemFlags_Leading",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enforce the tab position to the left of the tab bar (after the tab list popup button)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1305
                    }
                },
                {
                    "name": "ImGuiTabItemFlags_Trailing",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enforce the tab position to the right of the tab bar (before the scrolling buttons)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1306
                    }
                },
                {
                    "name": "ImGuiTabItemFlags_NoAssumedClosure",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// Tab is selected when trying to close + closure is not immediately assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1307
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::BeginTabItem()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1296
            }
        },
        {
            "name": "ImGuiFocusedFlags_",
            "original_fully_qualified_name": "ImGuiFocusedFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiFocusedFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1313
                    }
                },
                {
                    "name": "ImGuiFocusedFlags_ChildWindows",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Return true if any children of the window is focused"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1314
                    }
                },
                {
                    "name": "ImGuiFocusedFlags_RootWindow",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Test from root window (top most parent of the current hierarchy)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1315
                    }
                },
                {
                    "name": "ImGuiFocusedFlags_AnyWindow",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1316
                    }
                },
                {
                    "name": "ImGuiFocusedFlags_NoPopupHierarchy",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1317
                    }
                },
                {
                    "name": "ImGuiFocusedFlags_RootAndChildWindows",
                    "value_expression": "ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows",
                    "value": 3,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "//ImGuiFocusedFlags_DockHierarchy               = 1 << 4,   // Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)"
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1319
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::IsWindowFocused()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1311
            }
        },
        {
            "name": "ImGuiHoveredFlags_",
            "original_fully_qualified_name": "ImGuiHoveredFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiHoveredFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "attached": "// Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1327
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_ChildWindows",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsWindowHovered() only: Return true if any children of the window is hovered"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1328
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_RootWindow",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1329
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_AnyWindow",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsWindowHovered() only: Return true if any window is hovered"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1330
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_NoPopupHierarchy",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1331
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_AllowWhenBlockedByPopup",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "//ImGuiHoveredFlags_DockHierarchy               = 1 << 4,   // IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)"
                        ],
                        "attached": "// Return true even if a popup window is normally blocking access to this item/window"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1333
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_AllowWhenBlockedByActiveItem",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "//ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 6,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet."
                        ],
                        "attached": "// Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1335
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_AllowWhenOverlappedByItem",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsItemHovered() only: Return true even if the item uses AllowOverlap mode and is overlapped by another hoverable item."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1336
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_AllowWhenOverlappedByWindow",
                    "value_expression": "1<<9",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1337
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_AllowWhenDisabled",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsItemHovered() only: Return true even if the item is disabled"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1338
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_NoNavOverride",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsItemHovered() only: Disable using keyboard/gamepad navigation state when active, always query mouse"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1339
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_AllowWhenOverlapped",
                    "value_expression": "ImGuiHoveredFlags_AllowWhenOverlappedByItem | ImGuiHoveredFlags_AllowWhenOverlappedByWindow",
                    "value": 768,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1340
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_RectOnly",
                    "value_expression": "ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped",
                    "value": 928,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1341
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_RootAndChildWindows",
                    "value_expression": "ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows",
                    "value": 3,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1342
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_ForTooltip",
                    "value_expression": "1<<12",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Tooltips mode",
                            "// - typically used in IsItemHovered() + SetTooltip() sequence.",
                            "// - this is a shortcut to pull flags from 'style.HoverFlagsForTooltipMouse' or 'style.HoverFlagsForTooltipNav' where you can reconfigure desired behavior.",
                            "//   e.g. 'TooltipHoveredFlagsForMouse' defaults to 'ImGuiHoveredFlags_Stationary | ImGuiHoveredFlags_DelayShort'.",
                            "// - for frequently actioned or hovered items providing a tooltip, you want may to use ImGuiHoveredFlags_ForTooltip (stationary + delay) so the tooltip doesn't show too often.",
                            "// - for items which main purpose is to be hovered, or items with low affordance, or in less consistent apps, prefer no delay or shorter delay."
                        ],
                        "attached": "// Shortcut for standard flags when using IsItemHovered() + SetTooltip() sequence."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1350
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_Stationary",
                    "value_expression": "1<<13",
                    "value": 8192,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// (Advanced) Mouse Hovering delays.",
                            "// - generally you can use ImGuiHoveredFlags_ForTooltip to use application-standardized flags.",
                            "// - use those if you need specific overrides."
                        ],
                        "attached": "// Require mouse to be stationary for style.HoverStationaryDelay (~0.15 sec) _at least one time_. After this, can move on same item/window. Using the stationary test tends to reduces the need for a long delay."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1355
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_DelayNone",
                    "value_expression": "1<<14",
                    "value": 16384,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsItemHovered() only: Return true immediately (default). As this is the default you generally ignore this."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1356
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_DelayShort",
                    "value_expression": "1<<15",
                    "value": 32768,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsItemHovered() only: Return true after style.HoverDelayShort elapsed (~0.15 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1357
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_DelayNormal",
                    "value_expression": "1<<16",
                    "value": 65536,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsItemHovered() only: Return true after style.HoverDelayNormal elapsed (~0.40 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1358
                    }
                },
                {
                    "name": "ImGuiHoveredFlags_NoSharedDelay",
                    "value_expression": "1<<17",
                    "value": 131072,
                    "is_count": false,
                    "comments": {
                        "attached": "// IsItemHovered() only: Disable shared delay system where moving from one item to the next keeps the previous timer for a short time (standard for tooltips with long delays)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1359
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()",
                    "// Note: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!",
                    "// Note: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1325
            }
        },
        {
            "name": "ImGuiDragDropFlags_",
            "original_fully_qualified_name": "ImGuiDragDropFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiDragDropFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1365
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_SourceNoPreviewTooltip",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// BeginDragDropSource() flags"
                        ],
                        "attached": "// Disable preview tooltip. By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disables this behavior."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1367
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_SourceNoDisableHover",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disables this behavior so you can still call IsItemHovered() on the source item."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1368
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_SourceNoHoldToOpenOthers",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1369
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_SourceAllowNullID",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1370
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_SourceExtern",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1371
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_PayloadAutoExpire",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1372
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_PayloadNoCrossContext",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Hint to specify that the payload may not be copied outside current dear imgui context."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1373
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_PayloadNoCrossProcess",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Hint to specify that the payload may not be copied outside current process."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1374
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_AcceptBeforeDelivery",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// AcceptDragDropPayload() flags"
                        ],
                        "attached": "// AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1376
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_AcceptNoDrawDefaultRect",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// Do not draw the default highlight rectangle when hovering over target."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1377
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_AcceptNoPreviewTooltip",
                    "value_expression": "1<<12",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "attached": "// Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1378
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_AcceptPeekOnly",
                    "value_expression": "ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect",
                    "value": 3072,
                    "is_count": false,
                    "comments": {
                        "attached": "// For peeking ahead and inspecting the payload before delivery."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1379
                    }
                },
                {
                    "name": "ImGuiDragDropFlags_SourceAutoExpirePayload",
                    "value_expression": "ImGuiDragDropFlags_PayloadAutoExpire",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Renamed in 1.90.9"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1382
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1363
            }
        },
        {
            "name": "ImGuiDataType_",
            "original_fully_qualified_name": "ImGuiDataType_",
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiDataType_S8",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "attached": "// signed char / char (with sensible compilers)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1393
                    }
                },
                {
                    "name": "ImGuiDataType_U8",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// unsigned char"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1394
                    }
                },
                {
                    "name": "ImGuiDataType_S16",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// short"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1395
                    }
                },
                {
                    "name": "ImGuiDataType_U16",
                    "value": 3,
                    "is_count": false,
                    "comments": {
                        "attached": "// unsigned short"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1396
                    }
                },
                {
                    "name": "ImGuiDataType_S32",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// int"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1397
                    }
                },
                {
                    "name": "ImGuiDataType_U32",
                    "value": 5,
                    "is_count": false,
                    "comments": {
                        "attached": "// unsigned int"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1398
                    }
                },
                {
                    "name": "ImGuiDataType_S64",
                    "value": 6,
                    "is_count": false,
                    "comments": {
                        "attached": "// long long / __int64"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1399
                    }
                },
                {
                    "name": "ImGuiDataType_U64",
                    "value": 7,
                    "is_count": false,
                    "comments": {
                        "attached": "// unsigned long long / unsigned __int64"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1400
                    }
                },
                {
                    "name": "ImGuiDataType_Float",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// float"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1401
                    }
                },
                {
                    "name": "ImGuiDataType_Double",
                    "value": 9,
                    "is_count": false,
                    "comments": {
                        "attached": "// double"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1402
                    }
                },
                {
                    "name": "ImGuiDataType_Bool",
                    "value": 10,
                    "is_count": false,
                    "comments": {
                        "attached": "// bool (provided for user convenience, not supported by scalar widgets)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1403
                    }
                },
                {
                    "name": "ImGuiDataType_String",
                    "value": 11,
                    "is_count": false,
                    "comments": {
                        "attached": "// char* (provided for user convenience, not supported by scalar widgets)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1404
                    }
                },
                {
                    "name": "ImGuiDataType_COUNT",
                    "value": 12,
                    "is_count": true,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1405
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// A primary data type"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1391
            }
        },
        {
            "name": "ImGuiDir",
            "original_fully_qualified_name": "ImGuiDir",
            "storage_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiDir_None",
                    "value_expression": "-1",
                    "value": -1,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1411
                    }
                },
                {
                    "name": "ImGuiDir_Left",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1412
                    }
                },
                {
                    "name": "ImGuiDir_Right",
                    "value_expression": "1",
                    "value": 1,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1413
                    }
                },
                {
                    "name": "ImGuiDir_Up",
                    "value_expression": "2",
                    "value": 2,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1414
                    }
                },
                {
                    "name": "ImGuiDir_Down",
                    "value_expression": "3",
                    "value": 3,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1415
                    }
                },
                {
                    "name": "ImGuiDir_COUNT",
                    "value": 4,
                    "is_count": true,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1416
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// A cardinal direction"
                ],
                "attached": "// Forward declared enum type ImGuiDir"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1409
            }
        },
        {
            "name": "ImGuiSortDirection",
            "original_fully_qualified_name": "ImGuiSortDirection",
            "storage_type": {
                "declaration": "ImU8",
                "description": {
                    "kind": "User",
                    "name": "ImU8"
                }
            },
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiSortDirection_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1422
                    }
                },
                {
                    "name": "ImGuiSortDirection_Ascending",
                    "value_expression": "1",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Ascending = 0->9, A->Z etc."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1423
                    }
                },
                {
                    "name": "ImGuiSortDirection_Descending",
                    "value_expression": "2",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Descending = 9->0, Z->A etc."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1424
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// A sorting direction"
                ],
                "attached": "// Forward declared enum type ImGuiSortDirection"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1420
            }
        },
        {
            "name": "ImGuiKey",
            "original_fully_qualified_name": "ImGuiKey",
            "storage_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiKey_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Keyboard"
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1436
                    }
                },
                {
                    "name": "ImGuiKey_NamedKey_BEGIN",
                    "value_expression": "512",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "attached": "// First valid key value (other than 0)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1437
                    }
                },
                {
                    "name": "ImGuiKey_Tab",
                    "value_expression": "512",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "attached": "// == ImGuiKey_NamedKey_BEGIN"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1439
                    }
                },
                {
                    "name": "ImGuiKey_LeftArrow",
                    "value": 513,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1440
                    }
                },
                {
                    "name": "ImGuiKey_RightArrow",
                    "value": 514,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1441
                    }
                },
                {
                    "name": "ImGuiKey_UpArrow",
                    "value": 515,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1442
                    }
                },
                {
                    "name": "ImGuiKey_DownArrow",
                    "value": 516,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1443
                    }
                },
                {
                    "name": "ImGuiKey_PageUp",
                    "value": 517,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1444
                    }
                },
                {
                    "name": "ImGuiKey_PageDown",
                    "value": 518,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1445
                    }
                },
                {
                    "name": "ImGuiKey_Home",
                    "value": 519,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1446
                    }
                },
                {
                    "name": "ImGuiKey_End",
                    "value": 520,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1447
                    }
                },
                {
                    "name": "ImGuiKey_Insert",
                    "value": 521,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1448
                    }
                },
                {
                    "name": "ImGuiKey_Delete",
                    "value": 522,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1449
                    }
                },
                {
                    "name": "ImGuiKey_Backspace",
                    "value": 523,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1450
                    }
                },
                {
                    "name": "ImGuiKey_Space",
                    "value": 524,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1451
                    }
                },
                {
                    "name": "ImGuiKey_Enter",
                    "value": 525,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1452
                    }
                },
                {
                    "name": "ImGuiKey_Escape",
                    "value": 526,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1453
                    }
                },
                {
                    "name": "ImGuiKey_LeftCtrl",
                    "value": 527,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1454
                    }
                },
                {
                    "name": "ImGuiKey_LeftShift",
                    "value": 528,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1454
                    }
                },
                {
                    "name": "ImGuiKey_LeftAlt",
                    "value": 529,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1454
                    }
                },
                {
                    "name": "ImGuiKey_LeftSuper",
                    "value": 530,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1454
                    }
                },
                {
                    "name": "ImGuiKey_RightCtrl",
                    "value": 531,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1455
                    }
                },
                {
                    "name": "ImGuiKey_RightShift",
                    "value": 532,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1455
                    }
                },
                {
                    "name": "ImGuiKey_RightAlt",
                    "value": 533,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1455
                    }
                },
                {
                    "name": "ImGuiKey_RightSuper",
                    "value": 534,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1455
                    }
                },
                {
                    "name": "ImGuiKey_Menu",
                    "value": 535,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1456
                    }
                },
                {
                    "name": "ImGuiKey_0",
                    "value": 536,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1457
                    }
                },
                {
                    "name": "ImGuiKey_1",
                    "value": 537,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1457
                    }
                },
                {
                    "name": "ImGuiKey_2",
                    "value": 538,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1457
                    }
                },
                {
                    "name": "ImGuiKey_3",
                    "value": 539,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1457
                    }
                },
                {
                    "name": "ImGuiKey_4",
                    "value": 540,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1457
                    }
                },
                {
                    "name": "ImGuiKey_5",
                    "value": 541,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1457
                    }
                },
                {
                    "name": "ImGuiKey_6",
                    "value": 542,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1457
                    }
                },
                {
                    "name": "ImGuiKey_7",
                    "value": 543,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1457
                    }
                },
                {
                    "name": "ImGuiKey_8",
                    "value": 544,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1457
                    }
                },
                {
                    "name": "ImGuiKey_9",
                    "value": 545,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1457
                    }
                },
                {
                    "name": "ImGuiKey_A",
                    "value": 546,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1458
                    }
                },
                {
                    "name": "ImGuiKey_B",
                    "value": 547,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1458
                    }
                },
                {
                    "name": "ImGuiKey_C",
                    "value": 548,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1458
                    }
                },
                {
                    "name": "ImGuiKey_D",
                    "value": 549,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1458
                    }
                },
                {
                    "name": "ImGuiKey_E",
                    "value": 550,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1458
                    }
                },
                {
                    "name": "ImGuiKey_F",
                    "value": 551,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1458
                    }
                },
                {
                    "name": "ImGuiKey_G",
                    "value": 552,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1458
                    }
                },
                {
                    "name": "ImGuiKey_H",
                    "value": 553,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1458
                    }
                },
                {
                    "name": "ImGuiKey_I",
                    "value": 554,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1458
                    }
                },
                {
                    "name": "ImGuiKey_J",
                    "value": 555,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1458
                    }
                },
                {
                    "name": "ImGuiKey_K",
                    "value": 556,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1459
                    }
                },
                {
                    "name": "ImGuiKey_L",
                    "value": 557,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1459
                    }
                },
                {
                    "name": "ImGuiKey_M",
                    "value": 558,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1459
                    }
                },
                {
                    "name": "ImGuiKey_N",
                    "value": 559,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1459
                    }
                },
                {
                    "name": "ImGuiKey_O",
                    "value": 560,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1459
                    }
                },
                {
                    "name": "ImGuiKey_P",
                    "value": 561,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1459
                    }
                },
                {
                    "name": "ImGuiKey_Q",
                    "value": 562,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1459
                    }
                },
                {
                    "name": "ImGuiKey_R",
                    "value": 563,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1459
                    }
                },
                {
                    "name": "ImGuiKey_S",
                    "value": 564,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1459
                    }
                },
                {
                    "name": "ImGuiKey_T",
                    "value": 565,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1459
                    }
                },
                {
                    "name": "ImGuiKey_U",
                    "value": 566,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1460
                    }
                },
                {
                    "name": "ImGuiKey_V",
                    "value": 567,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1460
                    }
                },
                {
                    "name": "ImGuiKey_W",
                    "value": 568,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1460
                    }
                },
                {
                    "name": "ImGuiKey_X",
                    "value": 569,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1460
                    }
                },
                {
                    "name": "ImGuiKey_Y",
                    "value": 570,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1460
                    }
                },
                {
                    "name": "ImGuiKey_Z",
                    "value": 571,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1460
                    }
                },
                {
                    "name": "ImGuiKey_F1",
                    "value": 572,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1461
                    }
                },
                {
                    "name": "ImGuiKey_F2",
                    "value": 573,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1461
                    }
                },
                {
                    "name": "ImGuiKey_F3",
                    "value": 574,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1461
                    }
                },
                {
                    "name": "ImGuiKey_F4",
                    "value": 575,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1461
                    }
                },
                {
                    "name": "ImGuiKey_F5",
                    "value": 576,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1461
                    }
                },
                {
                    "name": "ImGuiKey_F6",
                    "value": 577,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1461
                    }
                },
                {
                    "name": "ImGuiKey_F7",
                    "value": 578,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1462
                    }
                },
                {
                    "name": "ImGuiKey_F8",
                    "value": 579,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1462
                    }
                },
                {
                    "name": "ImGuiKey_F9",
                    "value": 580,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1462
                    }
                },
                {
                    "name": "ImGuiKey_F10",
                    "value": 581,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1462
                    }
                },
                {
                    "name": "ImGuiKey_F11",
                    "value": 582,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1462
                    }
                },
                {
                    "name": "ImGuiKey_F12",
                    "value": 583,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1462
                    }
                },
                {
                    "name": "ImGuiKey_F13",
                    "value": 584,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1463
                    }
                },
                {
                    "name": "ImGuiKey_F14",
                    "value": 585,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1463
                    }
                },
                {
                    "name": "ImGuiKey_F15",
                    "value": 586,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1463
                    }
                },
                {
                    "name": "ImGuiKey_F16",
                    "value": 587,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1463
                    }
                },
                {
                    "name": "ImGuiKey_F17",
                    "value": 588,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1463
                    }
                },
                {
                    "name": "ImGuiKey_F18",
                    "value": 589,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1463
                    }
                },
                {
                    "name": "ImGuiKey_F19",
                    "value": 590,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1464
                    }
                },
                {
                    "name": "ImGuiKey_F20",
                    "value": 591,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1464
                    }
                },
                {
                    "name": "ImGuiKey_F21",
                    "value": 592,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1464
                    }
                },
                {
                    "name": "ImGuiKey_F22",
                    "value": 593,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1464
                    }
                },
                {
                    "name": "ImGuiKey_F23",
                    "value": 594,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1464
                    }
                },
                {
                    "name": "ImGuiKey_F24",
                    "value": 595,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1464
                    }
                },
                {
                    "name": "ImGuiKey_Apostrophe",
                    "value": 596,
                    "is_count": false,
                    "comments": {
                        "attached": "// '"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1465
                    }
                },
                {
                    "name": "ImGuiKey_Comma",
                    "value": 597,
                    "is_count": false,
                    "comments": {
                        "attached": "// ,"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1466
                    }
                },
                {
                    "name": "ImGuiKey_Minus",
                    "value": 598,
                    "is_count": false,
                    "comments": {
                        "attached": "// -"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1467
                    }
                },
                {
                    "name": "ImGuiKey_Period",
                    "value": 599,
                    "is_count": false,
                    "comments": {
                        "attached": "// ."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1468
                    }
                },
                {
                    "name": "ImGuiKey_Slash",
                    "value": 600,
                    "is_count": false,
                    "comments": {
                        "attached": "// /"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1469
                    }
                },
                {
                    "name": "ImGuiKey_Semicolon",
                    "value": 601,
                    "is_count": false,
                    "comments": {
                        "attached": "// ;"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1470
                    }
                },
                {
                    "name": "ImGuiKey_Equal",
                    "value": 602,
                    "is_count": false,
                    "comments": {
                        "attached": "// ="
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1471
                    }
                },
                {
                    "name": "ImGuiKey_LeftBracket",
                    "value": 603,
                    "is_count": false,
                    "comments": {
                        "attached": "// ["
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1472
                    }
                },
                {
                    "name": "ImGuiKey_Backslash",
                    "value": 604,
                    "is_count": false,
                    "comments": {
                        "attached": "// \\ (this text inhibit multiline comment caused by backslash)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1473
                    }
                },
                {
                    "name": "ImGuiKey_RightBracket",
                    "value": 605,
                    "is_count": false,
                    "comments": {
                        "attached": "// ]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1474
                    }
                },
                {
                    "name": "ImGuiKey_GraveAccent",
                    "value": 606,
                    "is_count": false,
                    "comments": {
                        "attached": "// `"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1475
                    }
                },
                {
                    "name": "ImGuiKey_CapsLock",
                    "value": 607,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1476
                    }
                },
                {
                    "name": "ImGuiKey_ScrollLock",
                    "value": 608,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1477
                    }
                },
                {
                    "name": "ImGuiKey_NumLock",
                    "value": 609,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1478
                    }
                },
                {
                    "name": "ImGuiKey_PrintScreen",
                    "value": 610,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1479
                    }
                },
                {
                    "name": "ImGuiKey_Pause",
                    "value": 611,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1480
                    }
                },
                {
                    "name": "ImGuiKey_Keypad0",
                    "value": 612,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1481
                    }
                },
                {
                    "name": "ImGuiKey_Keypad1",
                    "value": 613,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1481
                    }
                },
                {
                    "name": "ImGuiKey_Keypad2",
                    "value": 614,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1481
                    }
                },
                {
                    "name": "ImGuiKey_Keypad3",
                    "value": 615,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1481
                    }
                },
                {
                    "name": "ImGuiKey_Keypad4",
                    "value": 616,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1481
                    }
                },
                {
                    "name": "ImGuiKey_Keypad5",
                    "value": 617,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1482
                    }
                },
                {
                    "name": "ImGuiKey_Keypad6",
                    "value": 618,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1482
                    }
                },
                {
                    "name": "ImGuiKey_Keypad7",
                    "value": 619,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1482
                    }
                },
                {
                    "name": "ImGuiKey_Keypad8",
                    "value": 620,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1482
                    }
                },
                {
                    "name": "ImGuiKey_Keypad9",
                    "value": 621,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1482
                    }
                },
                {
                    "name": "ImGuiKey_KeypadDecimal",
                    "value": 622,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1483
                    }
                },
                {
                    "name": "ImGuiKey_KeypadDivide",
                    "value": 623,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1484
                    }
                },
                {
                    "name": "ImGuiKey_KeypadMultiply",
                    "value": 624,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1485
                    }
                },
                {
                    "name": "ImGuiKey_KeypadSubtract",
                    "value": 625,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1486
                    }
                },
                {
                    "name": "ImGuiKey_KeypadAdd",
                    "value": 626,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1487
                    }
                },
                {
                    "name": "ImGuiKey_KeypadEnter",
                    "value": 627,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1488
                    }
                },
                {
                    "name": "ImGuiKey_KeypadEqual",
                    "value": 628,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1489
                    }
                },
                {
                    "name": "ImGuiKey_AppBack",
                    "value": 629,
                    "is_count": false,
                    "comments": {
                        "attached": "// Available on some keyboard/mouses. Often referred as \"Browser Back\""
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1490
                    }
                },
                {
                    "name": "ImGuiKey_AppForward",
                    "value": 630,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1491
                    }
                },
                {
                    "name": "ImGuiKey_GamepadStart",
                    "value": 631,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Gamepad (some of those are analog values, 0.0f to 1.0f)                          // NAVIGATION ACTION",
                            "// (download controller mapping PNG/PSD at http://dearimgui.com/controls_sheets)"
                        ],
                        "attached": "// Menu (Xbox)      + (Switch)   Start/Options (PS)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1495
                    }
                },
                {
                    "name": "ImGuiKey_GamepadBack",
                    "value": 632,
                    "is_count": false,
                    "comments": {
                        "attached": "// View (Xbox)      - (Switch)   Share (PS)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1496
                    }
                },
                {
                    "name": "ImGuiKey_GamepadFaceLeft",
                    "value": 633,
                    "is_count": false,
                    "comments": {
                        "attached": "// X (Xbox)         Y (Switch)   Square (PS)        // Tap: Toggle Menu. Hold: Windowing mode (Focus/Move/Resize windows)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1497
                    }
                },
                {
                    "name": "ImGuiKey_GamepadFaceRight",
                    "value": 634,
                    "is_count": false,
                    "comments": {
                        "attached": "// B (Xbox)         A (Switch)   Circle (PS)        // Cancel / Close / Exit"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1498
                    }
                },
                {
                    "name": "ImGuiKey_GamepadFaceUp",
                    "value": 635,
                    "is_count": false,
                    "comments": {
                        "attached": "// Y (Xbox)         X (Switch)   Triangle (PS)      // Text Input / On-screen Keyboard"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1499
                    }
                },
                {
                    "name": "ImGuiKey_GamepadFaceDown",
                    "value": 636,
                    "is_count": false,
                    "comments": {
                        "attached": "// A (Xbox)         B (Switch)   Cross (PS)         // Activate / Open / Toggle / Tweak"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1500
                    }
                },
                {
                    "name": "ImGuiKey_GamepadDpadLeft",
                    "value": 637,
                    "is_count": false,
                    "comments": {
                        "attached": "// D-pad Left                                       // Move / Tweak / Resize Window (in Windowing mode)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1501
                    }
                },
                {
                    "name": "ImGuiKey_GamepadDpadRight",
                    "value": 638,
                    "is_count": false,
                    "comments": {
                        "attached": "// D-pad Right                                      // Move / Tweak / Resize Window (in Windowing mode)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1502
                    }
                },
                {
                    "name": "ImGuiKey_GamepadDpadUp",
                    "value": 639,
                    "is_count": false,
                    "comments": {
                        "attached": "// D-pad Up                                         // Move / Tweak / Resize Window (in Windowing mode)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1503
                    }
                },
                {
                    "name": "ImGuiKey_GamepadDpadDown",
                    "value": 640,
                    "is_count": false,
                    "comments": {
                        "attached": "// D-pad Down                                       // Move / Tweak / Resize Window (in Windowing mode)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1504
                    }
                },
                {
                    "name": "ImGuiKey_GamepadL1",
                    "value": 641,
                    "is_count": false,
                    "comments": {
                        "attached": "// L Bumper (Xbox)  L (Switch)   L1 (PS)            // Tweak Slower / Focus Previous (in Windowing mode)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1505
                    }
                },
                {
                    "name": "ImGuiKey_GamepadR1",
                    "value": 642,
                    "is_count": false,
                    "comments": {
                        "attached": "// R Bumper (Xbox)  R (Switch)   R1 (PS)            // Tweak Faster / Focus Next (in Windowing mode)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1506
                    }
                },
                {
                    "name": "ImGuiKey_GamepadL2",
                    "value": 643,
                    "is_count": false,
                    "comments": {
                        "attached": "// L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1507
                    }
                },
                {
                    "name": "ImGuiKey_GamepadR2",
                    "value": 644,
                    "is_count": false,
                    "comments": {
                        "attached": "// R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1508
                    }
                },
                {
                    "name": "ImGuiKey_GamepadL3",
                    "value": 645,
                    "is_count": false,
                    "comments": {
                        "attached": "// L Stick (Xbox)   L3 (Switch)  L3 (PS)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1509
                    }
                },
                {
                    "name": "ImGuiKey_GamepadR3",
                    "value": 646,
                    "is_count": false,
                    "comments": {
                        "attached": "// R Stick (Xbox)   R3 (Switch)  R3 (PS)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1510
                    }
                },
                {
                    "name": "ImGuiKey_GamepadLStickLeft",
                    "value": 647,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Analog]                                         // Move Window (in Windowing mode)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1511
                    }
                },
                {
                    "name": "ImGuiKey_GamepadLStickRight",
                    "value": 648,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Analog]                                         // Move Window (in Windowing mode)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1512
                    }
                },
                {
                    "name": "ImGuiKey_GamepadLStickUp",
                    "value": 649,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Analog]                                         // Move Window (in Windowing mode)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1513
                    }
                },
                {
                    "name": "ImGuiKey_GamepadLStickDown",
                    "value": 650,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Analog]                                         // Move Window (in Windowing mode)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1514
                    }
                },
                {
                    "name": "ImGuiKey_GamepadRStickLeft",
                    "value": 651,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Analog]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1515
                    }
                },
                {
                    "name": "ImGuiKey_GamepadRStickRight",
                    "value": 652,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Analog]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1516
                    }
                },
                {
                    "name": "ImGuiKey_GamepadRStickUp",
                    "value": 653,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Analog]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1517
                    }
                },
                {
                    "name": "ImGuiKey_GamepadRStickDown",
                    "value": 654,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Analog]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1518
                    }
                },
                {
                    "name": "ImGuiKey_MouseLeft",
                    "value": 655,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls)",
                            "// - This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API."
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1522
                    }
                },
                {
                    "name": "ImGuiKey_MouseRight",
                    "value": 656,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1522
                    }
                },
                {
                    "name": "ImGuiKey_MouseMiddle",
                    "value": 657,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1522
                    }
                },
                {
                    "name": "ImGuiKey_MouseX1",
                    "value": 658,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1522
                    }
                },
                {
                    "name": "ImGuiKey_MouseX2",
                    "value": 659,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1522
                    }
                },
                {
                    "name": "ImGuiKey_MouseWheelX",
                    "value": 660,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1522
                    }
                },
                {
                    "name": "ImGuiKey_MouseWheelY",
                    "value": 661,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1522
                    }
                },
                {
                    "name": "ImGuiKey_ReservedForModCtrl",
                    "value": 662,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// [Internal] Reserved for mod storage"
                        ]
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1525
                    }
                },
                {
                    "name": "ImGuiKey_ReservedForModShift",
                    "value": 663,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1525
                    }
                },
                {
                    "name": "ImGuiKey_ReservedForModAlt",
                    "value": 664,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1525
                    }
                },
                {
                    "name": "ImGuiKey_ReservedForModSuper",
                    "value": 665,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1525
                    }
                },
                {
                    "name": "ImGuiKey_NamedKey_END",
                    "value": 666,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1526
                    }
                },
                {
                    "name": "ImGuiMod_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls)",
                            "// - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing",
                            "//   them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc.",
                            "// - Code polling every key (e.g. an interface to detect a key press for input mapping) might want to ignore those",
                            "//   and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiMod_Ctrl).",
                            "// - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.",
                            "//   In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and",
                            "//   backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...",
                            "// - On macOS, we swap Cmd(Super) and Ctrl keys at the time of the io.AddKeyEvent() call."
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1537
                    }
                },
                {
                    "name": "ImGuiMod_Ctrl",
                    "value_expression": "1<<12",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "attached": "// Ctrl (non-macOS), Cmd (macOS)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1538
                    }
                },
                {
                    "name": "ImGuiMod_Shift",
                    "value_expression": "1<<13",
                    "value": 8192,
                    "is_count": false,
                    "comments": {
                        "attached": "// Shift"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1539
                    }
                },
                {
                    "name": "ImGuiMod_Alt",
                    "value_expression": "1<<14",
                    "value": 16384,
                    "is_count": false,
                    "comments": {
                        "attached": "// Option/Menu"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1540
                    }
                },
                {
                    "name": "ImGuiMod_Super",
                    "value_expression": "1<<15",
                    "value": 32768,
                    "is_count": false,
                    "comments": {
                        "attached": "// Windows/Super (non-macOS), Ctrl (macOS)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1541
                    }
                },
                {
                    "name": "ImGuiMod_Mask_",
                    "value_expression": "0xF000",
                    "value": 61440,
                    "is_count": false,
                    "comments": {
                        "attached": "// 4-bits"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1542
                    }
                },
                {
                    "name": "ImGuiKey_NamedKey_COUNT",
                    "value_expression": "ImGuiKey_NamedKey_END-ImGuiKey_NamedKey_BEGIN",
                    "value": 154,
                    "is_count": true,
                    "comments": {
                        "preceding": [
                            "// [Internal] If you need to iterate all keys (for e.g. an input mapper) you may use ImGuiKey_NamedKey_BEGIN..ImGuiKey_NamedKey_END."
                        ]
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1545
                    }
                },
                {
                    "name": "ImGuiKey_COUNT",
                    "value_expression": "ImGuiKey_NamedKey_END",
                    "value": 666,
                    "is_count": true,
                    "comments": {
                        "attached": "// Obsoleted in 1.91.5 because it was extremely misleading (since named keys don't start at 0 anymore)"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1550
                    }
                },
                {
                    "name": "ImGuiMod_Shortcut",
                    "value_expression": "ImGuiMod_Ctrl",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "attached": "// Removed in 1.90.7, you can now simply use ImGuiMod_Ctrl"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1551
                    }
                },
                {
                    "name": "ImGuiKey_ModCtrl",
                    "value_expression": "ImGuiMod_Ctrl",
                    "value": 4096,
                    "is_count": false,
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1552
                    }
                },
                {
                    "name": "ImGuiKey_ModShift",
                    "value_expression": "ImGuiMod_Shift",
                    "value": 8192,
                    "is_count": false,
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1552
                    }
                },
                {
                    "name": "ImGuiKey_ModAlt",
                    "value_expression": "ImGuiMod_Alt",
                    "value": 16384,
                    "is_count": false,
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1552
                    }
                },
                {
                    "name": "ImGuiKey_ModSuper",
                    "value_expression": "ImGuiMod_Super",
                    "value": 32768,
                    "is_count": false,
                    "comments": {
                        "attached": "// Renamed in 1.89"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1552
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// A key identifier (ImGuiKey_XXX or ImGuiMod_XXX value): can represent Keyboard, Mouse and Gamepad values.",
                    "// All our named keys are >= 512. Keys value 0 to 511 are left unused and were legacy native/opaque key values (< 1.87).",
                    "// Support for legacy keys was completely removed in 1.91.5.",
                    "// Read details about the 1.87+ transition : https://github.com/ocornut/imgui/issues/4921",
                    "// Note that \"Keys\" related to physical keys and are not the same concept as input \"Characters\", the later are submitted via io.AddInputCharacter().",
                    "// The keyboard key enum values are named after the keys on a standard US keyboard, and on other keyboard types the keys reported may not match the keycaps."
                ],
                "attached": "// Forward declared enum type ImGuiKey"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1433
            }
        },
        {
            "name": "ImGuiInputFlags_",
            "original_fully_qualified_name": "ImGuiInputFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiInputFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1562
                    }
                },
                {
                    "name": "ImGuiInputFlags_Repeat",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable repeat. Return true on successive repeats. Default for legacy IsKeyPressed(). NOT Default for legacy IsMouseClicked(). MUST BE == 1."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1563
                    }
                },
                {
                    "name": "ImGuiInputFlags_RouteActive",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Flags for Shortcut(), SetNextItemShortcut()",
                            "// - Routing policies: RouteGlobal+OverActive >> RouteActive or RouteFocused (if owner is active item) >> RouteGlobal+OverFocused >> RouteFocused (if in focused window stack) >> RouteGlobal.",
                            "// - Default policy is RouteFocused. Can select only 1 policy among all available."
                        ],
                        "attached": "// Route to active item only."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1568
                    }
                },
                {
                    "name": "ImGuiInputFlags_RouteFocused",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// Route to windows in the focus stack (DEFAULT). Deep-most focused window takes inputs. Active item takes inputs over deep-most focused window."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1569
                    }
                },
                {
                    "name": "ImGuiInputFlags_RouteGlobal",
                    "value_expression": "1<<12",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "attached": "// Global route (unless a focused window or active item registered the route)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1570
                    }
                },
                {
                    "name": "ImGuiInputFlags_RouteAlways",
                    "value_expression": "1<<13",
                    "value": 8192,
                    "is_count": false,
                    "comments": {
                        "attached": "// Do not register route, poll keys directly."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1571
                    }
                },
                {
                    "name": "ImGuiInputFlags_RouteOverFocused",
                    "value_expression": "1<<14",
                    "value": 16384,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// - Routing options"
                        ],
                        "attached": "// Option: global route: higher priority than focused route (unless active item in focused route)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1573
                    }
                },
                {
                    "name": "ImGuiInputFlags_RouteOverActive",
                    "value_expression": "1<<15",
                    "value": 32768,
                    "is_count": false,
                    "comments": {
                        "attached": "// Option: global route: higher priority than active item. Unlikely you need to use that: will interfere with every active items, e.g. CTRL+A registered by InputText will be overridden by this. May not be fully honored as user/internal code is likely to always assume they can access keys when active."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1574
                    }
                },
                {
                    "name": "ImGuiInputFlags_RouteUnlessBgFocused",
                    "value_expression": "1<<16",
                    "value": 65536,
                    "is_count": false,
                    "comments": {
                        "attached": "// Option: global route: will not be applied if underlying background/void is focused (== no Dear ImGui windows are focused). Useful for overlay applications."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1575
                    }
                },
                {
                    "name": "ImGuiInputFlags_RouteFromRootWindow",
                    "value_expression": "1<<17",
                    "value": 131072,
                    "is_count": false,
                    "comments": {
                        "attached": "// Option: route evaluated from the point of view of root window rather than current window."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1576
                    }
                },
                {
                    "name": "ImGuiInputFlags_Tooltip",
                    "value_expression": "1<<18",
                    "value": 262144,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Flags for SetNextItemShortcut()"
                        ],
                        "attached": "// Automatically display a tooltip when hovering item [BETA] Unsure of right api (opt-in/opt-out)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1579
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for Shortcut(), SetNextItemShortcut(),",
                    "// (and for upcoming extended versions of IsKeyPressed(), IsMouseClicked(), Shortcut(), SetKeyOwner(), SetItemKeyOwner() that are still in imgui_internal.h)",
                    "// Don't mistake with ImGuiInputTextFlags! (which is for ImGui::InputText() function)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1560
            }
        },
        {
            "name": "ImGuiConfigFlags_",
            "original_fully_qualified_name": "ImGuiConfigFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiConfigFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1585
                    }
                },
                {
                    "name": "ImGuiConfigFlags_NavEnableKeyboard",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Master keyboard navigation enable flag. Enable full Tabbing + directional arrows + space/enter to activate."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1586
                    }
                },
                {
                    "name": "ImGuiConfigFlags_NavEnableGamepad",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Master gamepad navigation enable flag. Backend also needs to set ImGuiBackendFlags_HasGamepad."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1587
                    }
                },
                {
                    "name": "ImGuiConfigFlags_NoMouse",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Instruct dear imgui to disable mouse inputs and interactions."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1588
                    }
                },
                {
                    "name": "ImGuiConfigFlags_NoMouseCursorChange",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1589
                    }
                },
                {
                    "name": "ImGuiConfigFlags_NoKeyboard",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Instruct dear imgui to disable keyboard inputs and interactions. This is done by ignoring keyboard events and clearing existing states."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1590
                    }
                },
                {
                    "name": "ImGuiConfigFlags_IsSRGB",
                    "value_expression": "1<<20",
                    "value": 1048576,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// User storage (to allow your backend/engine to communicate to code that may be shared between multiple projects. Those flags are NOT used by core Dear ImGui)"
                        ],
                        "attached": "// Application is SRGB-aware."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1593
                    }
                },
                {
                    "name": "ImGuiConfigFlags_IsTouchScreen",
                    "value_expression": "1<<21",
                    "value": 2097152,
                    "is_count": false,
                    "comments": {
                        "attached": "// Application is using a touch screen instead of a mouse."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1594
                    }
                },
                {
                    "name": "ImGuiConfigFlags_NavEnableSetMousePos",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// [moved/renamed in 1.91.4] -> use bool io.ConfigNavMoveSetMousePos"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1597
                    }
                },
                {
                    "name": "ImGuiConfigFlags_NavNoCaptureKeyboard",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// [moved/renamed in 1.91.4] -> use bool io.ConfigNavCaptureKeyboard"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1598
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Configuration flags stored in io.ConfigFlags. Set by user/application."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1583
            }
        },
        {
            "name": "ImGuiBackendFlags_",
            "original_fully_qualified_name": "ImGuiBackendFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiBackendFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1605
                    }
                },
                {
                    "name": "ImGuiBackendFlags_HasGamepad",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Backend Platform supports gamepad and currently has one connected."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1606
                    }
                },
                {
                    "name": "ImGuiBackendFlags_HasMouseCursors",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1607
                    }
                },
                {
                    "name": "ImGuiBackendFlags_HasSetMousePos",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if io.ConfigNavMoveSetMousePos is set)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1608
                    }
                },
                {
                    "name": "ImGuiBackendFlags_RendererHasVtxOffset",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1609
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Backend capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom backend."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1603
            }
        },
        {
            "name": "ImGuiCol_",
            "original_fully_qualified_name": "ImGuiCol_",
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiCol_Text",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1615
                    }
                },
                {
                    "name": "ImGuiCol_TextDisabled",
                    "value": 1,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1616
                    }
                },
                {
                    "name": "ImGuiCol_WindowBg",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Background of normal windows"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1617
                    }
                },
                {
                    "name": "ImGuiCol_ChildBg",
                    "value": 3,
                    "is_count": false,
                    "comments": {
                        "attached": "// Background of child windows"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1618
                    }
                },
                {
                    "name": "ImGuiCol_PopupBg",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Background of popups, menus, tooltips windows"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1619
                    }
                },
                {
                    "name": "ImGuiCol_Border",
                    "value": 5,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1620
                    }
                },
                {
                    "name": "ImGuiCol_BorderShadow",
                    "value": 6,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1621
                    }
                },
                {
                    "name": "ImGuiCol_FrameBg",
                    "value": 7,
                    "is_count": false,
                    "comments": {
                        "attached": "// Background of checkbox, radio button, plot, slider, text input"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1622
                    }
                },
                {
                    "name": "ImGuiCol_FrameBgHovered",
                    "value": 8,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1623
                    }
                },
                {
                    "name": "ImGuiCol_FrameBgActive",
                    "value": 9,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1624
                    }
                },
                {
                    "name": "ImGuiCol_TitleBg",
                    "value": 10,
                    "is_count": false,
                    "comments": {
                        "attached": "// Title bar"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1625
                    }
                },
                {
                    "name": "ImGuiCol_TitleBgActive",
                    "value": 11,
                    "is_count": false,
                    "comments": {
                        "attached": "// Title bar when focused"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1626
                    }
                },
                {
                    "name": "ImGuiCol_TitleBgCollapsed",
                    "value": 12,
                    "is_count": false,
                    "comments": {
                        "attached": "// Title bar when collapsed"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1627
                    }
                },
                {
                    "name": "ImGuiCol_MenuBarBg",
                    "value": 13,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1628
                    }
                },
                {
                    "name": "ImGuiCol_ScrollbarBg",
                    "value": 14,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1629
                    }
                },
                {
                    "name": "ImGuiCol_ScrollbarGrab",
                    "value": 15,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1630
                    }
                },
                {
                    "name": "ImGuiCol_ScrollbarGrabHovered",
                    "value": 16,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1631
                    }
                },
                {
                    "name": "ImGuiCol_ScrollbarGrabActive",
                    "value": 17,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1632
                    }
                },
                {
                    "name": "ImGuiCol_CheckMark",
                    "value": 18,
                    "is_count": false,
                    "comments": {
                        "attached": "// Checkbox tick and RadioButton circle"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1633
                    }
                },
                {
                    "name": "ImGuiCol_SliderGrab",
                    "value": 19,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1634
                    }
                },
                {
                    "name": "ImGuiCol_SliderGrabActive",
                    "value": 20,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1635
                    }
                },
                {
                    "name": "ImGuiCol_Button",
                    "value": 21,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1636
                    }
                },
                {
                    "name": "ImGuiCol_ButtonHovered",
                    "value": 22,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1637
                    }
                },
                {
                    "name": "ImGuiCol_ButtonActive",
                    "value": 23,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1638
                    }
                },
                {
                    "name": "ImGuiCol_Header",
                    "value": 24,
                    "is_count": false,
                    "comments": {
                        "attached": "// Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1639
                    }
                },
                {
                    "name": "ImGuiCol_HeaderHovered",
                    "value": 25,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1640
                    }
                },
                {
                    "name": "ImGuiCol_HeaderActive",
                    "value": 26,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1641
                    }
                },
                {
                    "name": "ImGuiCol_Separator",
                    "value": 27,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1642
                    }
                },
                {
                    "name": "ImGuiCol_SeparatorHovered",
                    "value": 28,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1643
                    }
                },
                {
                    "name": "ImGuiCol_SeparatorActive",
                    "value": 29,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1644
                    }
                },
                {
                    "name": "ImGuiCol_ResizeGrip",
                    "value": 30,
                    "is_count": false,
                    "comments": {
                        "attached": "// Resize grip in lower-right and lower-left corners of windows."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1645
                    }
                },
                {
                    "name": "ImGuiCol_ResizeGripHovered",
                    "value": 31,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1646
                    }
                },
                {
                    "name": "ImGuiCol_ResizeGripActive",
                    "value": 32,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1647
                    }
                },
                {
                    "name": "ImGuiCol_TabHovered",
                    "value": 33,
                    "is_count": false,
                    "comments": {
                        "attached": "// Tab background, when hovered"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1648
                    }
                },
                {
                    "name": "ImGuiCol_Tab",
                    "value": 34,
                    "is_count": false,
                    "comments": {
                        "attached": "// Tab background, when tab-bar is focused & tab is unselected"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1649
                    }
                },
                {
                    "name": "ImGuiCol_TabSelected",
                    "value": 35,
                    "is_count": false,
                    "comments": {
                        "attached": "// Tab background, when tab-bar is focused & tab is selected"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1650
                    }
                },
                {
                    "name": "ImGuiCol_TabSelectedOverline",
                    "value": 36,
                    "is_count": false,
                    "comments": {
                        "attached": "// Tab horizontal overline, when tab-bar is focused & tab is selected"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1651
                    }
                },
                {
                    "name": "ImGuiCol_TabDimmed",
                    "value": 37,
                    "is_count": false,
                    "comments": {
                        "attached": "// Tab background, when tab-bar is unfocused & tab is unselected"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1652
                    }
                },
                {
                    "name": "ImGuiCol_TabDimmedSelected",
                    "value": 38,
                    "is_count": false,
                    "comments": {
                        "attached": "// Tab background, when tab-bar is unfocused & tab is selected"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1653
                    }
                },
                {
                    "name": "ImGuiCol_TabDimmedSelectedOverline",
                    "value": 39,
                    "is_count": false,
                    "comments": {
                        "attached": "//..horizontal overline, when tab-bar is unfocused & tab is selected"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1654
                    }
                },
                {
                    "name": "ImGuiCol_PlotLines",
                    "value": 40,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1655
                    }
                },
                {
                    "name": "ImGuiCol_PlotLinesHovered",
                    "value": 41,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1656
                    }
                },
                {
                    "name": "ImGuiCol_PlotHistogram",
                    "value": 42,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1657
                    }
                },
                {
                    "name": "ImGuiCol_PlotHistogramHovered",
                    "value": 43,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1658
                    }
                },
                {
                    "name": "ImGuiCol_TableHeaderBg",
                    "value": 44,
                    "is_count": false,
                    "comments": {
                        "attached": "// Table header background"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1659
                    }
                },
                {
                    "name": "ImGuiCol_TableBorderStrong",
                    "value": 45,
                    "is_count": false,
                    "comments": {
                        "attached": "// Table outer and header borders (prefer using Alpha=1.0 here)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1660
                    }
                },
                {
                    "name": "ImGuiCol_TableBorderLight",
                    "value": 46,
                    "is_count": false,
                    "comments": {
                        "attached": "// Table inner borders (prefer using Alpha=1.0 here)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1661
                    }
                },
                {
                    "name": "ImGuiCol_TableRowBg",
                    "value": 47,
                    "is_count": false,
                    "comments": {
                        "attached": "// Table row background (even rows)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1662
                    }
                },
                {
                    "name": "ImGuiCol_TableRowBgAlt",
                    "value": 48,
                    "is_count": false,
                    "comments": {
                        "attached": "// Table row background (odd rows)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1663
                    }
                },
                {
                    "name": "ImGuiCol_TextLink",
                    "value": 49,
                    "is_count": false,
                    "comments": {
                        "attached": "// Hyperlink color"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1664
                    }
                },
                {
                    "name": "ImGuiCol_TextSelectedBg",
                    "value": 50,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1665
                    }
                },
                {
                    "name": "ImGuiCol_DragDropTarget",
                    "value": 51,
                    "is_count": false,
                    "comments": {
                        "attached": "// Rectangle highlighting a drop target"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1666
                    }
                },
                {
                    "name": "ImGuiCol_NavCursor",
                    "value": 52,
                    "is_count": false,
                    "comments": {
                        "attached": "// Color of keyboard/gamepad navigation cursor/rectangle, when visible"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1667
                    }
                },
                {
                    "name": "ImGuiCol_NavWindowingHighlight",
                    "value": 53,
                    "is_count": false,
                    "comments": {
                        "attached": "// Highlight window when using CTRL+TAB"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1668
                    }
                },
                {
                    "name": "ImGuiCol_NavWindowingDimBg",
                    "value": 54,
                    "is_count": false,
                    "comments": {
                        "attached": "// Darken/colorize entire screen behind the CTRL+TAB window list, when active"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1669
                    }
                },
                {
                    "name": "ImGuiCol_ModalWindowDimBg",
                    "value": 55,
                    "is_count": false,
                    "comments": {
                        "attached": "// Darken/colorize entire screen behind a modal window, when one is active"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1670
                    }
                },
                {
                    "name": "ImGuiCol_COUNT",
                    "value": 56,
                    "is_count": true,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1671
                    }
                },
                {
                    "name": "ImGuiCol_TabActive",
                    "value_expression": "ImGuiCol_TabSelected",
                    "value": 35,
                    "is_count": false,
                    "comments": {
                        "attached": "// [renamed in 1.90.9]"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1674
                    }
                },
                {
                    "name": "ImGuiCol_TabUnfocused",
                    "value_expression": "ImGuiCol_TabDimmed",
                    "value": 37,
                    "is_count": false,
                    "comments": {
                        "attached": "// [renamed in 1.90.9]"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1675
                    }
                },
                {
                    "name": "ImGuiCol_TabUnfocusedActive",
                    "value_expression": "ImGuiCol_TabDimmedSelected",
                    "value": 38,
                    "is_count": false,
                    "comments": {
                        "attached": "// [renamed in 1.90.9]"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1676
                    }
                },
                {
                    "name": "ImGuiCol_NavHighlight",
                    "value_expression": "ImGuiCol_NavCursor",
                    "value": 52,
                    "is_count": false,
                    "comments": {
                        "attached": "// [renamed in 1.91.4]"
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1677
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Enumeration for PushStyleColor() / PopStyleColor()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1613
            }
        },
        {
            "name": "ImGuiStyleVar_",
            "original_fully_qualified_name": "ImGuiStyleVar_",
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiStyleVar_Alpha",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Enum name -------------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)"
                        ],
                        "attached": "// float     Alpha"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1692
                    }
                },
                {
                    "name": "ImGuiStyleVar_DisabledAlpha",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     DisabledAlpha"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1693
                    }
                },
                {
                    "name": "ImGuiStyleVar_WindowPadding",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    WindowPadding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1694
                    }
                },
                {
                    "name": "ImGuiStyleVar_WindowRounding",
                    "value": 3,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     WindowRounding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1695
                    }
                },
                {
                    "name": "ImGuiStyleVar_WindowBorderSize",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     WindowBorderSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1696
                    }
                },
                {
                    "name": "ImGuiStyleVar_WindowMinSize",
                    "value": 5,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    WindowMinSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1697
                    }
                },
                {
                    "name": "ImGuiStyleVar_WindowTitleAlign",
                    "value": 6,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    WindowTitleAlign"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1698
                    }
                },
                {
                    "name": "ImGuiStyleVar_ChildRounding",
                    "value": 7,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     ChildRounding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1699
                    }
                },
                {
                    "name": "ImGuiStyleVar_ChildBorderSize",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     ChildBorderSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1700
                    }
                },
                {
                    "name": "ImGuiStyleVar_PopupRounding",
                    "value": 9,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     PopupRounding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1701
                    }
                },
                {
                    "name": "ImGuiStyleVar_PopupBorderSize",
                    "value": 10,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     PopupBorderSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1702
                    }
                },
                {
                    "name": "ImGuiStyleVar_FramePadding",
                    "value": 11,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    FramePadding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1703
                    }
                },
                {
                    "name": "ImGuiStyleVar_FrameRounding",
                    "value": 12,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     FrameRounding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1704
                    }
                },
                {
                    "name": "ImGuiStyleVar_FrameBorderSize",
                    "value": 13,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     FrameBorderSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1705
                    }
                },
                {
                    "name": "ImGuiStyleVar_ItemSpacing",
                    "value": 14,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    ItemSpacing"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1706
                    }
                },
                {
                    "name": "ImGuiStyleVar_ItemInnerSpacing",
                    "value": 15,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    ItemInnerSpacing"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1707
                    }
                },
                {
                    "name": "ImGuiStyleVar_IndentSpacing",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     IndentSpacing"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1708
                    }
                },
                {
                    "name": "ImGuiStyleVar_CellPadding",
                    "value": 17,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    CellPadding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1709
                    }
                },
                {
                    "name": "ImGuiStyleVar_ScrollbarSize",
                    "value": 18,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     ScrollbarSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1710
                    }
                },
                {
                    "name": "ImGuiStyleVar_ScrollbarRounding",
                    "value": 19,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     ScrollbarRounding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1711
                    }
                },
                {
                    "name": "ImGuiStyleVar_GrabMinSize",
                    "value": 20,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     GrabMinSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1712
                    }
                },
                {
                    "name": "ImGuiStyleVar_GrabRounding",
                    "value": 21,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     GrabRounding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1713
                    }
                },
                {
                    "name": "ImGuiStyleVar_TabRounding",
                    "value": 22,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     TabRounding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1714
                    }
                },
                {
                    "name": "ImGuiStyleVar_TabBorderSize",
                    "value": 23,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     TabBorderSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1715
                    }
                },
                {
                    "name": "ImGuiStyleVar_TabBarBorderSize",
                    "value": 24,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     TabBarBorderSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1716
                    }
                },
                {
                    "name": "ImGuiStyleVar_TabBarOverlineSize",
                    "value": 25,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     TabBarOverlineSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1717
                    }
                },
                {
                    "name": "ImGuiStyleVar_TableAngledHeadersAngle",
                    "value": 26,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     TableAngledHeadersAngle"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1718
                    }
                },
                {
                    "name": "ImGuiStyleVar_TableAngledHeadersTextAlign",
                    "value": 27,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2  TableAngledHeadersTextAlign"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1719
                    }
                },
                {
                    "name": "ImGuiStyleVar_ButtonTextAlign",
                    "value": 28,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    ButtonTextAlign"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1720
                    }
                },
                {
                    "name": "ImGuiStyleVar_SelectableTextAlign",
                    "value": 29,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    SelectableTextAlign"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1721
                    }
                },
                {
                    "name": "ImGuiStyleVar_SeparatorTextBorderSize",
                    "value": 30,
                    "is_count": false,
                    "comments": {
                        "attached": "// float     SeparatorTextBorderSize"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1722
                    }
                },
                {
                    "name": "ImGuiStyleVar_SeparatorTextAlign",
                    "value": 31,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    SeparatorTextAlign"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1723
                    }
                },
                {
                    "name": "ImGuiStyleVar_SeparatorTextPadding",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// ImVec2    SeparatorTextPadding"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1724
                    }
                },
                {
                    "name": "ImGuiStyleVar_COUNT",
                    "value": 33,
                    "is_count": true,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1725
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.",
                    "// - The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.",
                    "//   During initialization or between frames, feel free to just poke into ImGuiStyle directly.",
                    "// - Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.",
                    "//   - In Visual Studio: CTRL+comma (\"Edit.GoToAll\") can follow symbols inside comments, whereas CTRL+F12 (\"Edit.GoToImplementation\") cannot.",
                    "//   - In Visual Studio w/ Visual Assist installed: ALT+G (\"VAssistX.GoToImplementation\") can also follow symbols inside comments.",
                    "//   - In VS Code, CLion, etc.: CTRL+click can follow symbols inside comments.",
                    "// - When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1689
            }
        },
        {
            "name": "ImGuiButtonFlags_",
            "original_fully_qualified_name": "ImGuiButtonFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiButtonFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1731
                    }
                },
                {
                    "name": "ImGuiButtonFlags_MouseButtonLeft",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// React on left mouse button (default)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1732
                    }
                },
                {
                    "name": "ImGuiButtonFlags_MouseButtonRight",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// React on right mouse button"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1733
                    }
                },
                {
                    "name": "ImGuiButtonFlags_MouseButtonMiddle",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// React on center mouse button"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1734
                    }
                },
                {
                    "name": "ImGuiButtonFlags_MouseButtonMask_",
                    "value_expression": "ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle",
                    "value": 7,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Internal]"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1735
                    }
                },
                {
                    "name": "ImGuiButtonFlags_EnableNav",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// InvisibleButton(): do not disable navigation/tabbing. Otherwise disabled by default."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1736
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for InvisibleButton() [extended in imgui_internal.h]"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1729
            }
        },
        {
            "name": "ImGuiColorEditFlags_",
            "original_fully_qualified_name": "ImGuiColorEditFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiColorEditFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1742
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_NoAlpha",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1743
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_NoPicker",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorEdit: disable picker when clicking on color square."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1744
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_NoOptions",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1745
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_NoSmallPreview",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1746
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_NoInputs",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1747
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_NoTooltip",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1748
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_NoLabel",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1749
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_NoSidePreview",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1750
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_NoDragDrop",
                    "value_expression": "1<<9",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1751
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_NoBorder",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorButton: disable border (which is enforced by default)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1752
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_AlphaBar",
                    "value_expression": "1<<16",
                    "value": 65536,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// User Options (right-click on widget to change some of them)."
                        ],
                        "attached": "//              // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1755
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_AlphaPreview",
                    "value_expression": "1<<17",
                    "value": 131072,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1756
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_AlphaPreviewHalf",
                    "value_expression": "1<<18",
                    "value": 262144,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1757
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_HDR",
                    "value_expression": "1<<19",
                    "value": 524288,
                    "is_count": false,
                    "comments": {
                        "attached": "//              // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1758
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_DisplayRGB",
                    "value_expression": "1<<20",
                    "value": 1048576,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1759
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_DisplayHSV",
                    "value_expression": "1<<21",
                    "value": 2097152,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Display]    // \""
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1760
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_DisplayHex",
                    "value_expression": "1<<22",
                    "value": 4194304,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Display]    // \""
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1761
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_Uint8",
                    "value_expression": "1<<23",
                    "value": 8388608,
                    "is_count": false,
                    "comments": {
                        "attached": "// [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1762
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_Float",
                    "value_expression": "1<<24",
                    "value": 16777216,
                    "is_count": false,
                    "comments": {
                        "attached": "// [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1763
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_PickerHueBar",
                    "value_expression": "1<<25",
                    "value": 33554432,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1764
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_PickerHueWheel",
                    "value_expression": "1<<26",
                    "value": 67108864,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1765
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_InputRGB",
                    "value_expression": "1<<27",
                    "value": 134217728,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Input]      // ColorEdit, ColorPicker: input and output data in RGB format."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1766
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_InputHSV",
                    "value_expression": "1<<28",
                    "value": 268435456,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Input]      // ColorEdit, ColorPicker: input and output data in HSV format."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1767
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_DefaultOptions_",
                    "value_expression": "ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar",
                    "value": 177209344,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to",
                            "// override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup."
                        ]
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1771
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_DisplayMask_",
                    "value_expression": "ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex",
                    "value": 7340032,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// [Internal] Masks"
                        ]
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1774
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_DataTypeMask_",
                    "value_expression": "ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float",
                    "value": 25165824,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1775
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_PickerMask_",
                    "value_expression": "ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar",
                    "value": 100663296,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1776
                    }
                },
                {
                    "name": "ImGuiColorEditFlags_InputMask_",
                    "value_expression": "ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV",
                    "value": 402653184,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1777
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1740
            }
        },
        {
            "name": "ImGuiSliderFlags_",
            "original_fully_qualified_name": "ImGuiSliderFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiSliderFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1788
                    }
                },
                {
                    "name": "ImGuiSliderFlags_Logarithmic",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1789
                    }
                },
                {
                    "name": "ImGuiSliderFlags_NoRoundToFormat",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1790
                    }
                },
                {
                    "name": "ImGuiSliderFlags_NoInput",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable CTRL+Click or Enter key allowing to input text directly into the widget."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1791
                    }
                },
                {
                    "name": "ImGuiSliderFlags_WrapAround",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable wrapping around from max to min and from min to max. Only supported by DragXXX() functions for now."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1792
                    }
                },
                {
                    "name": "ImGuiSliderFlags_ClampOnInput",
                    "value_expression": "1<<9",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "attached": "// Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1793
                    }
                },
                {
                    "name": "ImGuiSliderFlags_ClampZeroRange",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "attached": "// Clamp even if min==max==0.0f. Otherwise due to legacy reason DragXXX functions don't clamp with those values. When your clamping limits are dynamic you almost always want to use it."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1794
                    }
                },
                {
                    "name": "ImGuiSliderFlags_NoSpeedTweaks",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable keyboard modifiers altering tweak speed. Useful if you want to alter tweak speed yourself based on your own logic."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1795
                    }
                },
                {
                    "name": "ImGuiSliderFlags_AlwaysClamp",
                    "value_expression": "ImGuiSliderFlags_ClampOnInput | ImGuiSliderFlags_ClampZeroRange",
                    "value": 1536,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1796
                    }
                },
                {
                    "name": "ImGuiSliderFlags_InvalidMask_",
                    "value_expression": "0x7000000F",
                    "value": 1879048207,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1797
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.",
                    "// We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.",
                    "// (Those are per-item flags. There is shared behavior flag too: ImGuiIO: io.ConfigDragClickToInputText)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1786
            }
        },
        {
            "name": "ImGuiMouseButton_",
            "original_fully_qualified_name": "ImGuiMouseButton_",
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiMouseButton_Left",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1804
                    }
                },
                {
                    "name": "ImGuiMouseButton_Right",
                    "value_expression": "1",
                    "value": 1,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1805
                    }
                },
                {
                    "name": "ImGuiMouseButton_Middle",
                    "value_expression": "2",
                    "value": 2,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1806
                    }
                },
                {
                    "name": "ImGuiMouseButton_COUNT",
                    "value_expression": "5",
                    "value": 5,
                    "is_count": true,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1807
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Identify a mouse button.",
                    "// Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1802
            }
        },
        {
            "name": "ImGuiMouseCursor_",
            "original_fully_qualified_name": "ImGuiMouseCursor_",
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiMouseCursor_None",
                    "value_expression": "-1",
                    "value": -1,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1814
                    }
                },
                {
                    "name": "ImGuiMouseCursor_Arrow",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1815
                    }
                },
                {
                    "name": "ImGuiMouseCursor_TextInput",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// When hovering over InputText, etc."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1816
                    }
                },
                {
                    "name": "ImGuiMouseCursor_ResizeAll",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// (Unused by Dear ImGui functions)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1817
                    }
                },
                {
                    "name": "ImGuiMouseCursor_ResizeNS",
                    "value": 3,
                    "is_count": false,
                    "comments": {
                        "attached": "// When hovering over a horizontal border"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1818
                    }
                },
                {
                    "name": "ImGuiMouseCursor_ResizeEW",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// When hovering over a vertical border or a column"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1819
                    }
                },
                {
                    "name": "ImGuiMouseCursor_ResizeNESW",
                    "value": 5,
                    "is_count": false,
                    "comments": {
                        "attached": "// When hovering over the bottom-left corner of a window"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1820
                    }
                },
                {
                    "name": "ImGuiMouseCursor_ResizeNWSE",
                    "value": 6,
                    "is_count": false,
                    "comments": {
                        "attached": "// When hovering over the bottom-right corner of a window"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1821
                    }
                },
                {
                    "name": "ImGuiMouseCursor_Hand",
                    "value": 7,
                    "is_count": false,
                    "comments": {
                        "attached": "// (Unused by Dear ImGui functions. Use for e.g. hyperlinks)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1822
                    }
                },
                {
                    "name": "ImGuiMouseCursor_NotAllowed",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// When hovering something with disallowed interaction. Usually a crossed circle."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1823
                    }
                },
                {
                    "name": "ImGuiMouseCursor_COUNT",
                    "value": 9,
                    "is_count": true,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1824
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Enumeration for GetMouseCursor()",
                    "// User code may request backend to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1812
            }
        },
        {
            "name": "ImGuiMouseSource",
            "original_fully_qualified_name": "ImGuiMouseSource",
            "storage_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiMouseSource_Mouse",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "attached": "// Input is coming from an actual mouse."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1833
                    }
                },
                {
                    "name": "ImGuiMouseSource_TouchScreen",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Input is coming from a touch screen (no hovering prior to initial press, less precise initial press aiming, dual-axis wheeling possible)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1834
                    }
                },
                {
                    "name": "ImGuiMouseSource_Pen",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Input is coming from a pressure/magnetic pen (often used in conjunction with high-sampling rates)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1835
                    }
                },
                {
                    "name": "ImGuiMouseSource_COUNT",
                    "value": 3,
                    "is_count": true,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1836
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Enumeration for AddMouseSourceEvent() actual source of Mouse Input data.",
                    "// Historically we use \"Mouse\" terminology everywhere to indicate pointer data, e.g. MousePos, IsMousePressed(), io.AddMousePosEvent()",
                    "// But that \"Mouse\" data can come from different source which occasionally may be useful for application to know about.",
                    "// You can submit a change of pointer type using io.AddMouseSourceEvent()."
                ],
                "attached": "// Forward declared enum type ImGuiMouseSource"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1831
            }
        },
        {
            "name": "ImGuiCond_",
            "original_fully_qualified_name": "ImGuiCond_",
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiCond_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "attached": "// No condition (always set the variable), same as _Always"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1844
                    }
                },
                {
                    "name": "ImGuiCond_Always",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// No condition (always set the variable), same as _None"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1845
                    }
                },
                {
                    "name": "ImGuiCond_Once",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Set the variable once per runtime session (only the first call will succeed)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1846
                    }
                },
                {
                    "name": "ImGuiCond_FirstUseEver",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Set the variable if the object/window has no persistently saved data (no entry in .ini file)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1847
                    }
                },
                {
                    "name": "ImGuiCond_Appearing",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Set the variable if the object/window is appearing after being hidden/inactive (or the first time)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1848
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Enumeration for ImGui::SetNextWindow***(), SetWindow***(), SetNextItem***() functions",
                    "// Represent a condition.",
                    "// Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1842
            }
        },
        {
            "name": "ImGuiTableFlags_",
            "original_fully_qualified_name": "ImGuiTableFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiTableFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Features"
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1880
                    }
                },
                {
                    "name": "ImGuiTableFlags_Resizable",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable resizing columns."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1881
                    }
                },
                {
                    "name": "ImGuiTableFlags_Reorderable",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1882
                    }
                },
                {
                    "name": "ImGuiTableFlags_Hideable",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable hiding/disabling columns in context menu."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1883
                    }
                },
                {
                    "name": "ImGuiTableFlags_Sortable",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1884
                    }
                },
                {
                    "name": "ImGuiTableFlags_NoSavedSettings",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable persisting columns order, width and sort settings in the .ini file."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1885
                    }
                },
                {
                    "name": "ImGuiTableFlags_ContextMenuInBody",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow()."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1886
                    }
                },
                {
                    "name": "ImGuiTableFlags_RowBg",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Decorations"
                        ],
                        "attached": "// Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1888
                    }
                },
                {
                    "name": "ImGuiTableFlags_BordersInnerH",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw horizontal borders between rows."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1889
                    }
                },
                {
                    "name": "ImGuiTableFlags_BordersOuterH",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw horizontal borders at the top and bottom."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1890
                    }
                },
                {
                    "name": "ImGuiTableFlags_BordersInnerV",
                    "value_expression": "1<<9",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw vertical borders between columns."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1891
                    }
                },
                {
                    "name": "ImGuiTableFlags_BordersOuterV",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw vertical borders on the left and right sides."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1892
                    }
                },
                {
                    "name": "ImGuiTableFlags_BordersH",
                    "value_expression": "ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersOuterH",
                    "value": 384,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw horizontal borders."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1893
                    }
                },
                {
                    "name": "ImGuiTableFlags_BordersV",
                    "value_expression": "ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersOuterV",
                    "value": 1536,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw vertical borders."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1894
                    }
                },
                {
                    "name": "ImGuiTableFlags_BordersInner",
                    "value_expression": "ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInnerH",
                    "value": 640,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw inner borders."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1895
                    }
                },
                {
                    "name": "ImGuiTableFlags_BordersOuter",
                    "value_expression": "ImGuiTableFlags_BordersOuterV | ImGuiTableFlags_BordersOuterH",
                    "value": 1280,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw outer borders."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1896
                    }
                },
                {
                    "name": "ImGuiTableFlags_Borders",
                    "value_expression": "ImGuiTableFlags_BordersInner | ImGuiTableFlags_BordersOuter",
                    "value": 1920,
                    "is_count": false,
                    "comments": {
                        "attached": "// Draw all borders."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1897
                    }
                },
                {
                    "name": "ImGuiTableFlags_NoBordersInBody",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// [ALPHA] Disable vertical borders in columns Body (borders will always appear in Headers). -> May move to style"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1898
                    }
                },
                {
                    "name": "ImGuiTableFlags_NoBordersInBodyUntilResize",
                    "value_expression": "1<<12",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "attached": "// [ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers). -> May move to style"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1899
                    }
                },
                {
                    "name": "ImGuiTableFlags_SizingFixedFit",
                    "value_expression": "1<<13",
                    "value": 8192,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Sizing Policy (read above for defaults)"
                        ],
                        "attached": "// Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1901
                    }
                },
                {
                    "name": "ImGuiTableFlags_SizingFixedSame",
                    "value_expression": "2<<13",
                    "value": 16384,
                    "is_count": false,
                    "comments": {
                        "attached": "// Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1902
                    }
                },
                {
                    "name": "ImGuiTableFlags_SizingStretchProp",
                    "value_expression": "3<<13",
                    "value": 24576,
                    "is_count": false,
                    "comments": {
                        "attached": "// Columns default to _WidthStretch with default weights proportional to each columns contents widths."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1903
                    }
                },
                {
                    "name": "ImGuiTableFlags_SizingStretchSame",
                    "value_expression": "4<<13",
                    "value": 32768,
                    "is_count": false,
                    "comments": {
                        "attached": "// Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn()."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1904
                    }
                },
                {
                    "name": "ImGuiTableFlags_NoHostExtendX",
                    "value_expression": "1<<16",
                    "value": 65536,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Sizing Extra Options"
                        ],
                        "attached": "// Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1906
                    }
                },
                {
                    "name": "ImGuiTableFlags_NoHostExtendY",
                    "value_expression": "1<<17",
                    "value": 131072,
                    "is_count": false,
                    "comments": {
                        "attached": "// Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1907
                    }
                },
                {
                    "name": "ImGuiTableFlags_NoKeepColumnsVisible",
                    "value_expression": "1<<18",
                    "value": 262144,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1908
                    }
                },
                {
                    "name": "ImGuiTableFlags_PreciseWidths",
                    "value_expression": "1<<19",
                    "value": 524288,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1909
                    }
                },
                {
                    "name": "ImGuiTableFlags_NoClip",
                    "value_expression": "1<<20",
                    "value": 1048576,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Clipping"
                        ],
                        "attached": "// Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze()."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1911
                    }
                },
                {
                    "name": "ImGuiTableFlags_PadOuterX",
                    "value_expression": "1<<21",
                    "value": 2097152,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Padding"
                        ],
                        "attached": "// Default if BordersOuterV is on. Enable outermost padding. Generally desirable if you have headers."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1913
                    }
                },
                {
                    "name": "ImGuiTableFlags_NoPadOuterX",
                    "value_expression": "1<<22",
                    "value": 4194304,
                    "is_count": false,
                    "comments": {
                        "attached": "// Default if BordersOuterV is off. Disable outermost padding."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1914
                    }
                },
                {
                    "name": "ImGuiTableFlags_NoPadInnerX",
                    "value_expression": "1<<23",
                    "value": 8388608,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1915
                    }
                },
                {
                    "name": "ImGuiTableFlags_ScrollX",
                    "value_expression": "1<<24",
                    "value": 16777216,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Scrolling"
                        ],
                        "attached": "// Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this creates a child window, ScrollY is currently generally recommended when using ScrollX."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1917
                    }
                },
                {
                    "name": "ImGuiTableFlags_ScrollY",
                    "value_expression": "1<<25",
                    "value": 33554432,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1918
                    }
                },
                {
                    "name": "ImGuiTableFlags_SortMulti",
                    "value_expression": "1<<26",
                    "value": 67108864,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Sorting"
                        ],
                        "attached": "// Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1920
                    }
                },
                {
                    "name": "ImGuiTableFlags_SortTristate",
                    "value_expression": "1<<27",
                    "value": 134217728,
                    "is_count": false,
                    "comments": {
                        "attached": "// Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1921
                    }
                },
                {
                    "name": "ImGuiTableFlags_HighlightHoveredColumn",
                    "value_expression": "1<<28",
                    "value": 268435456,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Miscellaneous"
                        ],
                        "attached": "// Highlight column headers when hovered (may evolve into a fuller highlight)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1923
                    }
                },
                {
                    "name": "ImGuiTableFlags_SizingMask_",
                    "value_expression": "ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_SizingFixedSame | ImGuiTableFlags_SizingStretchProp | ImGuiTableFlags_SizingStretchSame",
                    "value": 57344,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// [Internal] Combinations and masks"
                        ]
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1926
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::BeginTable()",
                    "// - Important! Sizing policies have complex and subtle side effects, much more so than you would expect.",
                    "//   Read comments/demos carefully + experiment with live demos to get acquainted with them.",
                    "// - The DEFAULT sizing policies are:",
                    "//    - Default to ImGuiTableFlags_SizingFixedFit    if ScrollX is on, or if host window has ImGuiWindowFlags_AlwaysAutoResize.",
                    "//    - Default to ImGuiTableFlags_SizingStretchSame if ScrollX is off.",
                    "// - When ScrollX is off:",
                    "//    - Table defaults to ImGuiTableFlags_SizingStretchSame -> all Columns defaults to ImGuiTableColumnFlags_WidthStretch with same weight.",
                    "//    - Columns sizing policy allowed: Stretch (default), Fixed/Auto.",
                    "//    - Fixed Columns (if any) will generally obtain their requested width (unless the table cannot fit them all).",
                    "//    - Stretch Columns will share the remaining width according to their respective weight.",
                    "//    - Mixed Fixed/Stretch columns is possible but has various side-effects on resizing behaviors.",
                    "//      The typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns.",
                    "//      (this is because the visible order of columns have subtle but necessary effects on how they react to manual resizing).",
                    "// - When ScrollX is on:",
                    "//    - Table defaults to ImGuiTableFlags_SizingFixedFit -> all Columns defaults to ImGuiTableColumnFlags_WidthFixed",
                    "//    - Columns sizing policy allowed: Fixed/Auto mostly.",
                    "//    - Fixed Columns can be enlarged as needed. Table will show a horizontal scrollbar if needed.",
                    "//    - When using auto-resizing (non-resizable) fixed columns, querying the content width to use item right-alignment e.g. SetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.",
                    "//    - Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on, UNLESS you have specified a value for 'inner_width' in BeginTable().",
                    "//      If you specify a value for 'inner_width' then effectively the scrolling space is known and Stretch or mixed Fixed/Stretch columns become meaningful again.",
                    "// - Read on documentation at the top of imgui_tables.cpp for details."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1877
            }
        },
        {
            "name": "ImGuiTableColumnFlags_",
            "original_fully_qualified_name": "ImGuiTableColumnFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiTableColumnFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Input configuration flags"
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1933
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_Disabled",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1934
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_DefaultHide",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Default as a hidden/disabled column."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1935
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_DefaultSort",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Default as a sorting column."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1936
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_WidthStretch",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1937
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_WidthFixed",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1938
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_NoResize",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable manual resizing."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1939
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_NoReorder",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable manual reordering this column, this will also prevent other columns from crossing over this column."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1940
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_NoHide",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable ability to hide/disable this column."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1941
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_NoClip",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable clipping for this column (all NoClip columns will render in a same draw command)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1942
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_NoSort",
                    "value_expression": "1<<9",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1943
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_NoSortAscending",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable ability to sort in the ascending direction."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1944
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_NoSortDescending",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable ability to sort in the descending direction."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1945
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_NoHeaderLabel",
                    "value_expression": "1<<12",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "attached": "// TableHeadersRow() will submit an empty label for this column. Convenient for some small columns. Name will still appear in context menu or in angled headers. You may append into this cell by calling TableSetColumnIndex() right after the TableHeadersRow() call."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1946
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_NoHeaderWidth",
                    "value_expression": "1<<13",
                    "value": 8192,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable header text width contribution to automatic column width."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1947
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_PreferSortAscending",
                    "value_expression": "1<<14",
                    "value": 16384,
                    "is_count": false,
                    "comments": {
                        "attached": "// Make the initial sort direction Ascending when first sorting on this column (default)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1948
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_PreferSortDescending",
                    "value_expression": "1<<15",
                    "value": 32768,
                    "is_count": false,
                    "comments": {
                        "attached": "// Make the initial sort direction Descending when first sorting on this column."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1949
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_IndentEnable",
                    "value_expression": "1<<16",
                    "value": 65536,
                    "is_count": false,
                    "comments": {
                        "attached": "// Use current Indent value when entering cell (default for column 0)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1950
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_IndentDisable",
                    "value_expression": "1<<17",
                    "value": 131072,
                    "is_count": false,
                    "comments": {
                        "attached": "// Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1951
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_AngledHeader",
                    "value_expression": "1<<18",
                    "value": 262144,
                    "is_count": false,
                    "comments": {
                        "attached": "// TableHeadersRow() will submit an angled header row for this column. Note this will add an extra row."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1952
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_IsEnabled",
                    "value_expression": "1<<24",
                    "value": 16777216,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// Output status flags, read-only via TableGetColumnFlags()"
                        ],
                        "attached": "// Status: is enabled == not hidden by user/api (referred to as \"Hide\" in _DefaultHide and _NoHide) flags."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1955
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_IsVisible",
                    "value_expression": "1<<25",
                    "value": 33554432,
                    "is_count": false,
                    "comments": {
                        "attached": "// Status: is visible == is enabled AND not clipped by scrolling."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1956
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_IsSorted",
                    "value_expression": "1<<26",
                    "value": 67108864,
                    "is_count": false,
                    "comments": {
                        "attached": "// Status: is currently part of the sort specs"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1957
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_IsHovered",
                    "value_expression": "1<<27",
                    "value": 134217728,
                    "is_count": false,
                    "comments": {
                        "attached": "// Status: is hovered by mouse"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1958
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_WidthMask_",
                    "value_expression": "ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_WidthFixed",
                    "value": 24,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "// [Internal] Combinations and masks"
                        ]
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1961
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_IndentMask_",
                    "value_expression": "ImGuiTableColumnFlags_IndentEnable | ImGuiTableColumnFlags_IndentDisable",
                    "value": 196608,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1962
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_StatusMask_",
                    "value_expression": "ImGuiTableColumnFlags_IsEnabled | ImGuiTableColumnFlags_IsVisible | ImGuiTableColumnFlags_IsSorted | ImGuiTableColumnFlags_IsHovered",
                    "value": 251658240,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1963
                    }
                },
                {
                    "name": "ImGuiTableColumnFlags_NoDirectResize_",
                    "value_expression": "1<<30",
                    "value": 1073741824,
                    "is_count": false,
                    "comments": {
                        "attached": "// [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1964
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::TableSetupColumn()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1930
            }
        },
        {
            "name": "ImGuiTableRowFlags_",
            "original_fully_qualified_name": "ImGuiTableRowFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiTableRowFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1970
                    }
                },
                {
                    "name": "ImGuiTableRowFlags_Headers",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Identify header row (set default background color + width of its contents accounted differently for auto column width)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1971
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImGui::TableNextRow()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1968
            }
        },
        {
            "name": "ImGuiTableBgTarget_",
            "original_fully_qualified_name": "ImGuiTableBgTarget_",
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiTableBgTarget_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1985
                    }
                },
                {
                    "name": "ImGuiTableBgTarget_RowBg0",
                    "value_expression": "1",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1986
                    }
                },
                {
                    "name": "ImGuiTableBgTarget_RowBg1",
                    "value_expression": "2",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Set row background color 1 (generally used for selection marking)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1987
                    }
                },
                {
                    "name": "ImGuiTableBgTarget_CellBg",
                    "value_expression": "3",
                    "value": 3,
                    "is_count": false,
                    "comments": {
                        "attached": "// Set cell background color (top-most color)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1988
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Enum for ImGui::TableSetBgColor()",
                    "// Background colors are rendering in 3 layers:",
                    "//  - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.",
                    "//  - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.",
                    "//  - Layer 2: draw with CellBg color if set.",
                    "// The purpose of the two row/columns layers is to let you decide if a background color change should override or blend with the existing color.",
                    "// When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.",
                    "// If you set the color of RowBg0 target, your color will override the existing RowBg0 color.",
                    "// If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1983
            }
        },
        {
            "name": "ImGuiMultiSelectFlags_",
            "original_fully_qualified_name": "ImGuiMultiSelectFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiMultiSelectFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2814
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_SingleSelect",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable selecting more than one item. This is available to allow single-selection code to share same code/logic if desired. It essentially disables the main purpose of BeginMultiSelect() tho!"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2815
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_NoSelectAll",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable CTRL+A shortcut to select all."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2816
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_NoRangeSelect",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable Shift+selection mouse/keyboard support (useful for unordered 2D selection). With BoxSelect is also ensure contiguous SetRange requests are not combined into one. This allows not handling interpolation in SetRange requests."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2817
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_NoAutoSelect",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable selecting items when navigating (useful for e.g. supporting range-select in a list of checkboxes)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2818
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_NoAutoClear",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable clearing selection when navigating or selecting another one (generally used with ImGuiMultiSelectFlags_NoAutoSelect. useful for e.g. supporting range-select in a list of checkboxes)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2819
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_NoAutoClearOnReselect",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable clearing selection when clicking/selecting an already selected item."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2820
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_BoxSelect1d",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable box-selection with same width and same x pos items (e.g. full row Selectable()). Box-selection works better with little bit of spacing between items hit-box in order to be able to aim at empty space."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2821
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_BoxSelect2d",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable box-selection with varying width or varying x pos items support (e.g. different width labels, or 2D layout/grid). This is slower: alters clipping logic so that e.g. horizontal movements will update selection of normally clipped items."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2822
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_BoxSelectNoScroll",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// Disable scrolling when box-selecting near edges of scope."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2823
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_ClearOnEscape",
                    "value_expression": "1<<9",
                    "value": 512,
                    "is_count": false,
                    "comments": {
                        "attached": "// Clear selection when pressing Escape while scope is focused."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2824
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_ClearOnClickVoid",
                    "value_expression": "1<<10",
                    "value": 1024,
                    "is_count": false,
                    "comments": {
                        "attached": "// Clear selection when clicking on empty location within scope."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2825
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_ScopeWindow",
                    "value_expression": "1<<11",
                    "value": 2048,
                    "is_count": false,
                    "comments": {
                        "attached": "// Scope for _BoxSelect and _ClearOnClickVoid is whole window (Default). Use if BeginMultiSelect() covers a whole window or used a single time in same window."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2826
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_ScopeRect",
                    "value_expression": "1<<12",
                    "value": 4096,
                    "is_count": false,
                    "comments": {
                        "attached": "// Scope for _BoxSelect and _ClearOnClickVoid is rectangle encompassing BeginMultiSelect()/EndMultiSelect(). Use if BeginMultiSelect() is called multiple times in same window."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2827
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_SelectOnClick",
                    "value_expression": "1<<13",
                    "value": 8192,
                    "is_count": false,
                    "comments": {
                        "attached": "// Apply selection on mouse down when clicking on unselected item. (Default)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2828
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_SelectOnClickRelease",
                    "value_expression": "1<<14",
                    "value": 16384,
                    "is_count": false,
                    "comments": {
                        "attached": "// Apply selection on mouse release when clicking an unselected item. Allow dragging an unselected item without altering selection."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2829
                    }
                },
                {
                    "name": "ImGuiMultiSelectFlags_NavWrapX",
                    "value_expression": "1<<16",
                    "value": 65536,
                    "is_count": false,
                    "comments": {
                        "preceding": [
                            "//ImGuiMultiSelectFlags_RangeSelect2d       = 1 << 15,  // Shift+Selection uses 2d geometry instead of linear sequence, so possible to use Shift+up/down to select vertically in grid. Analogous to what BoxSelect does."
                        ],
                        "attached": "// [Temporary] Enable navigation wrapping on X axis. Provided as a convenience because we don't have a design for the general Nav API for this yet. When the more general feature be public we may obsolete this flag in favor of new one."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2831
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for BeginMultiSelect()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2812
            }
        },
        {
            "name": "ImGuiSelectionRequestType",
            "original_fully_qualified_name": "ImGuiSelectionRequestType",
            "is_flags_enum": false,
            "elements": [
                {
                    "name": "ImGuiSelectionRequestType_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2853
                    }
                },
                {
                    "name": "ImGuiSelectionRequestType_SetAll",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Request app to clear selection (if Selected==false) or select all items (if Selected==true). We cannot set RangeFirstItem/RangeLastItem as its contents is entirely up to user (not necessarily an index)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2854
                    }
                },
                {
                    "name": "ImGuiSelectionRequestType_SetRange",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Request app to select/unselect [RangeFirstItem..RangeLastItem] items (inclusive) based on value of Selected. Only EndMultiSelect() request this, app code can read after BeginMultiSelect() and it will always be false."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2855
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Selection request type"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2851
            }
        },
        {
            "name": "ImDrawFlags_",
            "original_fully_qualified_name": "ImDrawFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImDrawFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3022
                    }
                },
                {
                    "name": "ImDrawFlags_Closed",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3023
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersTopLeft",
                    "value_expression": "1<<4",
                    "value": 16,
                    "is_count": false,
                    "comments": {
                        "attached": "// AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding > 0.0f, we default to all corners). Was 0x01."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3024
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersTopRight",
                    "value_expression": "1<<5",
                    "value": 32,
                    "is_count": false,
                    "comments": {
                        "attached": "// AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding > 0.0f, we default to all corners). Was 0x02."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3025
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersBottomLeft",
                    "value_expression": "1<<6",
                    "value": 64,
                    "is_count": false,
                    "comments": {
                        "attached": "// AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding > 0.0f, we default to all corners). Was 0x04."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3026
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersBottomRight",
                    "value_expression": "1<<7",
                    "value": 128,
                    "is_count": false,
                    "comments": {
                        "attached": "// AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding > 0.0f, we default to all corners). Wax 0x08."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3027
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersNone",
                    "value_expression": "1<<8",
                    "value": 256,
                    "is_count": false,
                    "comments": {
                        "attached": "// AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding > 0.0f). This is NOT zero, NOT an implicit flag!"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3028
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersTop",
                    "value_expression": "ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight",
                    "value": 48,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3029
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersBottom",
                    "value_expression": "ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight",
                    "value": 192,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3030
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersLeft",
                    "value_expression": "ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersTopLeft",
                    "value": 80,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3031
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersRight",
                    "value_expression": "ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_RoundCornersTopRight",
                    "value": 160,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3032
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersAll",
                    "value_expression": "ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight | ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight",
                    "value": 240,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3033
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersDefault_",
                    "value_expression": "ImDrawFlags_RoundCornersAll",
                    "value": 240,
                    "is_count": false,
                    "comments": {
                        "attached": "// Default to ALL corners if none of the _RoundCornersXX flags are specified."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3034
                    }
                },
                {
                    "name": "ImDrawFlags_RoundCornersMask_",
                    "value_expression": "ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCornersNone",
                    "value": 496,
                    "is_count": false,
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3035
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImDrawList functions",
                    "// (Legacy: bit 0 must always correspond to ImDrawFlags_Closed to be backward compatible with old API using a bool. Bits 1..3 must be unused)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3020
            }
        },
        {
            "name": "ImDrawListFlags_",
            "original_fully_qualified_name": "ImDrawListFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImDrawListFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3042
                    }
                },
                {
                    "name": "ImDrawListFlags_AntiAliasedLines",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable anti-aliased lines/borders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3043
                    }
                },
                {
                    "name": "ImDrawListFlags_AntiAliasedLinesUseTex",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering (NOT point/nearest filtering)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3044
                    }
                },
                {
                    "name": "ImDrawListFlags_AntiAliasedFill",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Enable anti-aliased edge around filled shapes (rounded rectangles, circles)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3045
                    }
                },
                {
                    "name": "ImDrawListFlags_AllowVtxOffset",
                    "value_expression": "1<<3",
                    "value": 8,
                    "is_count": false,
                    "comments": {
                        "attached": "// Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3046
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImDrawList instance. Those are set automatically by ImGui:: functions from ImGuiIO settings, and generally not manipulated directly.",
                    "// It is however possible to temporarily alter flags between calls to ImDrawList:: functions."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3040
            }
        },
        {
            "name": "ImFontAtlasFlags_",
            "original_fully_qualified_name": "ImFontAtlasFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImFontAtlasFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3310
                    }
                },
                {
                    "name": "ImFontAtlasFlags_NoPowerOfTwoHeight",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Don't round the height to next power of two"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3311
                    }
                },
                {
                    "name": "ImFontAtlasFlags_NoMouseCursors",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Don't build software mouse cursors into the atlas (save a little texture memory)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3312
                    }
                },
                {
                    "name": "ImFontAtlasFlags_NoBakedLines",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Don't build thick line textures into the atlas (save a little texture memory, allow support for point/nearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3313
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags for ImFontAtlas build"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3308
            }
        },
        {
            "name": "ImGuiViewportFlags_",
            "original_fully_qualified_name": "ImGuiViewportFlags_",
            "is_flags_enum": true,
            "elements": [
                {
                    "name": "ImGuiViewportFlags_None",
                    "value_expression": "0",
                    "value": 0,
                    "is_count": false,
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3498
                    }
                },
                {
                    "name": "ImGuiViewportFlags_IsPlatformWindow",
                    "value_expression": "1<<0",
                    "value": 1,
                    "is_count": false,
                    "comments": {
                        "attached": "// Represent a Platform Window"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3499
                    }
                },
                {
                    "name": "ImGuiViewportFlags_IsPlatformMonitor",
                    "value_expression": "1<<1",
                    "value": 2,
                    "is_count": false,
                    "comments": {
                        "attached": "// Represent a Platform Monitor (unused yet)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3500
                    }
                },
                {
                    "name": "ImGuiViewportFlags_OwnedByApp",
                    "value_expression": "1<<2",
                    "value": 4,
                    "is_count": false,
                    "comments": {
                        "attached": "// Platform Window: Is created/managed by the application (rather than a dear imgui backend)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3501
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Flags stored in ImGuiViewport::Flags, giving indications to the platform backends."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3496
            }
        }
    ],
    "typedefs": [
        {
            "name": "ImGuiID",
            "type": {
                "declaration": "unsigned int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "unsigned_int"
                }
            },
            "comments": {
                "preceding": [
                    "// Scalar data types"
                ],
                "attached": "// A unique ID used by widgets (typically the result of hashing a stack of string)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImS8",
            "type": {
                "declaration": "signed char",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "char"
                }
            },
            "comments": {
                "attached": "// 8-bit signed integer"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImU8",
            "type": {
                "declaration": "unsigned char",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "unsigned_char"
                }
            },
            "comments": {
                "attached": "// 8-bit unsigned integer"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImS16",
            "type": {
                "declaration": "signed short",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "short"
                }
            },
            "comments": {
                "attached": "// 16-bit signed integer"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImU16",
            "type": {
                "declaration": "unsigned short",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "unsigned_short"
                }
            },
            "comments": {
                "attached": "// 16-bit unsigned integer"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImS32",
            "type": {
                "declaration": "signed int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// 32-bit signed integer == int"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImU32",
            "type": {
                "declaration": "unsigned int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "unsigned_int"
                }
            },
            "comments": {
                "attached": "// 32-bit unsigned integer (often used to store packed colors)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImS64",
            "type": {
                "declaration": "signed long long",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "long_long"
                }
            },
            "comments": {
                "attached": "// 64-bit signed integer"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImU64",
            "type": {
                "declaration": "unsigned long long",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "unsigned_long_long"
                }
            },
            "comments": {
                "attached": "// 64-bit unsigned integer"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiDir",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "preceding": [
                    "// Enumerations",
                    "// - We don't use strongly typed enums much because they add constraints (can't extend in private code, can't store typed in bit fields, extra casting on iteration)",
                    "// - Tip: Use your programming IDE navigation facilities on the names in the _central column_ below to find the actual flags/enum lists!",
                    "//   - In Visual Studio: CTRL+comma (\"Edit.GoToAll\") can follow symbols inside comments, whereas CTRL+F12 (\"Edit.GoToImplementation\") cannot.",
                    "//   - In Visual Studio w/ Visual Assist installed: ALT+G (\"VAssistX.GoToImplementation\") can also follow symbols inside comments.",
                    "//   - In VS Code, CLion, etc.: CTRL+click can follow symbols inside comments."
                ],
                "attached": "// -> enum ImGuiDir              // Enum: A cardinal direction (Left, Right, Up, Down)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiKey",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiKey              // Enum: A key identifier (ImGuiKey_XXX or ImGuiMod_XXX value)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiMouseSource",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiMouseSource      // Enum; A mouse input source identifier (Mouse, TouchScreen, Pen)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiSortDirection",
            "type": {
                "declaration": "ImU8",
                "description": {
                    "kind": "User",
                    "name": "ImU8"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiSortDirection    // Enum: A sorting direction (ascending or descending)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiCol",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiCol_             // Enum: A color identifier for styling"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiCond",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiCond_            // Enum: A condition for many Set*() functions"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiDataType",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiDataType_        // Enum: A primary data type"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiMouseButton",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiMouseButton_     // Enum: A mouse button identifier (0=left, 1=right, 2=middle)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiMouseCursor",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiMouseCursor_     // Enum: A mouse cursor shape"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiStyleVar",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiStyleVar_        // Enum: A variable identifier for styling"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiTableBgTarget",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiTableBgTarget_   // Enum: A color target for TableSetBgColor()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImDrawFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "preceding": [
                    "// Flags (declared as int to allow using as flags without overhead, and to not pollute the top of this file)",
                    "// - Tip: Use your programming IDE navigation facilities on the names in the _central column_ below to find the actual flags/enum lists!",
                    "//   - In Visual Studio: CTRL+comma (\"Edit.GoToAll\") can follow symbols inside comments, whereas CTRL+F12 (\"Edit.GoToImplementation\") cannot.",
                    "//   - In Visual Studio w/ Visual Assist installed: ALT+G (\"VAssistX.GoToImplementation\") can also follow symbols inside comments.",
                    "//   - In VS Code, CLion, etc.: CTRL+click can follow symbols inside comments."
                ],
                "attached": "// -> enum ImDrawFlags_          // Flags: for ImDrawList functions"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImDrawListFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImDrawListFlags_      // Flags: for ImDrawList instance"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImFontAtlasFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImFontAtlasFlags_     // Flags: for ImFontAtlas build"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiBackendFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiBackendFlags_    // Flags: for io.BackendFlags"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiButtonFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiButtonFlags_     // Flags: for InvisibleButton()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiChildFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiChildFlags_      // Flags: for BeginChild()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiColorEditFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiColorEditFlags_  // Flags: for ColorEdit4(), ColorPicker4() etc."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiConfigFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiConfigFlags_     // Flags: for io.ConfigFlags"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiComboFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiComboFlags_      // Flags: for BeginCombo()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiDragDropFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiDragDropFlags_   // Flags: for BeginDragDropSource(), AcceptDragDropPayload()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiFocusedFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiFocusedFlags_    // Flags: for IsWindowFocused()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiHoveredFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiHoveredFlags_    // Flags: for IsItemHovered(), IsWindowHovered() etc."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiInputFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiInputFlags_      // Flags: for Shortcut(), SetNextItemShortcut()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiInputTextFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiInputTextFlags_  // Flags: for InputText(), InputTextMultiline()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiItemFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiItemFlags_       // Flags: for PushItemFlag(), shared by all items"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiKeyChord",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> ImGuiKey | ImGuiMod_XXX    // Flags: for IsKeyChordPressed(), Shortcut() etc. an ImGuiKey optionally OR-ed with one or more ImGuiMod_XXX values."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiPopupFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiPopupFlags_      // Flags: for OpenPopup*(), BeginPopupContext*(), IsPopupOpen()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiMultiSelectFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiMultiSelectFlags_// Flags: for BeginMultiSelect()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiSelectableFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiSelectableFlags_ // Flags: for Selectable()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiSliderFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiSliderFlags_     // Flags: for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiTabBarFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiTabBarFlags_     // Flags: for BeginTabBar()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiTabItemFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiTabItemFlags_    // Flags: for BeginTabItem()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiTableFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiTableFlags_      // Flags: For BeginTable()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiTableColumnFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiTableColumnFlags_// Flags: For TableSetupColumn()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiTableRowFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiTableRowFlags_   // Flags: For TableNextRow()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiTreeNodeFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiTreeNodeFlags_   // Flags: for TreeNode(), TreeNodeEx(), CollapsingHeader()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiViewportFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiViewportFlags_   // Flags: for ImGuiViewport"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiWindowFlags",
            "type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "comments": {
                "attached": "// -> enum ImGuiWindowFlags_     // Flags: for Begin(), BeginChild()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImTextureID",
            "type": {
                "declaration": "ImU64",
                "description": {
                    "kind": "User",
                    "name": "ImU64"
                }
            },
            "comments": {
                "attached": "// Default: store a pointer or an integer fitting in a pointer (most renderer backends are ok with that)"
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "ImTextureID"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImDrawIdx",
            "type": {
                "declaration": "unsigned short",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "unsigned_short"
                }
            },
            "comments": {
                "attached": "// Default: 16-bit (for maximum compatibility with renderer backends)"
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "ImDrawIdx"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImWchar32",
            "type": {
                "declaration": "unsigned int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "unsigned_int"
                }
            },
            "comments": {
                "preceding": [
                    "// Character types",
                    "// (we generally use UTF-8 encoded string in the API. This is storage specifically for a decoded character used for keyboard input and display)"
                ],
                "attached": "// A single decoded U32 character/code point. We encode them as multi bytes UTF-8 when used in strings."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImWchar16",
            "type": {
                "declaration": "unsigned short",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "unsigned_short"
                }
            },
            "comments": {
                "attached": "// A single decoded U16 character/code point. We encode them as multi bytes UTF-8 when used in strings."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImWchar",
            "type": {
                "declaration": "ImWchar32",
                "description": {
                    "kind": "User",
                    "name": "ImWchar32"
                }
            },
            "conditionals": [
                {
                    "condition": "ifdef",
                    "expression": "IMGUI_USE_WCHAR32"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImWchar",
            "type": {
                "declaration": "ImWchar16",
                "description": {
                    "kind": "User",
                    "name": "ImWchar16"
                }
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_USE_WCHAR32"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiSelectionUserData",
            "type": {
                "declaration": "ImS64",
                "description": {
                    "kind": "User",
                    "name": "ImS64"
                }
            },
            "comments": {
                "preceding": [
                    "// Multi-Selection item index or identifier when using BeginMultiSelect()",
                    "// - Used by SetNextItemSelectionUserData() + and inside ImGuiMultiSelectIO structure.",
                    "// - Most users are likely to use this store an item INDEX but this may be used to store a POINTER/ID as well. Read comments near ImGuiMultiSelectIO for details."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiInputTextCallback",
            "type": {
                "declaration": "int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data)",
                "type_details": {
                    "flavour": "function_pointer",
                    "return_type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "arguments": [
                        {
                            "name": "data",
                            "type": {
                                "declaration": "ImGuiInputTextCallbackData*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "User",
                                        "name": "ImGuiInputTextCallbackData"
                                    }
                                }
                            },
                            "is_array": false,
                            "is_varargs": false,
                            "is_instance_pointer": false
                        }
                    ]
                },
                "description": {
                    "kind": "Type",
                    "name": "ImGuiInputTextCallback",
                    "inner_type": {
                        "kind": "Pointer",
                        "inner_type": {
                            "kind": "Function",
                            "return_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            },
                            "parameters": [
                                {
                                    "kind": "Type",
                                    "name": "data",
                                    "inner_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "User",
                                            "name": "ImGuiInputTextCallbackData"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "comments": {
                "preceding": [
                    "// Callback and functions types"
                ],
                "attached": "// Callback function for ImGui::InputText()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiSizeCallback",
            "type": {
                "declaration": "void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data)",
                "type_details": {
                    "flavour": "function_pointer",
                    "return_type": {
                        "declaration": "void",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "void"
                        }
                    },
                    "arguments": [
                        {
                            "name": "data",
                            "type": {
                                "declaration": "ImGuiSizeCallbackData*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "User",
                                        "name": "ImGuiSizeCallbackData"
                                    }
                                }
                            },
                            "is_array": false,
                            "is_varargs": false,
                            "is_instance_pointer": false
                        }
                    ]
                },
                "description": {
                    "kind": "Type",
                    "name": "ImGuiSizeCallback",
                    "inner_type": {
                        "kind": "Pointer",
                        "inner_type": {
                            "kind": "Function",
                            "return_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            },
                            "parameters": [
                                {
                                    "kind": "Type",
                                    "name": "data",
                                    "inner_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "User",
                                            "name": "ImGuiSizeCallbackData"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "comments": {
                "attached": "// Callback function for ImGui::SetNextWindowSizeConstraints()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiMemAllocFunc",
            "type": {
                "declaration": "void* (*ImGuiMemAllocFunc)(size_t sz, void* user_data)",
                "type_details": {
                    "flavour": "function_pointer",
                    "return_type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "arguments": [
                        {
                            "name": "sz",
                            "type": {
                                "declaration": "size_t",
                                "description": {
                                    "kind": "User",
                                    "name": "size_t"
                                }
                            },
                            "is_array": false,
                            "is_varargs": false,
                            "is_instance_pointer": false
                        },
                        {
                            "name": "user_data",
                            "type": {
                                "declaration": "void*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "void"
                                    }
                                }
                            },
                            "is_array": false,
                            "is_varargs": false,
                            "is_instance_pointer": false
                        }
                    ]
                },
                "description": {
                    "kind": "Type",
                    "name": "ImGuiMemAllocFunc",
                    "inner_type": {
                        "kind": "Pointer",
                        "inner_type": {
                            "kind": "Function",
                            "return_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Builtin",
                                    "builtin_type": "void"
                                }
                            },
                            "parameters": [
                                {
                                    "kind": "Type",
                                    "name": "sz",
                                    "inner_type": {
                                        "kind": "User",
                                        "name": "size_t"
                                    }
                                },
                                {
                                    "kind": "Type",
                                    "name": "user_data",
                                    "inner_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "Builtin",
                                            "builtin_type": "void"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "comments": {
                "attached": "// Function signature for ImGui::SetAllocatorFunctions()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImGuiMemFreeFunc",
            "type": {
                "declaration": "void (*ImGuiMemFreeFunc)(void* ptr, void* user_data)",
                "type_details": {
                    "flavour": "function_pointer",
                    "return_type": {
                        "declaration": "void",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "void"
                        }
                    },
                    "arguments": [
                        {
                            "name": "ptr",
                            "type": {
                                "declaration": "void*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "void"
                                    }
                                }
                            },
                            "is_array": false,
                            "is_varargs": false,
                            "is_instance_pointer": false
                        },
                        {
                            "name": "user_data",
                            "type": {
                                "declaration": "void*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "void"
                                    }
                                }
                            },
                            "is_array": false,
                            "is_varargs": false,
                            "is_instance_pointer": false
                        }
                    ]
                },
                "description": {
                    "kind": "Type",
                    "name": "ImGuiMemFreeFunc",
                    "inner_type": {
                        "kind": "Pointer",
                        "inner_type": {
                            "kind": "Function",
                            "return_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            },
                            "parameters": [
                                {
                                    "kind": "Type",
                                    "name": "ptr",
                                    "inner_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "Builtin",
                                            "builtin_type": "void"
                                        }
                                    }
                                },
                                {
                                    "kind": "Type",
                                    "name": "user_data",
                                    "inner_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "Builtin",
                                            "builtin_type": "void"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "comments": {
                "attached": "// Function signature for ImGui::SetAllocatorFunctions()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        },
        {
            "name": "ImDrawCallback",
            "type": {
                "declaration": "void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd)",
                "type_details": {
                    "flavour": "function_pointer",
                    "return_type": {
                        "declaration": "void",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "void"
                        }
                    },
                    "arguments": [
                        {
                            "name": "parent_list",
                            "type": {
                                "declaration": "const ImDrawList*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "User",
                                        "name": "ImDrawList",
                                        "storage_classes": [
                                            "const"
                                        ]
                                    }
                                }
                            },
                            "is_array": false,
                            "is_varargs": false,
                            "is_instance_pointer": false
                        },
                        {
                            "name": "cmd",
                            "type": {
                                "declaration": "const ImDrawCmd*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "User",
                                        "name": "ImDrawCmd",
                                        "storage_classes": [
                                            "const"
                                        ]
                                    }
                                }
                            },
                            "is_array": false,
                            "is_varargs": false,
                            "is_instance_pointer": false
                        }
                    ]
                },
                "description": {
                    "kind": "Type",
                    "name": "ImDrawCallback",
                    "inner_type": {
                        "kind": "Pointer",
                        "inner_type": {
                            "kind": "Function",
                            "return_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            },
                            "parameters": [
                                {
                                    "kind": "Type",
                                    "name": "parent_list",
                                    "inner_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "User",
                                            "name": "ImDrawList",
                                            "storage_classes": [
                                                "const"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "kind": "Type",
                                    "name": "cmd",
                                    "inner_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "User",
                                            "name": "ImDrawCmd",
                                            "storage_classes": [
                                                "const"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "ImDrawCallback"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h"
            }
        }
    ],
    "structs": [
        {
            "name": "ImDrawListSharedData",
            "original_fully_qualified_name": "ImDrawListSharedData",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": true,
            "is_anonymous": false,
            "fields": [],
            "comments": {
                "attached": "// Data shared among multiple draw lists (typically owned by parent ImGui context, but you may create one yourself)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 166
            }
        },
        {
            "name": "ImFontBuilderIO",
            "original_fully_qualified_name": "ImFontBuilderIO",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": true,
            "is_anonymous": false,
            "fields": [],
            "comments": {
                "attached": "// Opaque interface to a font builder (stb_truetype or FreeType)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 171
            }
        },
        {
            "name": "ImGuiContext",
            "original_fully_qualified_name": "ImGuiContext",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": true,
            "is_anonymous": false,
            "fields": [],
            "comments": {
                "attached": "// Dear ImGui context (opaque structure, unless including imgui_internal.h)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 176
            }
        },
        {
            "name": "ImVec2",
            "original_fully_qualified_name": "ImVec2",
            "kind": "struct",
            "by_value": true,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "x",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 294
                    }
                },
                {
                    "name": "y",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 294
                    }
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 292
            }
        },
        {
            "name": "ImVec4",
            "original_fully_qualified_name": "ImVec4",
            "kind": "struct",
            "by_value": true,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "x",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 307
                    }
                },
                {
                    "name": "y",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 307
                    }
                },
                {
                    "name": "z",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 307
                    }
                },
                {
                    "name": "w",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 307
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// ImVec4: 4D vector used to store clipping rectangles, colors etc. [Compile-time configurable type]"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 305
            }
        },
        {
            "name": "ImGuiTableSortSpecs",
            "original_fully_qualified_name": "ImGuiTableSortSpecs",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Specs",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const ImGuiTableColumnSortSpecs*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTableColumnSortSpecs",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Pointer to sort spec array."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1997
                    }
                },
                {
                    "name": "SpecsCount",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Sort spec count. Most often 1. May be > 1 when ImGuiTableFlags_SortMulti is enabled. May be == 0 when ImGuiTableFlags_SortTristate is enabled."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1998
                    }
                },
                {
                    "name": "SpecsDirty",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Set to true when specs have changed since last time! Use this to sort again, then clear the flag."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 1999
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Sorting specifications for a table (often handling sort specs for a single column, occasionally more)",
                    "// Obtained by calling TableGetSortSpecs().",
                    "// When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time.",
                    "// Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1995
            }
        },
        {
            "name": "ImGuiTableColumnSortSpecs",
            "original_fully_qualified_name": "ImGuiTableColumnSortSpecs",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "ColumnUserID",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "comments": {
                        "attached": "// User id of the column (if specified by a TableSetupColumn() call)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2007
                    }
                },
                {
                    "name": "ColumnIndex",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImS16",
                        "description": {
                            "kind": "User",
                            "name": "ImS16"
                        }
                    },
                    "comments": {
                        "attached": "// Index of the column"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2008
                    }
                },
                {
                    "name": "SortOrder",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImS16",
                        "description": {
                            "kind": "User",
                            "name": "ImS16"
                        }
                    },
                    "comments": {
                        "attached": "// Index within parent ImGuiTableSortSpecs (always stored in order starting from 0, tables sorted on a single criteria will always have a 0 here)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2009
                    }
                },
                {
                    "name": "SortDirection",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiSortDirection",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSortDirection"
                        }
                    },
                    "comments": {
                        "attached": "// ImGuiSortDirection_Ascending or ImGuiSortDirection_Descending"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2010
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Sorting specification for one column of a table (sizeof == 12 bytes)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2005
            }
        },
        {
            "name": "ImVector_ImWchar",
            "original_fully_qualified_name": "ImVector<ImWchar>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImWchar*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImWchar"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImWchar>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImGuiTextFilter_ImGuiTextRange",
            "original_fully_qualified_name": "ImVector<ImGuiTextRange>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiTextFilter_ImGuiTextRange*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextFilter_ImGuiTextRange"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImGuiTextFilter_ImGuiTextRange>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_char",
            "original_fully_qualified_name": "ImVector<char>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<char>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImGuiStoragePair",
            "original_fully_qualified_name": "ImVector<ImGuiStoragePair>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiStoragePair*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStoragePair"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImGuiStoragePair>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImGuiSelectionRequest",
            "original_fully_qualified_name": "ImVector<ImGuiSelectionRequest>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiSelectionRequest*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiSelectionRequest"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImGuiSelectionRequest>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImDrawCmd",
            "original_fully_qualified_name": "ImVector<ImDrawCmd>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawCmd*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawCmd"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImDrawCmd>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImDrawIdx",
            "original_fully_qualified_name": "ImVector<ImDrawIdx>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawIdx*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawIdx"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImDrawIdx>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImDrawChannel",
            "original_fully_qualified_name": "ImVector<ImDrawChannel>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawChannel*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawChannel"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImDrawChannel>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImDrawVert",
            "original_fully_qualified_name": "ImVector<ImDrawVert>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawVert*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawVert"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImDrawVert>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImVec2",
            "original_fully_qualified_name": "ImVector<ImVec2>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImVec2>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImVec4",
            "original_fully_qualified_name": "ImVector<ImVec4>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec4*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec4"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImVec4>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImTextureID",
            "original_fully_qualified_name": "ImVector<ImTextureID>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImTextureID*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImTextureID"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImTextureID>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImU8",
            "original_fully_qualified_name": "ImVector<ImU8>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImU8*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImU8"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImU8>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImDrawListPtr",
            "original_fully_qualified_name": "ImVector<ImDrawList*>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawList**",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "User",
                                    "name": "ImDrawList"
                                }
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImDrawList*>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImU32",
            "original_fully_qualified_name": "ImVector<ImU32>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImU32*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImU32"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImU32>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImFontPtr",
            "original_fully_qualified_name": "ImVector<ImFont*>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImFont**",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "User",
                                    "name": "ImFont"
                                }
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImFont*>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImFontAtlasCustomRect",
            "original_fully_qualified_name": "ImVector<ImFontAtlasCustomRect>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImFontAtlasCustomRect*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlasCustomRect"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImFontAtlasCustomRect>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImFontConfig",
            "original_fully_qualified_name": "ImVector<ImFontConfig>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImFontConfig*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontConfig"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImFontConfig>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_float",
            "original_fully_qualified_name": "ImVector<float>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<float>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImVector_ImFontGlyph",
            "original_fully_qualified_name": "ImVector<ImFontGlyph>",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2059
                    }
                },
                {
                    "name": "Capacity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2060
                    }
                },
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImFontGlyph*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontGlyph"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2061
                    }
                }
            ],
            "comments": {
                "attached": "// Instantiation of ImVector<ImFontGlyph>"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2057
            }
        },
        {
            "name": "ImGuiStyle",
            "original_fully_qualified_name": "ImGuiStyle",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Alpha",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Global alpha applies to everything in Dear ImGui."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2131
                    }
                },
                {
                    "name": "DisabledAlpha",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2132
                    }
                },
                {
                    "name": "WindowPadding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Padding within a window."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2133
                    }
                },
                {
                    "name": "WindowRounding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2134
                    }
                },
                {
                    "name": "WindowBorderSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2135
                    }
                },
                {
                    "name": "WindowMinSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Minimum window size. This is a global setting. If you want to constrain individual windows, use SetNextWindowSizeConstraints()."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2136
                    }
                },
                {
                    "name": "WindowTitleAlign",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2137
                    }
                },
                {
                    "name": "WindowMenuButtonPosition",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiDir",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDir"
                        }
                    },
                    "comments": {
                        "attached": "// Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2138
                    }
                },
                {
                    "name": "ChildRounding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Radius of child window corners rounding. Set to 0.0f to have rectangular windows."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2139
                    }
                },
                {
                    "name": "ChildBorderSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2140
                    }
                },
                {
                    "name": "PopupRounding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2141
                    }
                },
                {
                    "name": "PopupBorderSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2142
                    }
                },
                {
                    "name": "FramePadding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Padding within a framed rectangle (used by most widgets)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2143
                    }
                },
                {
                    "name": "FrameRounding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2144
                    }
                },
                {
                    "name": "FrameBorderSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2145
                    }
                },
                {
                    "name": "ItemSpacing",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Horizontal and vertical spacing between widgets/lines."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2146
                    }
                },
                {
                    "name": "ItemInnerSpacing",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2147
                    }
                },
                {
                    "name": "CellPadding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Padding within a table cell. Cellpadding.x is locked for entire table. CellPadding.y may be altered between different rows."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2148
                    }
                },
                {
                    "name": "TouchExtraPadding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2149
                    }
                },
                {
                    "name": "IndentSpacing",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2150
                    }
                },
                {
                    "name": "ColumnsMinSpacing",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2151
                    }
                },
                {
                    "name": "ScrollbarSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Width of the vertical scrollbar, Height of the horizontal scrollbar."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2152
                    }
                },
                {
                    "name": "ScrollbarRounding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Radius of grab corners for scrollbar."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2153
                    }
                },
                {
                    "name": "GrabMinSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Minimum width/height of a grab box for slider/scrollbar."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2154
                    }
                },
                {
                    "name": "GrabRounding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2155
                    }
                },
                {
                    "name": "LogSliderDeadzone",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2156
                    }
                },
                {
                    "name": "TabRounding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2157
                    }
                },
                {
                    "name": "TabBorderSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Thickness of border around tabs."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2158
                    }
                },
                {
                    "name": "TabMinWidthForCloseButton",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Minimum width for close button to appear on an unselected tab when hovered. Set to 0.0f to always show when hovering, set to FLT_MAX to never show close button unless selected."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2159
                    }
                },
                {
                    "name": "TabBarBorderSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Thickness of tab-bar separator, which takes on the tab active color to denote focus."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2160
                    }
                },
                {
                    "name": "TabBarOverlineSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Thickness of tab-bar overline, which highlights the selected tab-bar."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2161
                    }
                },
                {
                    "name": "TableAngledHeadersAngle",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Angle of angled headers (supported values range from -50.0f degrees to +50.0f degrees)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2162
                    }
                },
                {
                    "name": "TableAngledHeadersTextAlign",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Alignment of angled headers within the cell"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2163
                    }
                },
                {
                    "name": "ColorButtonPosition",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiDir",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDir"
                        }
                    },
                    "comments": {
                        "attached": "// Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2164
                    }
                },
                {
                    "name": "ButtonTextAlign",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2165
                    }
                },
                {
                    "name": "SelectableTextAlign",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2166
                    }
                },
                {
                    "name": "SeparatorTextBorderSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Thickness of border in SeparatorText()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2167
                    }
                },
                {
                    "name": "SeparatorTextAlign",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Alignment of text within the separator. Defaults to (0.0f, 0.5f) (left aligned, center)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2168
                    }
                },
                {
                    "name": "SeparatorTextPadding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Horizontal offset of text from each edge of the separator + spacing on other axis. Generally small values. .y is recommended to be == FramePadding.y."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2169
                    }
                },
                {
                    "name": "DisplayWindowPadding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Apply to regular windows: amount which we enforce to keep visible when moving near edges of your screen."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2170
                    }
                },
                {
                    "name": "DisplaySafeAreaPadding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Apply to every windows, menus, popups, tooltips: amount where we avoid displaying contents. Adjust if you cannot see the edges of your screen (e.g. on a TV where scaling has not been configured)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2171
                    }
                },
                {
                    "name": "MouseCursorScale",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). We apply per-monitor DPI scaling over this scale. May be removed later."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2172
                    }
                },
                {
                    "name": "AntiAliasedLines",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2173
                    }
                },
                {
                    "name": "AntiAliasedLinesUseTex",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Enable anti-aliased lines/borders using textures where possible. Require backend to render with bilinear filtering (NOT point/nearest filtering). Latched at the beginning of the frame (copied to ImDrawList)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2174
                    }
                },
                {
                    "name": "AntiAliasedFill",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2175
                    }
                },
                {
                    "name": "CurveTessellationTol",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2176
                    }
                },
                {
                    "name": "CircleTessellationMaxError",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2177
                    }
                },
                {
                    "name": "Colors",
                    "is_array": true,
                    "array_bounds": "ImGuiCol_COUNT",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec4[ImGuiCol_COUNT]",
                        "description": {
                            "kind": "Array",
                            "bounds": "ImGuiCol_COUNT",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec4"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2178
                    }
                },
                {
                    "name": "HoverStationaryDelay",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Behaviors",
                            "// (It is possible to modify those fields mid-frame if specific behavior need it, unlike e.g. configuration fields in ImGuiIO)"
                        ],
                        "attached": "// Delay for IsItemHovered(ImGuiHoveredFlags_Stationary). Time required to consider mouse stationary."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2182
                    }
                },
                {
                    "name": "HoverDelayShort",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Delay for IsItemHovered(ImGuiHoveredFlags_DelayShort). Usually used along with HoverStationaryDelay."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2183
                    }
                },
                {
                    "name": "HoverDelayNormal",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Delay for IsItemHovered(ImGuiHoveredFlags_DelayNormal). \""
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2184
                    }
                },
                {
                    "name": "HoverFlagsForTooltipMouse",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiHoveredFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiHoveredFlags"
                        }
                    },
                    "comments": {
                        "attached": "// Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using mouse."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2185
                    }
                },
                {
                    "name": "HoverFlagsForTooltipNav",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiHoveredFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiHoveredFlags"
                        }
                    },
                    "comments": {
                        "attached": "// Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using keyboard/gamepad."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2186
                    }
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2129
            }
        },
        {
            "name": "ImGuiKeyData",
            "original_fully_qualified_name": "ImGuiKeyData",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Down",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// True for if key is down"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2208
                    }
                },
                {
                    "name": "DownDuration",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Duration the key has been down (<0.0f: not pressed, 0.0f: just pressed, >0.0f: time held)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2209
                    }
                },
                {
                    "name": "DownDurationPrev",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Last frame duration the key has been down"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2210
                    }
                },
                {
                    "name": "AnalogValue",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 0.0f..1.0f for gamepad values"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2211
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// [Internal] Storage used by IsKeyDown(), IsKeyPressed() etc functions.",
                    "// If prior to 1.87 you used io.KeysDownDuration[] (which was marked as internal), you should use GetKeyData(key)->DownDuration and *NOT* io.KeysData[key]->DownDuration."
                ]
            },
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 2206
            }
        },
        {
            "name": "ImGuiIO",
            "original_fully_qualified_name": "ImGuiIO",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "ConfigFlags",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiConfigFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiConfigFlags"
                        }
                    },
                    "comments": {
                        "attached": "// = 0              // See ImGuiConfigFlags_ enum. Set by user/application. Keyboard/Gamepad navigation options, etc."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2220
                    }
                },
                {
                    "name": "BackendFlags",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiBackendFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiBackendFlags"
                        }
                    },
                    "comments": {
                        "attached": "// = 0              // See ImGuiBackendFlags_ enum. Set by backend (imgui_impl_xxx files or custom backend) to communicate features supported by the backend."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2221
                    }
                },
                {
                    "name": "DisplaySize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// <unset>          // Main display size, in pixels (generally == GetMainViewport()->Size). May change every frame."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2222
                    }
                },
                {
                    "name": "DeltaTime",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// = 1.0f/60.0f     // Time elapsed since last frame, in seconds. May change every frame."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2223
                    }
                },
                {
                    "name": "IniSavingRate",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// = 5.0f           // Minimum time between saving positions/sizes to .ini file, in seconds."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2224
                    }
                },
                {
                    "name": "IniFilename",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "comments": {
                        "attached": "// = \"imgui.ini\"    // Path to .ini file (important: default \"imgui.ini\" is relative to current working dir!). Set NULL to disable automatic .ini loading/saving or if you want to manually call LoadIniSettingsXXX() / SaveIniSettingsXXX() functions."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2225
                    }
                },
                {
                    "name": "LogFilename",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "comments": {
                        "attached": "// = \"imgui_log.txt\"// Path to .log file (default parameter to ImGui::LogToFile when no file is specified)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2226
                    }
                },
                {
                    "name": "UserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// = NULL           // Store your own data."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2227
                    }
                },
                {
                    "name": "Fonts",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Font system"
                        ],
                        "attached": "// <auto>           // Font atlas: load, rasterize and pack one or more fonts into a single texture."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2230
                    }
                },
                {
                    "name": "FontGlobalScale",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// = 1.0f           // Global scale all fonts"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2231
                    }
                },
                {
                    "name": "FontAllowUserScaling",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = false          // [OBSOLETE] Allow user scaling text of individual window with CTRL+Wheel."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2232
                    }
                },
                {
                    "name": "FontDefault",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// = NULL           // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0]."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2233
                    }
                },
                {
                    "name": "DisplayFramebufferScale",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// = (1, 1)         // For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2234
                    }
                },
                {
                    "name": "ConfigNavSwapGamepadButtons",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Keyboard/Gamepad Navigation options"
                        ],
                        "attached": "// = false          // Swap Activate<>Cancel (A<>B) buttons, matching typical \"Nintendo/Japanese style\" gamepad layout."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2237
                    }
                },
                {
                    "name": "ConfigNavMoveSetMousePos",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = false          // Directional/tabbing navigation teleports the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is difficult. Will update io.MousePos and set io.WantSetMousePos=true."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2238
                    }
                },
                {
                    "name": "ConfigNavCaptureKeyboard",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = true           // Sets io.WantCaptureKeyboard when io.NavActive is set."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2239
                    }
                },
                {
                    "name": "ConfigNavEscapeClearFocusItem",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = true           // Pressing Escape can clear focused item + navigation id/highlight. Set to false if you want to always keep highlight on."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2240
                    }
                },
                {
                    "name": "ConfigNavEscapeClearFocusWindow",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = false          // Pressing Escape can clear focused window as well (super set of io.ConfigNavEscapeClearFocusItem)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2241
                    }
                },
                {
                    "name": "ConfigNavCursorVisibleAuto",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = true           // Using directional navigation key makes the cursor visible. Mouse click hides the cursor."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2242
                    }
                },
                {
                    "name": "ConfigNavCursorVisibleAlways",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = false          // Navigation cursor is always visible."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2243
                    }
                },
                {
                    "name": "MouseDrawCursor",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Miscellaneous options",
                            "// (you can visualize and interact with all options in 'Demo->Configuration')"
                        ],
                        "attached": "// = false          // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by backend implementations."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2247
                    }
                },
                {
                    "name": "ConfigMacOSXBehaviors",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = defined(__APPLE__) // Swap Cmd<>Ctrl keys + OS X style text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2248
                    }
                },
                {
                    "name": "ConfigInputTrickleEventQueue",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = true           // Enable input queue trickling: some types of events submitted during the same frame (e.g. button down + up) will be spread over multiple frames, improving interactions with low framerates."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2249
                    }
                },
                {
                    "name": "ConfigInputTextCursorBlink",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = true           // Enable blinking cursor (optional as some users consider it to be distracting)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2250
                    }
                },
                {
                    "name": "ConfigInputTextEnterKeepActive",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = false          // [BETA] Pressing Enter will keep item active and select contents (single-line only)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2251
                    }
                },
                {
                    "name": "ConfigDragClickToInputText",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = false          // [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2252
                    }
                },
                {
                    "name": "ConfigWindowsResizeFromEdges",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = true           // Enable resizing of windows from their edges and from the lower-left corner. This requires ImGuiBackendFlags_HasMouseCursors for better mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2253
                    }
                },
                {
                    "name": "ConfigWindowsMoveFromTitleBarOnly",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = false      // Enable allowing to move windows only when clicking on their title bar. Does not apply to windows without a title bar."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2254
                    }
                },
                {
                    "name": "ConfigWindowsCopyContentsWithCtrlC",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = false      // [EXPERIMENTAL] CTRL+C copy the contents of focused window into the clipboard. Experimental because: (1) has known issues with nested Begin/End pairs (2) text output quality varies (3) text output is in submission order rather than spatial order."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2255
                    }
                },
                {
                    "name": "ConfigScrollbarScrollByPage",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = true           // Enable scrolling page by page when clicking outside the scrollbar grab. When disabled, always scroll to clicked location. When enabled, Shift+Click scrolls to clicked location."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2256
                    }
                },
                {
                    "name": "ConfigMemoryCompactTimer",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// = 60.0f          // Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0f to disable."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2257
                    }
                },
                {
                    "name": "MouseDoubleClickTime",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Inputs Behaviors",
                            "// (other variables, ones which are expected to be tweaked within UI code, are exposed in ImGuiStyle)"
                        ],
                        "attached": "// = 0.30f          // Time for a double-click, in seconds."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2261
                    }
                },
                {
                    "name": "MouseDoubleClickMaxDist",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// = 6.0f           // Distance threshold to stay in to validate a double-click, in pixels."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2262
                    }
                },
                {
                    "name": "MouseDragThreshold",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// = 6.0f           // Distance threshold before considering we are dragging."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2263
                    }
                },
                {
                    "name": "KeyRepeatDelay",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// = 0.275f         // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2264
                    }
                },
                {
                    "name": "KeyRepeatRate",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// = 0.050f         // When holding a key/button, rate at which it repeats, in seconds."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2265
                    }
                },
                {
                    "name": "ConfigErrorRecovery",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Options to configure Error Handling and how we handle recoverable errors [EXPERIMENTAL]",
                            "// - Error recovery is provided as a way to facilitate:",
                            "//    - Recovery after a programming error (native code or scripting language - the later tends to facilitate iterating on code while running).",
                            "//    - Recovery after running an exception handler or any error processing which may skip code after an error has been detected.",
                            "// - Error recovery is not perfect nor guaranteed! It is a feature to ease development.",
                            "//   You not are not supposed to rely on it in the course of a normal application run.",
                            "// - Functions that support error recovery are using IM_ASSERT_USER_ERROR() instead of IM_ASSERT().",
                            "// - By design, we do NOT allow error recovery to be 100% silent. One of the three options needs to be checked!",
                            "// - Always ensure that on programmers seats you have at minimum Asserts or Tooltips enabled when making direct imgui API calls!",
                            "//   Otherwise it would severely hinder your ability to catch and correct mistakes!",
                            "// Read https://github.com/ocornut/imgui/wiki/Error-Handling for details.",
                            "// - Programmer seats: keep asserts (default), or disable asserts and keep error tooltips (new and nice!)",
                            "// - Non-programmer seats: maybe disable asserts, but make sure errors are resurfaced (tooltips, visible log entries, use callback etc.)",
                            "// - Recovery after error/exception: record stack sizes with ErrorRecoveryStoreState(), disable assert, set log callback (to e.g. trigger high-level breakpoint), recover with ErrorRecoveryTryToRecoverState(), restore settings."
                        ],
                        "attached": "// = true       // Enable error recovery support. Some errors won't be detected and lead to direct crashes if recovery is disabled."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2285
                    }
                },
                {
                    "name": "ConfigErrorRecoveryEnableAssert",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = true       // Enable asserts on recoverable error. By default call IM_ASSERT() when returning from a failing IM_ASSERT_USER_ERROR()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2286
                    }
                },
                {
                    "name": "ConfigErrorRecoveryEnableDebugLog",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = true       // Enable debug log output on recoverable errors."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2287
                    }
                },
                {
                    "name": "ConfigErrorRecoveryEnableTooltip",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = true       // Enable tooltip on recoverable errors. The tooltip include a way to enable asserts if they were disabled."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2288
                    }
                },
                {
                    "name": "ConfigDebugIsDebuggerPresent",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Option to enable various debug tools showing buttons that will call the IM_DEBUG_BREAK() macro.",
                            "// - The Item Picker tool will be available regardless of this being enabled, in order to maximize its discoverability.",
                            "// - Requires a debugger being attached, otherwise IM_DEBUG_BREAK() options will appear to crash your application.",
                            "//   e.g. io.ConfigDebugIsDebuggerPresent = ::IsDebuggerPresent() on Win32, or refer to ImOsIsDebuggerPresent() imgui_test_engine/imgui_te_utils.cpp for a Unix compatible version)."
                        ],
                        "attached": "// = false          // Enable various tools calling IM_DEBUG_BREAK()."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2294
                    }
                },
                {
                    "name": "ConfigDebugHighlightIdConflicts",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Tools to detect code submitting items with conflicting/duplicate IDs",
                            "// - Code should use PushID()/PopID() in loops, or append \"##xx\" to same-label identifiers.",
                            "// - Empty label e.g. Button(\"\") == same ID as parent widget/node. Use Button(\"##xx\") instead!",
                            "// - See FAQ https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#q-about-the-id-stack-system"
                        ],
                        "attached": "// = true           // Highlight and show an error message when multiple items have conflicting identifiers."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2300
                    }
                },
                {
                    "name": "ConfigDebugBeginReturnValueOnce",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Tools to test correct Begin/End and BeginChild/EndChild behaviors.",
                            "// - Presently Begin()/End() and BeginChild()/EndChild() needs to ALWAYS be called in tandem, regardless of return value of BeginXXX()",
                            "// - This is inconsistent with other BeginXXX functions and create confusion for many users.",
                            "// - We expect to update the API eventually. In the meanwhile we provide tools to facilitate checking user-code behavior."
                        ],
                        "attached": "// = false          // First-time calls to Begin()/BeginChild() will return false. NEEDS TO BE SET AT APPLICATION BOOT TIME if you don't want to miss windows."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2306
                    }
                },
                {
                    "name": "ConfigDebugBeginReturnValueLoop",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = false          // Some calls to Begin()/BeginChild() will return false. Will cycle through window depths then repeat. Suggested use: add \"io.ConfigDebugBeginReturnValue = io.KeyShift\" in your main loop then occasionally press SHIFT. Windows should be flickering while running."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2307
                    }
                },
                {
                    "name": "ConfigDebugIgnoreFocusLoss",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Option to deactivate io.AddFocusEvent(false) handling.",
                            "// - May facilitate interactions with a debugger when focus loss leads to clearing inputs data.",
                            "// - Backends may have other side-effects on focus loss, so this will reduce side-effects but not necessary remove all of them."
                        ],
                        "attached": "// = false          // Ignore io.AddFocusEvent(false), consequently not calling io.ClearInputKeys()/io.ClearInputMouse() in input processing."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2312
                    }
                },
                {
                    "name": "ConfigDebugIniSettings",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Option to audit .ini data"
                        ],
                        "attached": "// = false          // Save .ini data with extra comments (particularly helpful for Docking, but makes saving slower)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2315
                    }
                },
                {
                    "name": "BackendPlatformName",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Nowadays those would be stored in ImGuiPlatformIO but we are leaving them here for legacy reasons.",
                            "// Optional: Platform/Renderer backend name (informational only! will be displayed in About Window) + User data for backend/wrappers to store their own stuff."
                        ],
                        "attached": "// = NULL"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2324
                    }
                },
                {
                    "name": "BackendRendererName",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "comments": {
                        "attached": "// = NULL"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2325
                    }
                },
                {
                    "name": "BackendPlatformUserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// = NULL           // User data for platform backend"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2326
                    }
                },
                {
                    "name": "BackendRendererUserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// = NULL           // User data for renderer backend"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2327
                    }
                },
                {
                    "name": "BackendLanguageUserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// = NULL           // User data for non C++ programming language backend"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2328
                    }
                },
                {
                    "name": "WantCaptureMouse",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main game/application (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2361
                    }
                },
                {
                    "name": "WantCaptureKeyboard",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main game/application (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2362
                    }
                },
                {
                    "name": "WantTextInput",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Mobile/console: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2363
                    }
                },
                {
                    "name": "WantSetMousePos",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// MousePos has been altered, backend should reposition mouse on next frame. Rarely used! Set only when io.ConfigNavMoveSetMousePos is enabled."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2364
                    }
                },
                {
                    "name": "WantSaveIniSettings",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2365
                    }
                },
                {
                    "name": "NavActive",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Keyboard/Gamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2366
                    }
                },
                {
                    "name": "NavVisible",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Keyboard/Gamepad navigation highlight is visible and allowed (will handle ImGuiKey_NavXXX events)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2367
                    }
                },
                {
                    "name": "Framerate",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Estimate of application framerate (rolling average over 60 frames, based on io.DeltaTime), in frame per second. Solely for convenience. Slow applications may not want to use a moving average or may want to reset underlying buffers occasionally."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2368
                    }
                },
                {
                    "name": "MetricsRenderVertices",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Vertices output during last call to Render()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2369
                    }
                },
                {
                    "name": "MetricsRenderIndices",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Indices output during last call to Render() = number of triangles * 3"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2370
                    }
                },
                {
                    "name": "MetricsRenderWindows",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Number of visible windows"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2371
                    }
                },
                {
                    "name": "MetricsActiveWindows",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Number of active windows"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2372
                    }
                },
                {
                    "name": "MouseDelta",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2373
                    }
                },
                {
                    "name": "Ctx",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiContext*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiContext"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Parent UI context (needs to be set explicitly by parent)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2379
                    }
                },
                {
                    "name": "MousePos",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Main Input State",
                            "// (this block used to be written by backend, since 1.87 it is best to NOT write to those directly, call the AddXXX functions above instead)",
                            "// (reading from those variables is fair game, as they are extremely unlikely to be moving anywhere)"
                        ],
                        "attached": "// Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2384
                    }
                },
                {
                    "name": "MouseDown",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Other buttons allow us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2385
                    }
                },
                {
                    "name": "MouseWheel",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Mouse wheel Vertical: 1 unit scrolls about 5 lines text. >0 scrolls Up, <0 scrolls Down. Hold SHIFT to turn vertical scroll into horizontal scroll."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2386
                    }
                },
                {
                    "name": "MouseWheelH",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Mouse wheel Horizontal. >0 scrolls Left, <0 scrolls Right. Most users don't have a mouse with a horizontal wheel, may not be filled by all backends."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2387
                    }
                },
                {
                    "name": "MouseSource",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiMouseSource",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseSource"
                        }
                    },
                    "comments": {
                        "attached": "// Mouse actual input peripheral (Mouse/TouchScreen/Pen)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2388
                    }
                },
                {
                    "name": "KeyCtrl",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Keyboard modifier down: Control"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2389
                    }
                },
                {
                    "name": "KeyShift",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Keyboard modifier down: Shift"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2390
                    }
                },
                {
                    "name": "KeyAlt",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Keyboard modifier down: Alt"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2391
                    }
                },
                {
                    "name": "KeySuper",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Keyboard modifier down: Cmd/Super/Windows"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2392
                    }
                },
                {
                    "name": "KeyMods",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiKeyChord",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKeyChord"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Other state maintained from data above + IO function calls"
                        ],
                        "attached": "// Key mods flags (any of ImGuiMod_Ctrl/ImGuiMod_Shift/ImGuiMod_Alt/ImGuiMod_Super flags, same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags. Read-only, updated by NewFrame()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2395
                    }
                },
                {
                    "name": "KeysData",
                    "is_array": true,
                    "array_bounds": "ImGuiKey_NamedKey_COUNT",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiKeyData[ImGuiKey_NamedKey_COUNT]",
                        "description": {
                            "kind": "Array",
                            "bounds": "ImGuiKey_NamedKey_COUNT",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiKeyData"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Key state for all known keys. Use IsKeyXXX() functions to access this."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2396
                    }
                },
                {
                    "name": "WantCaptureMouseUnlessPopupClose",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Alternative to WantCaptureMouse: (WantCaptureMouse == true && WantCaptureMouseUnlessPopupClose == false) when a click over void is expected to close a popup."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2397
                    }
                },
                {
                    "name": "MousePosPrev",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2398
                    }
                },
                {
                    "name": "MouseClickedPos",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Position at time of clicking"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2399
                    }
                },
                {
                    "name": "MouseClickedTime",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "double[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "double"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Time of last click (used to figure out double-click)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2400
                    }
                },
                {
                    "name": "MouseClicked",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Mouse button went from !Down to Down (same as MouseClickedCount[x] != 0)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2401
                    }
                },
                {
                    "name": "MouseDoubleClicked",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Has mouse button been double-clicked? (same as MouseClickedCount[x] == 2)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2402
                    }
                },
                {
                    "name": "MouseClickedCount",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImU16[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImU16"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// == 0 (not clicked), == 1 (same as MouseClicked[]), == 2 (double-clicked), == 3 (triple-clicked) etc. when going from !Down to Down"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2403
                    }
                },
                {
                    "name": "MouseClickedLastCount",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImU16[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImU16"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Count successive number of clicks. Stays valid after mouse release. Reset after another click is done."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2404
                    }
                },
                {
                    "name": "MouseReleased",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Mouse button went from Down to !Down"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2405
                    }
                },
                {
                    "name": "MouseDownOwned",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Track if button was clicked inside a dear imgui window or over void blocked by a popup. We don't request mouse capture from the application if click started outside ImGui bounds."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2406
                    }
                },
                {
                    "name": "MouseDownOwnedUnlessPopupClose",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Track if button was clicked inside a dear imgui window."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2407
                    }
                },
                {
                    "name": "MouseWheelRequestAxisSwap",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// On a non-Mac system, holding SHIFT requests WheelY to perform the equivalent of a WheelX event. On a Mac system this is already enforced by the system."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2408
                    }
                },
                {
                    "name": "MouseCtrlLeftAsRightClick",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// (OSX) Set to true when the current click was a ctrl-click that spawned a simulated right click"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2409
                    }
                },
                {
                    "name": "MouseDownDuration",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Duration the mouse button has been down (0.0f == just clicked)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2410
                    }
                },
                {
                    "name": "MouseDownDurationPrev",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Previous time the mouse button has been down"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2411
                    }
                },
                {
                    "name": "MouseDragMaxDistanceSqr",
                    "is_array": true,
                    "array_bounds": "5",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float[5]",
                        "description": {
                            "kind": "Array",
                            "bounds": "5",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Squared maximum distance of how much mouse has traveled from the clicking point (used for moving thresholds)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2412
                    }
                },
                {
                    "name": "PenPressure",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Touch/Pen pressure (0.0f to 1.0f, should be >0.0f only when MouseDown[0] == true). Helper storage currently unused by Dear ImGui."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2413
                    }
                },
                {
                    "name": "AppFocusLost",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Only modify via AddFocusEvent()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2414
                    }
                },
                {
                    "name": "AppAcceptingEvents",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Only modify via SetAppAcceptingEvents()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2415
                    }
                },
                {
                    "name": "InputQueueSurrogate",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImWchar16",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar16"
                        }
                    },
                    "comments": {
                        "attached": "// For AddInputCharacterUTF16()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2416
                    }
                },
                {
                    "name": "InputQueueCharacters",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImWchar"
                        }
                    },
                    "comments": {
                        "attached": "// Queue of _characters_ input (obtained by platform backend). Fill using AddInputCharacter() helper."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2417
                    }
                },
                {
                    "name": "GetClipboardTextFn",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const char* (*GetClipboardTextFn)(void* user_data)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "const char*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "char",
                                        "storage_classes": [
                                            "const"
                                        ]
                                    }
                                }
                            },
                            "arguments": [
                                {
                                    "name": "user_data",
                                    "type": {
                                        "declaration": "void*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "void"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "GetClipboardTextFn",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "Builtin",
                                            "builtin_type": "char",
                                            "storage_classes": [
                                                "const"
                                            ]
                                        }
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "user_data",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "void"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h"
                    }
                },
                {
                    "name": "SetClipboardTextFn",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void (*SetClipboardTextFn)(void* user_data, const char* text)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "void",
                                "description": {
                                    "kind": "Builtin",
                                    "builtin_type": "void"
                                }
                            },
                            "arguments": [
                                {
                                    "name": "user_data",
                                    "type": {
                                        "declaration": "void*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "void"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "text",
                                    "type": {
                                        "declaration": "const char*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "char",
                                                "storage_classes": [
                                                    "const"
                                                ]
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "SetClipboardTextFn",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "void"
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "user_data",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "void"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "text",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "char",
                                                    "storage_classes": [
                                                        "const"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h"
                    }
                },
                {
                    "name": "ClipboardUserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2434
                    }
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2214
            }
        },
        {
            "name": "ImGuiInputTextCallbackData",
            "original_fully_qualified_name": "ImGuiInputTextCallbackData",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Ctx",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiContext*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiContext"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Parent UI context"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2455
                    }
                },
                {
                    "name": "EventFlag",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "comments": {
                        "attached": "// One ImGuiInputTextFlags_Callback*    // Read-only"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2456
                    }
                },
                {
                    "name": "Flags",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "comments": {
                        "attached": "// What user passed to InputText()      // Read-only"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2457
                    }
                },
                {
                    "name": "UserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// What user passed to InputText()      // Read-only"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2458
                    }
                },
                {
                    "name": "EventChar",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Arguments for the different callback events",
                            "// - During Resize callback, Buf will be same as your input buffer.",
                            "// - However, during Completion/History/Always callback, Buf always points to our own internal data (it is not the same as your buffer)! Changes to it will be reflected into your own buffer shortly after the callback.",
                            "// - To modify the text buffer in a callback, prefer using the InsertChars() / DeleteChars() function. InsertChars() will take care of calling the resize callback if necessary.",
                            "// - If you know your edits are not going to resize the underlying buffer allocation, you may modify the contents of 'Buf[]' directly. You need to update 'BufTextLen' accordingly (0 <= BufTextLen < BufSize) and set 'BufDirty'' to true so InputText can update its internal state."
                        ],
                        "attached": "// Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2465
                    }
                },
                {
                    "name": "EventKey",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiKey",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKey"
                        }
                    },
                    "comments": {
                        "attached": "// Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2466
                    }
                },
                {
                    "name": "Buf",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Text buffer                          // Read-write   // [Resize] Can replace pointer / [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2467
                    }
                },
                {
                    "name": "BufTextLen",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2468
                    }
                },
                {
                    "name": "BufSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2469
                    }
                },
                {
                    "name": "BufDirty",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2470
                    }
                },
                {
                    "name": "CursorPos",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "//                                      // Read-write   // [Completion,History,Always]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2471
                    }
                },
                {
                    "name": "SelectionStart",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "//                                      // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2472
                    }
                },
                {
                    "name": "SelectionEnd",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "//                                      // Read-write   // [Completion,History,Always]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2473
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used.",
                    "// The callback function should return 0 by default.",
                    "// Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details)",
                    "// - ImGuiInputTextFlags_CallbackEdit:        Callback on buffer edit. Note that InputText() already returns true on edit + you can always use IsItemEdited(). The callback is useful to manipulate the underlying buffer while focus is active.",
                    "// - ImGuiInputTextFlags_CallbackAlways:      Callback on each iteration",
                    "// - ImGuiInputTextFlags_CallbackCompletion:  Callback on pressing TAB",
                    "// - ImGuiInputTextFlags_CallbackHistory:     Callback on pressing Up/Down arrows",
                    "// - ImGuiInputTextFlags_CallbackCharFilter:  Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.",
                    "// - ImGuiInputTextFlags_CallbackResize:      Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2453
            }
        },
        {
            "name": "ImGuiSizeCallbackData",
            "original_fully_qualified_name": "ImGuiSizeCallbackData",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "UserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Read-only.   What user passed to SetNextWindowSizeConstraints(). Generally store an integer or float in here (need reinterpret_cast<>)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2489
                    }
                },
                {
                    "name": "Pos",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Read-only.   Window position, for reference."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2490
                    }
                },
                {
                    "name": "CurrentSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Read-only.   Current window size."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2491
                    }
                },
                {
                    "name": "DesiredSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2492
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().",
                    "// NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2487
            }
        },
        {
            "name": "ImGuiPayload",
            "original_fully_qualified_name": "ImGuiPayload",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Members"
                        ],
                        "attached": "// Data (copied and owned by dear imgui)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2499
                    }
                },
                {
                    "name": "DataSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Data size"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2500
                    }
                },
                {
                    "name": "SourceId",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal]"
                        ],
                        "attached": "// Source item id"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2503
                    }
                },
                {
                    "name": "SourceParentId",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "comments": {
                        "attached": "// Source parent id (if available)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2504
                    }
                },
                {
                    "name": "DataFrameCount",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Data timestamp"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2505
                    }
                },
                {
                    "name": "DataType",
                    "is_array": true,
                    "array_bounds": "32+1",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "char[32+1]",
                        "description": {
                            "kind": "Array",
                            "bounds": "32+1",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Data type tag (short user-supplied string, 32 characters max)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2506
                    }
                },
                {
                    "name": "Preview",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2507
                    }
                },
                {
                    "name": "Delivery",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Set when AcceptDragDropPayload() was called and mouse button is released over the target item."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2508
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2496
            }
        },
        {
            "name": "ImGuiTextFilter_ImGuiTextRange",
            "original_fully_qualified_name": "ImGuiTextFilter::ImGuiTextRange",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "b",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2551
                    }
                },
                {
                    "name": "e",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2552
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// [Internal]"
                ]
            },
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 2549
            }
        },
        {
            "name": "ImGuiTextFilter",
            "original_fully_qualified_name": "ImGuiTextFilter",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "InputBuf",
                    "is_array": true,
                    "array_bounds": "256",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "char[256]",
                        "description": {
                            "kind": "Array",
                            "bounds": "256",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2559
                    }
                },
                {
                    "name": "Filters",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImGuiTextFilter_ImGuiTextRange",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImGuiTextFilter_ImGuiTextRange"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2560
                    }
                },
                {
                    "name": "CountGrep",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2561
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Helper: Parse and apply text filters. In format \"aaaaa[,bbbb][,ccccc]\""
                ]
            },
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 2539
            }
        },
        {
            "name": "ImGuiTextBuffer",
            "original_fully_qualified_name": "ImGuiTextBuffer",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Buf",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_char",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_char"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2568
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Helper: Growable text buffer for logging/accumulating text",
                    "// (this could be called 'ImGuiTextBuilder' / 'ImGuiStringBuilder')"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2566
            }
        },
        {
            "name": "ImGuiStoragePair",
            "original_fully_qualified_name": "ImGuiStoragePair",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "key",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2588
                    }
                },
                {
                    "name": "__anonymous_type0",
                    "is_array": false,
                    "is_anonymous": true,
                    "type": {
                        "declaration": "__anonymous_type0",
                        "description": {
                            "kind": "User",
                            "name": "__anonymous_type0"
                        }
                    },
                    "is_internal": false
                }
            ],
            "comments": {
                "preceding": [
                    "// [Internal] Key+Value for ImGuiStorage"
                ]
            },
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 2586
            }
        },
        {
            "name": "__anonymous_type0",
            "original_fully_qualified_name": "ImGuiStoragePair::<anonymous>",
            "kind": "union",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": true,
            "fields": [
                {
                    "name": "val_i",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2589
                    }
                },
                {
                    "name": "val_f",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2589
                    }
                },
                {
                    "name": "val_p",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2589
                    }
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2589
            }
        },
        {
            "name": "ImGuiStorage",
            "original_fully_qualified_name": "ImGuiStorage",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImGuiStoragePair",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImGuiStoragePair"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal]"
                        ]
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2606
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Helper: Key->Value storage",
                    "// Typically you don't have to worry about this since a storage is held within each Window.",
                    "// We use it to e.g. store collapse state for a tree (Int 0/1)",
                    "// This is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame)",
                    "// You can use it as custom user storage for temporary values. Declare your own storage if, for example:",
                    "// - You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).",
                    "// - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)",
                    "// Types are NOT stored, so it is up to you to make sure your Key don't collide with different types."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2603
            }
        },
        {
            "name": "ImGuiListClipper",
            "original_fully_qualified_name": "ImGuiListClipper",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Ctx",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiContext*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiContext"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Parent UI context"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2662
                    }
                },
                {
                    "name": "DisplayStart",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// First item to display, updated by each call to Step()"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2663
                    }
                },
                {
                    "name": "DisplayEnd",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// End of items to display (exclusive)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2664
                    }
                },
                {
                    "name": "ItemsCount",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] Number of items"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2665
                    }
                },
                {
                    "name": "ItemsHeight",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] Height of item after a first step and item submission can calculate it"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2666
                    }
                },
                {
                    "name": "StartPosY",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] Cursor position at the time of Begin() or after table frozen rows are all processed"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2667
                    }
                },
                {
                    "name": "StartSeekOffsetY",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "double",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "double"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] Account for frozen rows in a table and initial loss of precision in very large windows."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2668
                    }
                },
                {
                    "name": "TempData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] Internal data"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2669
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Helper: Manually clip large list of items.",
                    "// If you have lots evenly spaced items and you have random access to the list, you can perform coarse",
                    "// clipping based on visibility to only submit items that are in view.",
                    "// The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped.",
                    "// (Dear ImGui already clip items based on their bounds but: it needs to first layout the item to do so, and generally",
                    "//  fetching/submitting your own data incurs additional cost. Coarse clipping using ImGuiListClipper allows you to easily",
                    "//  scale using lists with tens of thousands of items without a problem)",
                    "// Usage:",
                    "//   ImGuiListClipper clipper;",
                    "//   clipper.Begin(1000);         // We have 1000 elements, evenly spaced.",
                    "//   while (clipper.Step())",
                    "//       for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)",
                    "//           ImGui::Text(\"line number %d\", i);",
                    "// Generally what happens is:",
                    "// - Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1) regardless of it being visible or not.",
                    "// - User code submit that one element.",
                    "// - Clipper can measure the height of the first element",
                    "// - Clipper calculate the actual range of elements to display based on the current clipping rectangle, position the cursor before the first visible element.",
                    "// - User code submit visible elements.",
                    "// - The clipper also handles various subtleties related to keyboard/gamepad navigation, wrapping etc."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2660
            }
        },
        {
            "name": "ImColor",
            "original_fully_qualified_name": "ImColor",
            "kind": "struct",
            "by_value": true,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Value",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2756
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)",
                    "// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.",
                    "// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.",
                    "// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2754
            }
        },
        {
            "name": "ImGuiMultiSelectIO",
            "original_fully_qualified_name": "ImGuiMultiSelectIO",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Requests",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImGuiSelectionRequest",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImGuiSelectionRequest"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "//------------------------------------------// BeginMultiSelect / EndMultiSelect"
                        ],
                        "attached": "//  ms:w, app:r     /  ms:w  app:r   // Requests to apply to your selection data."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2842
                    }
                },
                {
                    "name": "RangeSrcItem",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiSelectionUserData",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSelectionUserData"
                        }
                    },
                    "comments": {
                        "attached": "//  ms:w  app:r     /                // (If using clipper) Begin: Source item (often the first selected item) must never be clipped: use clipper.IncludeItemByIndex() to ensure it is submitted."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2843
                    }
                },
                {
                    "name": "NavIdItem",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiSelectionUserData",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSelectionUserData"
                        }
                    },
                    "comments": {
                        "attached": "//  ms:w, app:r     /                // (If using deletion) Last known SetNextItemSelectionUserData() value for NavId (if part of submitted items)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2844
                    }
                },
                {
                    "name": "NavIdSelected",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "//  ms:w, app:r     /        app:r   // (If using deletion) Last known selection state for NavId (if part of submitted items)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2845
                    }
                },
                {
                    "name": "RangeSrcReset",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "//        app:w     /  ms:r          // (If using deletion) Set before EndMultiSelect() to reset ResetSrcItem (e.g. if deleted selection)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2846
                    }
                },
                {
                    "name": "ItemsCount",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "//  ms:w, app:r     /        app:r   // 'int items_count' parameter to BeginMultiSelect() is copied here for convenience, allowing simpler calls to your ApplyRequests handler. Not used internally."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2847
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Main IO structure returned by BeginMultiSelect()/EndMultiSelect().",
                    "// This mainly contains a list of selection requests.",
                    "// - Use 'Demo->Tools->Debug Log->Selection' to see requests as they happen.",
                    "// - Some fields are only useful if your list is dynamic and allows deletion (getting post-deletion focus/state right is shown in the demo)",
                    "// - Below: who reads/writes each fields? 'r'=read, 'w'=write, 'ms'=multi-select code, 'app'=application/user code."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2839
            }
        },
        {
            "name": "ImGuiSelectionRequest",
            "original_fully_qualified_name": "ImGuiSelectionRequest",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Type",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiSelectionRequestType",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSelectionRequestType"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "//------------------------------------------// BeginMultiSelect / EndMultiSelect"
                        ],
                        "attached": "//  ms:w, app:r     /  ms:w, app:r   // Request type. You'll most often receive 1 Clear + 1 SetRange with a single-item range."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2862
                    }
                },
                {
                    "name": "Selected",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "//  ms:w, app:r     /  ms:w, app:r   // Parameter for SetAll/SetRange requests (true = select, false = unselect)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2863
                    }
                },
                {
                    "name": "RangeDirection",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImS8",
                        "description": {
                            "kind": "User",
                            "name": "ImS8"
                        }
                    },
                    "comments": {
                        "attached": "//                  /  ms:w  app:r   // Parameter for SetRange request: +1 when RangeFirstItem comes before RangeLastItem, -1 otherwise. Useful if you want to preserve selection order on a backward Shift+Click."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2864
                    }
                },
                {
                    "name": "RangeFirstItem",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiSelectionUserData",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSelectionUserData"
                        }
                    },
                    "comments": {
                        "attached": "//                  /  ms:w, app:r   // Parameter for SetRange request (this is generally == RangeSrcItem when shift selecting from top to bottom)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2865
                    }
                },
                {
                    "name": "RangeLastItem",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiSelectionUserData",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSelectionUserData"
                        }
                    },
                    "comments": {
                        "attached": "//                  /  ms:w, app:r   // Parameter for SetRange request (this is generally == RangeSrcItem when shift selecting from bottom to top). Inclusive!"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2866
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Selection request item"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2859
            }
        },
        {
            "name": "ImGuiSelectionBasicStorage",
            "original_fully_qualified_name": "ImGuiSelectionBasicStorage",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Members"
                        ],
                        "attached": "//          // Number of selected items, maintained by this helper."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2888
                    }
                },
                {
                    "name": "PreserveOrder",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// = false  // GetNextSelectedItem() will return ordered selection (currently implemented by two additional sorts of selection. Could be improved)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2889
                    }
                },
                {
                    "name": "UserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// = NULL   // User data for use by adapter function        // e.g. selection.UserData = (void*)my_items;"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2890
                    }
                },
                {
                    "name": "AdapterIndexToStorageId",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiID (*AdapterIndexToStorageId)(ImGuiSelectionBasicStorage* self, int idx)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "ImGuiID",
                                "description": {
                                    "kind": "User",
                                    "name": "ImGuiID"
                                }
                            },
                            "arguments": [
                                {
                                    "name": "self",
                                    "type": {
                                        "declaration": "ImGuiSelectionBasicStorage*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "User",
                                                "name": "ImGuiSelectionBasicStorage"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "idx",
                                    "type": {
                                        "declaration": "int",
                                        "description": {
                                            "kind": "Builtin",
                                            "builtin_type": "int"
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "AdapterIndexToStorageId",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "User",
                                        "name": "ImGuiID"
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "self",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "User",
                                                    "name": "ImGuiSelectionBasicStorage"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "idx",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "int"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "comments": {
                        "attached": "// e.g. selection.AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self, int idx) { return ((MyItems**)self->UserData)[idx]->ID; };"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h"
                    }
                },
                {
                    "name": "_SelectionOrder",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] Increasing counter to store selection order"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2892
                    }
                },
                {
                    "name": "_Storage",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiStorage",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiStorage"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] Selection set. Think of this as similar to e.g. std::set<ImGuiID>. Prefer not accessing directly: iterate with GetNextSelectedItem()."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2893
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Optional helper to store multi-selection state + apply multi-selection requests.",
                    "// - Used by our demos and provided as a convenience to easily implement basic multi-selection.",
                    "// - Iterate selection with 'void* it = NULL; ImGuiID id; while (selection.GetNextSelectedItem(&it, &id)) { ... }'",
                    "//   Or you can check 'if (Contains(id)) { ... }' for each possible object if their number is not too high to iterate.",
                    "// - USING THIS IS NOT MANDATORY. This is only a helper and not a required API.",
                    "// To store a multi-selection, in your application you could:",
                    "// - Use this helper as a convenience. We use our simple key->value ImGuiStorage as a std::set<ImGuiID> replacement.",
                    "// - Use your own external storage: e.g. std::set<MyObjectId>, std::vector<MyObjectId>, interval trees, intrusively stored selection etc.",
                    "// In ImGuiSelectionBasicStorage we:",
                    "// - always use indices in the multi-selection API (passed to SetNextItemSelectionUserData(), retrieved in ImGuiMultiSelectIO)",
                    "// - use the AdapterIndexToStorageId() indirection layer to abstract how persistent selection data is derived from an index.",
                    "// - use decently optimized logic to allow queries and insertion of very large selection sets.",
                    "// - do not preserve selection order.",
                    "// Many combinations are possible depending on how you prefer to store your items and how you prefer to store your selection.",
                    "// Large applications are likely to eventually want to get rid of this indirection layer and do their own thing.",
                    "// See https://github.com/ocornut/imgui/wiki/Multi-Select for details and pseudo-code using this helper."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2885
            }
        },
        {
            "name": "ImGuiSelectionExternalStorage",
            "original_fully_qualified_name": "ImGuiSelectionExternalStorage",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "UserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Members"
                        ],
                        "attached": "// User data for use by adapter function                                // e.g. selection.UserData = (void*)my_items;"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2911
                    }
                },
                {
                    "name": "AdapterSetItemSelected",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void (*AdapterSetItemSelected)(ImGuiSelectionExternalStorage* self, int idx, bool selected)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "void",
                                "description": {
                                    "kind": "Builtin",
                                    "builtin_type": "void"
                                }
                            },
                            "arguments": [
                                {
                                    "name": "self",
                                    "type": {
                                        "declaration": "ImGuiSelectionExternalStorage*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "User",
                                                "name": "ImGuiSelectionExternalStorage"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "idx",
                                    "type": {
                                        "declaration": "int",
                                        "description": {
                                            "kind": "Builtin",
                                            "builtin_type": "int"
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "selected",
                                    "type": {
                                        "declaration": "bool",
                                        "description": {
                                            "kind": "Builtin",
                                            "builtin_type": "bool"
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "AdapterSetItemSelected",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "void"
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "self",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "User",
                                                    "name": "ImGuiSelectionExternalStorage"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "idx",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "int"
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "selected",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "bool"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "comments": {
                        "attached": "// e.g. AdapterSetItemSelected = [](ImGuiSelectionExternalStorage* self, int idx, bool selected) { ((MyItems**)self->UserData)[idx]->Selected = selected; }"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h"
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Optional helper to apply multi-selection requests to existing randomly accessible storage.",
                    "// Convenient if you want to quickly wire multi-select API on e.g. an array of bool or items storing their own selection state."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2908
            }
        },
        {
            "name": "ImDrawCmd",
            "original_fully_qualified_name": "ImDrawCmd",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "ClipRect",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "comments": {
                        "attached": "// 4*4  // Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData->DisplayPos to get clipping rectangle in \"viewport\" coordinates"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2953
                    }
                },
                {
                    "name": "TextureId",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "comments": {
                        "attached": "// 4-8  // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2954
                    }
                },
                {
                    "name": "VtxOffset",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "attached": "// 4    // Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be >0 to support meshes larger than 64K vertices with 16-bit indices."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2955
                    }
                },
                {
                    "name": "IdxOffset",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "attached": "// 4    // Start offset in index buffer."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2956
                    }
                },
                {
                    "name": "ElemCount",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "attached": "// 4    // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[]."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2957
                    }
                },
                {
                    "name": "UserCallback",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawCallback",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawCallback"
                        }
                    },
                    "comments": {
                        "attached": "// 4-8  // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2958
                    }
                },
                {
                    "name": "UserCallbackData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// 4-8  // Callback user data (when UserCallback != NULL). If called AddCallback() with size == 0, this is a copy of the AddCallback() argument. If called AddCallback() with size > 0, this is pointing to a buffer where data is stored."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2959
                    }
                },
                {
                    "name": "UserCallbackDataSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// 4 // Size of callback user data when using storage, otherwise 0."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2960
                    }
                },
                {
                    "name": "UserCallbackDataOffset",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// 4 // [Internal] Offset of callback user data when using storage, otherwise -1."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2961
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Typically, 1 command = 1 GPU draw call (unless command is a callback)",
                    "// - VtxOffset: When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset' is enabled,",
                    "//   this fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.",
                    "//   Backends made for <1.71. will typically ignore the VtxOffset fields.",
                    "// - The ClipRect/TextureId/VtxOffset fields must be contiguous as we memcmp() them together (this is asserted for)."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2951
            }
        },
        {
            "name": "ImDrawVert",
            "original_fully_qualified_name": "ImDrawVert",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "pos",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2973
                    }
                },
                {
                    "name": "uv",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2974
                    }
                },
                {
                    "name": "col",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "conditionals": [
                        {
                            "condition": "ifndef",
                            "expression": "IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT"
                        }
                    ],
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2975
                    }
                }
            ],
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2971
            }
        },
        {
            "name": "ImDrawCmdHeader",
            "original_fully_qualified_name": "ImDrawCmdHeader",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "ClipRect",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2988
                    }
                },
                {
                    "name": "TextureId",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2989
                    }
                },
                {
                    "name": "VtxOffset",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2990
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// [Internal] For use by ImDrawList"
                ]
            },
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 2986
            }
        },
        {
            "name": "ImDrawChannel",
            "original_fully_qualified_name": "ImDrawChannel",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "_CmdBuffer",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImDrawCmd",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImDrawCmd"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2996
                    }
                },
                {
                    "name": "_IdxBuffer",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImDrawIdx",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImDrawIdx"
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 2997
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// [Internal] For use by ImDrawListSplitter"
                ]
            },
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 2994
            }
        },
        {
            "name": "ImDrawListSplitter",
            "original_fully_qualified_name": "ImDrawListSplitter",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "_Current",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Current channel number (0)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3005
                    }
                },
                {
                    "name": "_Count",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Number of active channels (1+)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3006
                    }
                },
                {
                    "name": "_Channels",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImDrawChannel",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImDrawChannel"
                        }
                    },
                    "comments": {
                        "attached": "// Draw channels (not resized down so _Count might be < Channels.Size)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3007
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Split/Merge functions are used to split the draw list into different layers which can be drawn into out of order.",
                    "// This is used by the Columns/Tables API, so items of each column can be batched together in a same draw call."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3003
            }
        },
        {
            "name": "ImDrawList",
            "original_fully_qualified_name": "ImDrawList",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "CmdBuffer",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImDrawCmd",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImDrawCmd"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// This is what you have to render"
                        ],
                        "attached": "// Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3061
                    }
                },
                {
                    "name": "IdxBuffer",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImDrawIdx",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImDrawIdx"
                        }
                    },
                    "comments": {
                        "attached": "// Index buffer. Each command consume ImDrawCmd::ElemCount of those"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3062
                    }
                },
                {
                    "name": "VtxBuffer",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImDrawVert",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImDrawVert"
                        }
                    },
                    "comments": {
                        "attached": "// Vertex buffer."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3063
                    }
                },
                {
                    "name": "Flags",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawListFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawListFlags"
                        }
                    },
                    "comments": {
                        "attached": "// Flags, you may poke into these to adjust anti-aliasing settings per-primitive."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3064
                    }
                },
                {
                    "name": "_VtxCurrentIdx",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal, used while building lists]"
                        ],
                        "attached": "// [Internal] generally == VtxBuffer.Size unless we are past 64K vertices, in which case this gets reset to 0."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3067
                    }
                },
                {
                    "name": "_Data",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawListSharedData*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawListSharedData"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3068
                    }
                },
                {
                    "name": "_VtxWritePtr",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawVert*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawVert"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3069
                    }
                },
                {
                    "name": "_IdxWritePtr",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawIdx*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawIdx"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3070
                    }
                },
                {
                    "name": "_Path",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] current path building"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3071
                    }
                },
                {
                    "name": "_CmdHeader",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawCmdHeader",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawCmdHeader"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] template of active commands. Fields should match those of CmdBuffer.back()."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3072
                    }
                },
                {
                    "name": "_Splitter",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImDrawListSplitter",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawListSplitter"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] for channels api (note: prefer using your own persistent instance of ImDrawListSplitter!)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3073
                    }
                },
                {
                    "name": "_ClipRectStack",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImVec4"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3074
                    }
                },
                {
                    "name": "_TextureIdStack",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImTextureID"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3075
                    }
                },
                {
                    "name": "_CallbacksDataBuf",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImU8",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImU8"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal]"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3076
                    }
                },
                {
                    "name": "_FringeScale",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// [Internal] anti-alias fringe is scaled by this value, this helps to keep things sharp while zooming at vertex buffer content"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3077
                    }
                },
                {
                    "name": "_OwnerName",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Pointer to owner window's name for debugging"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3078
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Draw command list",
                    "// This is the low-level list of polygons that ImGui:: functions are filling. At the end of the frame,",
                    "// all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.",
                    "// Each dear imgui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to",
                    "// access the current window draw list and draw custom primitives.",
                    "// You can interleave normal ImGui:: calls and adding primitives to the current draw list.",
                    "// In single viewport mode, top-left is == GetMainViewport()->Pos (generally 0,0), bottom-right is == GetMainViewport()->Pos+Size (generally io.DisplaySize).",
                    "// You are totally free to apply whatever transformation matrix you want to the data (depending on the use of the transformation you may want to apply it to ClipRect as well!)",
                    "// Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3058
            }
        },
        {
            "name": "ImDrawData",
            "original_fully_qualified_name": "ImDrawData",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Valid",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Only valid after Render() is called and before the next NewFrame() is called."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3213
                    }
                },
                {
                    "name": "CmdListsCount",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Number of ImDrawList* to render (should always be == CmdLists.size)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3214
                    }
                },
                {
                    "name": "TotalIdxCount",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// For convenience, sum of all ImDrawList's IdxBuffer.Size"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3215
                    }
                },
                {
                    "name": "TotalVtxCount",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// For convenience, sum of all ImDrawList's VtxBuffer.Size"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3216
                    }
                },
                {
                    "name": "CmdLists",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImDrawListPtr",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImDrawListPtr"
                        }
                    },
                    "comments": {
                        "attached": "// Array of ImDrawList* to render. The ImDrawLists are owned by ImGuiContext and only pointed to from here."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3217
                    }
                },
                {
                    "name": "DisplayPos",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Top-left position of the viewport to render (== top-left of the orthogonal projection matrix to use) (== GetMainViewport()->Pos for the main viewport, == (0.0) in most single-viewport applications)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3218
                    }
                },
                {
                    "name": "DisplaySize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Size of the viewport to render (== GetMainViewport()->Size for the main viewport, == io.DisplaySize in most single-viewport applications)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3219
                    }
                },
                {
                    "name": "FramebufferScale",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3220
                    }
                },
                {
                    "name": "OwnerViewport",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiViewport*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiViewport"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Viewport carrying the ImDrawData instance, might be of use to the renderer (generally not)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3221
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// All draw data to render a Dear ImGui frame",
                    "// (NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,",
                    "// as this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3211
            }
        },
        {
            "name": "ImFontConfig",
            "original_fully_qualified_name": "ImFontConfig",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "FontData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "//          // TTF/OTF data"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3237
                    }
                },
                {
                    "name": "FontDataSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "//          // TTF/OTF data size"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3238
                    }
                },
                {
                    "name": "FontDataOwnedByAtlas",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3239
                    }
                },
                {
                    "name": "FontNo",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// 0        // Index of font within TTF/OTF file"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3240
                    }
                },
                {
                    "name": "SizePixels",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "//          // Size in pixels for rasterizer (more or less maps to the resulting font height)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3241
                    }
                },
                {
                    "name": "OversampleH",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// 2        // Rasterize at higher quality for sub-pixel positioning. Note the difference between 2 and 3 is minimal. You can reduce this to 1 for large glyphs save memory. Read https://github.com/nothings/stb/blob/master/tests/oversample/README.md for details."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3242
                    }
                },
                {
                    "name": "OversampleV",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// 1        // Rasterize at higher quality for sub-pixel positioning. This is not really useful as we don't use sub-pixel positions on the Y axis."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3243
                    }
                },
                {
                    "name": "PixelSnapH",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// false    // Align every glyph AdvanceX to pixel boundaries. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3244
                    }
                },
                {
                    "name": "GlyphExtraSpacing",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// 0, 0     // Extra spacing (in pixels) between glyphs when rendered: essentially add to glyph->AdvanceX. Only X axis is supported for now."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3245
                    }
                },
                {
                    "name": "GlyphOffset",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// 0, 0     // Offset all glyphs from this font input."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3246
                    }
                },
                {
                    "name": "GlyphRanges",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const ImWchar*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImWchar",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "comments": {
                        "attached": "// NULL     // THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE. Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3247
                    }
                },
                {
                    "name": "GlyphMinAdvanceX",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3248
                    }
                },
                {
                    "name": "GlyphMaxAdvanceX",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// FLT_MAX  // Maximum AdvanceX for glyphs"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3249
                    }
                },
                {
                    "name": "MergeMode",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3250
                    }
                },
                {
                    "name": "FontBuilderFlags",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "attached": "// 0        // Settings for custom font builder. THIS IS BUILDER IMPLEMENTATION DEPENDENT. Leave as zero if unsure."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3251
                    }
                },
                {
                    "name": "RasterizerMultiply",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 1.0f     // Linearly brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable. This is a silly thing we may remove in the future."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3252
                    }
                },
                {
                    "name": "RasterizerDensity",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 1.0f     // DPI scale for rasterization, not altering other font metrics: make it easy to swap between e.g. a 100% and a 400% fonts for a zooming display. IMPORTANT: If you increase this it is expected that you increase font scale accordingly, otherwise quality may look lowered."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3253
                    }
                },
                {
                    "name": "EllipsisChar",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "comments": {
                        "attached": "// 0        // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3254
                    }
                },
                {
                    "name": "Name",
                    "is_array": true,
                    "array_bounds": "40",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "char[40]",
                        "description": {
                            "kind": "Array",
                            "bounds": "40",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char"
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal]"
                        ],
                        "attached": "// Name (strictly to ease debugging)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3257
                    }
                },
                {
                    "name": "DstFont",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3258
                    }
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3235
            }
        },
        {
            "name": "ImFontGlyph",
            "original_fully_qualified_name": "ImFontGlyph",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Colored",
                    "is_array": false,
                    "width": 1,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "attached": "// Flag to indicate glyph is colored and should generally ignore tinting (make it usable with no shift on little-endian as this is used in loops)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3267
                    }
                },
                {
                    "name": "Visible",
                    "is_array": false,
                    "width": 1,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "attached": "// Flag to indicate glyph has no visible pixels (e.g. space). Allow early out when rendering."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3268
                    }
                },
                {
                    "name": "Codepoint",
                    "is_array": false,
                    "width": 30,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "attached": "// 0x0000..0x10FFFF"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3269
                    }
                },
                {
                    "name": "AdvanceX",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3270
                    }
                },
                {
                    "name": "X0",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Glyph corners"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3271
                    }
                },
                {
                    "name": "Y0",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Glyph corners"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3271
                    }
                },
                {
                    "name": "X1",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Glyph corners"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3271
                    }
                },
                {
                    "name": "Y1",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Glyph corners"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3271
                    }
                },
                {
                    "name": "U0",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Texture coordinates"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3272
                    }
                },
                {
                    "name": "V0",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Texture coordinates"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3272
                    }
                },
                {
                    "name": "U1",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Texture coordinates"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3272
                    }
                },
                {
                    "name": "V1",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Texture coordinates"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3272
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Hold rendering data for one glyph.",
                    "// (Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3265
            }
        },
        {
            "name": "ImFontGlyphRangesBuilder",
            "original_fully_qualified_name": "ImFontGlyphRangesBuilder",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "UsedChars",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImU32"
                        }
                    },
                    "comments": {
                        "attached": "// Store 1-bit per Unicode code point (0=unused, 1=used)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3279
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Helper to build glyph ranges from text/string data. Feed your application strings/characters to it then call BuildRanges().",
                    "// This is essentially a tightly packed of vector of 64k booleans = 8KB storage."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3277
            }
        },
        {
            "name": "ImFontAtlasCustomRect",
            "original_fully_qualified_name": "ImFontAtlasCustomRect",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "X",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned short",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_short"
                        }
                    },
                    "comments": {
                        "attached": "// Output   // Packed position in Atlas"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3294
                    }
                },
                {
                    "name": "Y",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned short",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_short"
                        }
                    },
                    "comments": {
                        "attached": "// Output   // Packed position in Atlas"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3294
                    }
                },
                {
                    "name": "Width",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned short",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_short"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal]"
                        ],
                        "attached": "// Input    // Desired rectangle dimension"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3297
                    }
                },
                {
                    "name": "Height",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned short",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_short"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal]"
                        ],
                        "attached": "// Input    // Desired rectangle dimension"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3297
                    }
                },
                {
                    "name": "GlyphID",
                    "is_array": false,
                    "width": 31,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "attached": "// Input    // For custom font glyphs only (ID < 0x110000)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3298
                    }
                },
                {
                    "name": "GlyphColored",
                    "is_array": false,
                    "width": 1,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "attached": "// Input  // For custom font glyphs only: glyph is colored, removed tinting."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3299
                    }
                },
                {
                    "name": "GlyphAdvanceX",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Input    // For custom font glyphs only: glyph xadvance"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3300
                    }
                },
                {
                    "name": "GlyphOffset",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Input    // For custom font glyphs only: glyph display offset"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3301
                    }
                },
                {
                    "name": "Font",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Input    // For custom font glyphs only: target font"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3302
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// See ImFontAtlas::AddCustomRectXXX functions."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3292
            }
        },
        {
            "name": "ImFontAtlas",
            "original_fully_qualified_name": "ImFontAtlas",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Flags",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImFontAtlasFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImFontAtlasFlags"
                        }
                    },
                    "comments": {
                        "attached": "// Build flags (see ImFontAtlasFlags_)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3400
                    }
                },
                {
                    "name": "TexID",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "comments": {
                        "attached": "// User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3401
                    }
                },
                {
                    "name": "TexDesiredWidth",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3402
                    }
                },
                {
                    "name": "TexGlyphPadding",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// FIXME: Should be called \"TexPackPadding\". Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0 (will also need to set AntiAliasedLinesUseTex = false)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3403
                    }
                },
                {
                    "name": "Locked",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3404
                    }
                },
                {
                    "name": "UserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// Store your own atlas related user-data (if e.g. you have multiple font atlas)."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3405
                    }
                },
                {
                    "name": "TexReady",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal]",
                            "// NB: Access texture data via GetTexData*() calls! Which will setup a default font for you."
                        ],
                        "attached": "// Set when texture was built matching current font input"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3409
                    }
                },
                {
                    "name": "TexPixelsUseColors",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// Tell whether our texture data is known to use colors (rather than just alpha channel), in order to help backend select a format."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3410
                    }
                },
                {
                    "name": "TexPixelsAlpha8",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "unsigned_char"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3411
                    }
                },
                {
                    "name": "TexPixelsRGBA32",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "unsigned_int"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3412
                    }
                },
                {
                    "name": "TexWidth",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Texture width calculated during Build()."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3413
                    }
                },
                {
                    "name": "TexHeight",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Texture height calculated during Build()."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3414
                    }
                },
                {
                    "name": "TexUvScale",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// = (1.0f/TexWidth, 1.0f/TexHeight)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3415
                    }
                },
                {
                    "name": "TexUvWhitePixel",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Texture coordinates to a white pixel"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3416
                    }
                },
                {
                    "name": "Fonts",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImFontPtr",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImFontPtr"
                        }
                    },
                    "comments": {
                        "attached": "// Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3417
                    }
                },
                {
                    "name": "CustomRects",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImFontAtlasCustomRect",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImFontAtlasCustomRect"
                        }
                    },
                    "comments": {
                        "attached": "// Rectangles for packing custom texture data into the atlas."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3418
                    }
                },
                {
                    "name": "ConfigData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImFontConfig",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImFontConfig"
                        }
                    },
                    "comments": {
                        "attached": "// Configuration data"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3419
                    }
                },
                {
                    "name": "TexUvLines",
                    "is_array": true,
                    "array_bounds": "IM_DRAWLIST_TEX_LINES_WIDTH_MAX+1",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec4[IM_DRAWLIST_TEX_LINES_WIDTH_MAX+1]",
                        "description": {
                            "kind": "Array",
                            "bounds": "IM_DRAWLIST_TEX_LINES_WIDTH_MAX+1",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec4"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// UVs for baked anti-aliased lines"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3420
                    }
                },
                {
                    "name": "FontBuilderIO",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const ImFontBuilderIO*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontBuilderIO",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal] Font builder"
                        ],
                        "attached": "// Opaque interface to a font builder (default to stb_truetype, can be changed to use FreeType by defining IMGUI_ENABLE_FREETYPE)."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3423
                    }
                },
                {
                    "name": "FontBuilderFlags",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "comments": {
                        "attached": "// Shared flags (for all fonts) for custom font builder. THIS IS BUILD IMPLEMENTATION DEPENDENT. Per-font override is also available in ImFontConfig."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3424
                    }
                },
                {
                    "name": "PackIdMouseCursors",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal] Packing data"
                        ],
                        "attached": "// Custom texture rectangle ID for white pixel and mouse cursors"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3427
                    }
                },
                {
                    "name": "PackIdLines",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// Custom texture rectangle ID for baked anti-aliased lines"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3428
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Load and rasterize multiple TTF/OTF fonts into a same texture. The font atlas will build a single texture holding:",
                    "//  - One or more fonts.",
                    "//  - Custom graphics data needed to render the shapes needed by Dear ImGui.",
                    "//  - Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).",
                    "// It is the user-code responsibility to setup/build the atlas, then upload the pixel data into a texture accessible by your graphics api.",
                    "//  - Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you.",
                    "//  - Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.",
                    "//  - Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples)",
                    "//  - Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture in a format natural to your graphics API.",
                    "//    This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.",
                    "// Common pitfalls:",
                    "// - If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the",
                    "//   atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data.",
                    "// - Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.",
                    "//   You can set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed,",
                    "// - Even though many functions are suffixed with \"TTF\", OTF data is supported just as well.",
                    "// - This is an old API and it is currently awkward for those and various other reasons! We will address them in the future!"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3333
            }
        },
        {
            "name": "ImFont",
            "original_fully_qualified_name": "ImFont",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "IndexAdvanceX",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_float",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_float"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal] Members: Hot ~20/24 bytes (for CalcTextSize)"
                        ],
                        "attached": "// 12-16 // out //            // Sparse. Glyphs->AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this info, and are often bottleneck in large UI)."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3440
                    }
                },
                {
                    "name": "FallbackAdvanceX",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 4     // out // = FallbackGlyph->AdvanceX"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3441
                    }
                },
                {
                    "name": "FontSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 4     // in  //            // Height of characters/line, set during loading (don't change after loading)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3442
                    }
                },
                {
                    "name": "IndexLookup",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImWchar"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal] Members: Hot ~28/40 bytes (for RenderText loop)"
                        ],
                        "attached": "// 12-16 // out //            // Sparse. Index glyphs by Unicode code-point."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3445
                    }
                },
                {
                    "name": "Glyphs",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVector_ImFontGlyph",
                        "description": {
                            "kind": "User",
                            "name": "ImVector_ImFontGlyph"
                        }
                    },
                    "comments": {
                        "attached": "// 12-16 // out //            // All glyphs."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3446
                    }
                },
                {
                    "name": "FallbackGlyph",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const ImFontGlyph*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontGlyph",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "comments": {
                        "attached": "// 4-8   // out // = FindGlyph(FontFallbackChar)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3447
                    }
                },
                {
                    "name": "ContainerAtlas",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// [Internal] Members: Cold ~32/40 bytes",
                            "// Conceptually ConfigData[] is the list of font sources merged to create this font."
                        ],
                        "attached": "// 4-8   // out //            // What we has been loaded into"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3451
                    }
                },
                {
                    "name": "ConfigData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const ImFontConfig*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontConfig",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "comments": {
                        "attached": "// 4-8   // in  //            // Pointer within ContainerAtlas->ConfigData to ConfigDataCount instances"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3452
                    }
                },
                {
                    "name": "ConfigDataCount",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "short",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "short"
                        }
                    },
                    "comments": {
                        "attached": "// 2     // in  // ~ 1        // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3453
                    }
                },
                {
                    "name": "EllipsisCharCount",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "short",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "short"
                        }
                    },
                    "comments": {
                        "attached": "// 1     // out // 1 or 3"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3454
                    }
                },
                {
                    "name": "EllipsisChar",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "comments": {
                        "attached": "// 2-4   // out // = '...'/'.'// Character used for ellipsis rendering."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3455
                    }
                },
                {
                    "name": "FallbackChar",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "comments": {
                        "attached": "// 2-4   // out // = FFFD/'?' // Character used if a glyph isn't found."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3456
                    }
                },
                {
                    "name": "EllipsisWidth",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 4     // out               // Width"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3457
                    }
                },
                {
                    "name": "EllipsisCharStep",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 4     // out               // Step between characters when EllipsisCount > 0"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3458
                    }
                },
                {
                    "name": "DirtyLookupTables",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// 1     // out //"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3459
                    }
                },
                {
                    "name": "Scale",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 4     // in  // = 1.f      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3460
                    }
                },
                {
                    "name": "Ascent",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize] (unscaled)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3461
                    }
                },
                {
                    "name": "Descent",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// 4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize] (unscaled)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3461
                    }
                },
                {
                    "name": "MetricsTotalSurface",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "comments": {
                        "attached": "// 4     // out //            // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)"
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3462
                    }
                },
                {
                    "name": "Used4kPagesMap",
                    "is_array": true,
                    "array_bounds": "(IM_UNICODE_CODEPOINT_MAX +1)/4096/8",
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImU8[(IM_UNICODE_CODEPOINT_MAX +1)/4096/8]",
                        "description": {
                            "kind": "Array",
                            "bounds": "(IM_UNICODE_CODEPOINT_MAX +1)/4096/8",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImU8"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// 2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints."
                    },
                    "is_internal": true,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3463
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Font runtime data and rendering",
                    "// ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32()."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3437
            }
        },
        {
            "name": "ImGuiViewport",
            "original_fully_qualified_name": "ImGuiViewport",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "ID",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "comments": {
                        "attached": "// Unique identifier for the viewport"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3513
                    }
                },
                {
                    "name": "Flags",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImGuiViewportFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiViewportFlags"
                        }
                    },
                    "comments": {
                        "attached": "// See ImGuiViewportFlags_"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3514
                    }
                },
                {
                    "name": "Pos",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3515
                    }
                },
                {
                    "name": "Size",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Main Area: Size of the viewport."
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3516
                    }
                },
                {
                    "name": "WorkPos",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Work Area: Position of the viewport minus task bars, menus bars, status bars (>= Pos)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3517
                    }
                },
                {
                    "name": "WorkSize",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Work Area: Size of the viewport minus task bars, menu bars, status bars (<= Size)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3518
                    }
                },
                {
                    "name": "PlatformHandle",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Platform/Backend Dependent Data"
                        ],
                        "attached": "// void* to hold higher-level, platform window handle (e.g. HWND, GLFWWindow*, SDL_Window*)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3521
                    }
                },
                {
                    "name": "PlatformHandleRaw",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "attached": "// void* to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms)"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3522
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.",
                    "// - In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.",
                    "// - In the future we will extend this concept further to also represent Platform Monitor and support a \"no main platform window\" operation mode.",
                    "// - About Main Area vs Work Area:",
                    "//   - Main Area = entire viewport.",
                    "//   - Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).",
                    "//   - Windows are generally trying to stay within the Work Area of their host viewport."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3511
            }
        },
        {
            "name": "ImGuiPlatformIO",
            "original_fully_qualified_name": "ImGuiPlatformIO",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "Platform_GetClipboardTextFn",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "const char* (*Platform_GetClipboardTextFn)(ImGuiContext* ctx)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "const char*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "char",
                                        "storage_classes": [
                                            "const"
                                        ]
                                    }
                                }
                            },
                            "arguments": [
                                {
                                    "name": "ctx",
                                    "type": {
                                        "declaration": "ImGuiContext*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "User",
                                                "name": "ImGuiContext"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "Platform_GetClipboardTextFn",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "Builtin",
                                            "builtin_type": "char",
                                            "storage_classes": [
                                                "const"
                                            ]
                                        }
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "ctx",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "User",
                                                    "name": "ImGuiContext"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Optional: Access OS clipboard",
                            "// (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)"
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h"
                    }
                },
                {
                    "name": "Platform_SetClipboardTextFn",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void (*Platform_SetClipboardTextFn)(ImGuiContext* ctx, const char* text)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "void",
                                "description": {
                                    "kind": "Builtin",
                                    "builtin_type": "void"
                                }
                            },
                            "arguments": [
                                {
                                    "name": "ctx",
                                    "type": {
                                        "declaration": "ImGuiContext*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "User",
                                                "name": "ImGuiContext"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "text",
                                    "type": {
                                        "declaration": "const char*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "char",
                                                "storage_classes": [
                                                    "const"
                                                ]
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "Platform_SetClipboardTextFn",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "void"
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "ctx",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "User",
                                                    "name": "ImGuiContext"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "text",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "char",
                                                    "storage_classes": [
                                                        "const"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h"
                    }
                },
                {
                    "name": "Platform_ClipboardUserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3548
                    }
                },
                {
                    "name": "Platform_OpenInShellFn",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool (*Platform_OpenInShellFn)(ImGuiContext* ctx, const char* path)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "bool",
                                "description": {
                                    "kind": "Builtin",
                                    "builtin_type": "bool"
                                }
                            },
                            "arguments": [
                                {
                                    "name": "ctx",
                                    "type": {
                                        "declaration": "ImGuiContext*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "User",
                                                "name": "ImGuiContext"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "path",
                                    "type": {
                                        "declaration": "const char*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "char",
                                                "storage_classes": [
                                                    "const"
                                                ]
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "Platform_OpenInShellFn",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "bool"
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "ctx",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "User",
                                                    "name": "ImGuiContext"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "path",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "char",
                                                    "storage_classes": [
                                                        "const"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Optional: Open link/folder/file in OS Shell",
                            "// (default to use ShellExecuteA() on Windows, system() on Linux/Mac)"
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h"
                    }
                },
                {
                    "name": "Platform_OpenInShellUserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3553
                    }
                },
                {
                    "name": "Platform_SetImeDataFn",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void (*Platform_SetImeDataFn)(ImGuiContext* ctx, ImGuiViewport* viewport, ImGuiPlatformImeData* data)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "void",
                                "description": {
                                    "kind": "Builtin",
                                    "builtin_type": "void"
                                }
                            },
                            "arguments": [
                                {
                                    "name": "ctx",
                                    "type": {
                                        "declaration": "ImGuiContext*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "User",
                                                "name": "ImGuiContext"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "viewport",
                                    "type": {
                                        "declaration": "ImGuiViewport*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "User",
                                                "name": "ImGuiViewport"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "data",
                                    "type": {
                                        "declaration": "ImGuiPlatformImeData*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "User",
                                                "name": "ImGuiPlatformImeData"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "Platform_SetImeDataFn",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "void"
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "ctx",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "User",
                                                    "name": "ImGuiContext"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "viewport",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "User",
                                                    "name": "ImGuiViewport"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "data",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "User",
                                                    "name": "ImGuiPlatformImeData"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Optional: Notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME on Windows)",
                            "// (default to use native imm32 api on Windows)"
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h"
                    }
                },
                {
                    "name": "Platform_ImeUserData",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3558
                    }
                },
                {
                    "name": "Platform_LocaleDecimalPoint",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Optional: Platform locale",
                            "// [Experimental] Configure decimal point e.g. '.' or ',' useful for some languages (e.g. German), generally pulled from *localeconv()->decimal_point"
                        ],
                        "attached": "// '.'"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3563
                    }
                },
                {
                    "name": "Renderer_RenderState",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "comments": {
                        "preceding": [
                            "// Written by some backends during ImGui_ImplXXXX_RenderDrawData() call to point backend_specific ImGui_ImplXXXX_RenderState* structure."
                        ]
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3570
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// Access via ImGui::GetPlatformIO()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3536
            }
        },
        {
            "name": "ImGuiPlatformImeData",
            "original_fully_qualified_name": "ImGuiPlatformImeData",
            "kind": "struct",
            "by_value": false,
            "forward_declaration": false,
            "is_anonymous": false,
            "fields": [
                {
                    "name": "WantVisible",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "comments": {
                        "attached": "// A widget wants the IME to be visible"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3576
                    }
                },
                {
                    "name": "InputPos",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "comments": {
                        "attached": "// Position of the input cursor"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3577
                    }
                },
                {
                    "name": "InputLineHeight",
                    "is_array": false,
                    "is_anonymous": false,
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "comments": {
                        "attached": "// Line height"
                    },
                    "is_internal": false,
                    "source_location": {
                        "filename": "imgui.h",
                        "line": 3578
                    }
                }
            ],
            "comments": {
                "preceding": [
                    "// (Optional) Support for IME (Input Method Editor) via the platform_io.Platform_SetImeDataFn() function."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3574
            }
        }
    ],
    "functions": [
        {
            "name": "ImGui_CreateContext",
            "original_fully_qualified_name": "ImGui::CreateContext",
            "return_type": {
                "declaration": "ImGuiContext*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiContext"
                    }
                }
            },
            "arguments": [
                {
                    "name": "shared_font_atlas",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Context creation and access",
                    "// - Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between contexts.",
                    "// - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()",
                    "//   for each static/DLL boundary you are calling from. Read \"Context and Memory Allocators\" section of imgui.cpp for details."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 327
            }
        },
        {
            "name": "ImGui_DestroyContext",
            "original_fully_qualified_name": "ImGui::DestroyContext",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "ctx",
                    "type": {
                        "declaration": "ImGuiContext*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiContext"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// NULL = destroy current context"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 328
            }
        },
        {
            "name": "ImGui_GetCurrentContext",
            "original_fully_qualified_name": "ImGui::GetCurrentContext",
            "return_type": {
                "declaration": "ImGuiContext*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiContext"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 329
            }
        },
        {
            "name": "ImGui_SetCurrentContext",
            "original_fully_qualified_name": "ImGui::SetCurrentContext",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "ctx",
                    "type": {
                        "declaration": "ImGuiContext*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiContext"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 330
            }
        },
        {
            "name": "ImGui_GetIO",
            "original_fully_qualified_name": "ImGui::GetIO",
            "return_type": {
                "declaration": "ImGuiIO*",
                "description": {
                    "kind": "Pointer",
                    "is_nullable": false,
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiIO"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Main"
                ],
                "attached": "// access the ImGuiIO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 333
            }
        },
        {
            "name": "ImGui_GetPlatformIO",
            "original_fully_qualified_name": "ImGui::GetPlatformIO",
            "return_type": {
                "declaration": "ImGuiPlatformIO*",
                "description": {
                    "kind": "Pointer",
                    "is_nullable": false,
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiPlatformIO"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// access the ImGuiPlatformIO structure (mostly hooks/functions to connect to platform/renderer and OS Clipboard, IME etc.)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 334
            }
        },
        {
            "name": "ImGui_GetStyle",
            "original_fully_qualified_name": "ImGui::GetStyle",
            "return_type": {
                "declaration": "ImGuiStyle*",
                "description": {
                    "kind": "Pointer",
                    "is_nullable": false,
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiStyle"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// access the Style structure (colors, sizes). Always use PushStyleColor(), PushStyleVar() to modify style mid-frame!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 335
            }
        },
        {
            "name": "ImGui_NewFrame",
            "original_fully_qualified_name": "ImGui::NewFrame",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 336
            }
        },
        {
            "name": "ImGui_EndFrame",
            "original_fully_qualified_name": "ImGui::EndFrame",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 337
            }
        },
        {
            "name": "ImGui_Render",
            "original_fully_qualified_name": "ImGui::Render",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 338
            }
        },
        {
            "name": "ImGui_GetDrawData",
            "original_fully_qualified_name": "ImGui::GetDrawData",
            "return_type": {
                "declaration": "ImDrawData*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImDrawData"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// valid after Render() and until the next call to NewFrame(). this is what you have to render."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 339
            }
        },
        {
            "name": "ImGui_ShowDemoWindow",
            "original_fully_qualified_name": "ImGui::ShowDemoWindow",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "p_open",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Demo, Debug, Information"
                ],
                "attached": "// create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 342
            }
        },
        {
            "name": "ImGui_ShowMetricsWindow",
            "original_fully_qualified_name": "ImGui::ShowMetricsWindow",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "p_open",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 343
            }
        },
        {
            "name": "ImGui_ShowDebugLogWindow",
            "original_fully_qualified_name": "ImGui::ShowDebugLogWindow",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "p_open",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// create Debug Log window. display a simplified log of important dear imgui events."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 344
            }
        },
        {
            "name": "ImGui_ShowIDStackToolWindow",
            "original_fully_qualified_name": "ImGui::ShowIDStackToolWindow",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "p_open",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// create Stack Tool window. hover items with mouse to query information about the source of their unique ID."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 345
            }
        },
        {
            "name": "ImGui_ShowAboutWindow",
            "original_fully_qualified_name": "ImGui::ShowAboutWindow",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "p_open",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// create About window. display Dear ImGui version, credits and build/system information."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 346
            }
        },
        {
            "name": "ImGui_ShowStyleEditor",
            "original_fully_qualified_name": "ImGui::ShowStyleEditor",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "ref",
                    "type": {
                        "declaration": "ImGuiStyle*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStyle"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 347
            }
        },
        {
            "name": "ImGui_ShowStyleSelector",
            "original_fully_qualified_name": "ImGui::ShowStyleSelector",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// add style selector block (not a window), essentially a combo listing the default styles."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 348
            }
        },
        {
            "name": "ImGui_ShowFontSelector",
            "original_fully_qualified_name": "ImGui::ShowFontSelector",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// add font selector block (not a window), essentially a combo listing the loaded fonts."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 349
            }
        },
        {
            "name": "ImGui_ShowUserGuide",
            "original_fully_qualified_name": "ImGui::ShowUserGuide",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// add basic help/info block (not a window): how to manipulate ImGui as an end-user (mouse/keyboard controls)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 350
            }
        },
        {
            "name": "ImGui_GetVersion",
            "original_fully_qualified_name": "ImGui::GetVersion",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get the compiled version string e.g. \"1.80 WIP\" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 351
            }
        },
        {
            "name": "ImGui_StyleColorsDark",
            "original_fully_qualified_name": "ImGui::StyleColorsDark",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "dst",
                    "type": {
                        "declaration": "ImGuiStyle*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStyle"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Styles"
                ],
                "attached": "// new, recommended style (default)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 354
            }
        },
        {
            "name": "ImGui_StyleColorsLight",
            "original_fully_qualified_name": "ImGui::StyleColorsLight",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "dst",
                    "type": {
                        "declaration": "ImGuiStyle*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStyle"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// best used with borders and a custom, thicker font"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 355
            }
        },
        {
            "name": "ImGui_StyleColorsClassic",
            "original_fully_qualified_name": "ImGui::StyleColorsClassic",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "dst",
                    "type": {
                        "declaration": "ImGuiStyle*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStyle"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// classic imgui style"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 356
            }
        },
        {
            "name": "ImGui_Begin",
            "original_fully_qualified_name": "ImGui::Begin",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "name",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_open",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiWindowFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiWindowFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Windows",
                    "// - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.",
                    "// - Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,",
                    "//   which clicking will set the boolean to false when clicked.",
                    "// - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.",
                    "//   Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().",
                    "// - Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting",
                    "//   anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!",
                    "//   [Important: due to legacy reason, Begin/End and BeginChild/EndChild are inconsistent with all other functions",
                    "//    such as BeginMenu/EndMenu, BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding",
                    "//    BeginXXX function returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]",
                    "// - Note that the bottom of window stack always contains a window called \"Debug\"."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 370
            }
        },
        {
            "name": "ImGui_End",
            "original_fully_qualified_name": "ImGui::End",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 371
            }
        },
        {
            "name": "ImGui_BeginChild",
            "original_fully_qualified_name": "ImGui::BeginChild",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "child_flags",
                    "type": {
                        "declaration": "ImGuiChildFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiChildFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "window_flags",
                    "type": {
                        "declaration": "ImGuiWindowFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiWindowFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Child Windows",
                    "// - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.",
                    "// - Before 1.90 (November 2023), the \"ImGuiChildFlags child_flags = 0\" parameter was \"bool border = false\".",
                    "//   This API is backward compatible with old code, as we guarantee that ImGuiChildFlags_Borders == true.",
                    "//   Consider updating your old code:",
                    "//      BeginChild(\"Name\", size, false)   -> Begin(\"Name\", size, 0); or Begin(\"Name\", size, ImGuiChildFlags_None);",
                    "//      BeginChild(\"Name\", size, true)    -> Begin(\"Name\", size, ImGuiChildFlags_Borders);",
                    "// - Manual sizing (each axis can use a different setting e.g. ImVec2(0.0f, 400.0f)):",
                    "//     == 0.0f: use remaining parent window size for this axis.",
                    "//      > 0.0f: use specified size for this axis.",
                    "//      < 0.0f: right/bottom-align to specified distance from available content boundaries.",
                    "// - Specifying ImGuiChildFlags_AutoResizeX or ImGuiChildFlags_AutoResizeY makes the sizing automatic based on child contents.",
                    "//   Combining both ImGuiChildFlags_AutoResizeX _and_ ImGuiChildFlags_AutoResizeY defeats purpose of a scrolling region and is NOT recommended.",
                    "// - BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting",
                    "//   anything to the window. Always call a matching EndChild() for each BeginChild() call, regardless of its return value.",
                    "//   [Important: due to legacy reason, Begin/End and BeginChild/EndChild are inconsistent with all other functions",
                    "//    such as BeginMenu/EndMenu, BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding",
                    "//    BeginXXX function returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 391
            }
        },
        {
            "name": "ImGui_BeginChildID",
            "original_fully_qualified_name": "ImGui::BeginChild",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "id",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "child_flags",
                    "type": {
                        "declaration": "ImGuiChildFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiChildFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "window_flags",
                    "type": {
                        "declaration": "ImGuiWindowFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiWindowFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 392
            }
        },
        {
            "name": "ImGui_EndChild",
            "original_fully_qualified_name": "ImGui::EndChild",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 393
            }
        },
        {
            "name": "ImGui_IsWindowAppearing",
            "original_fully_qualified_name": "ImGui::IsWindowAppearing",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Windows Utilities",
                    "// - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 397
            }
        },
        {
            "name": "ImGui_IsWindowCollapsed",
            "original_fully_qualified_name": "ImGui::IsWindowCollapsed",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 398
            }
        },
        {
            "name": "ImGui_IsWindowFocused",
            "original_fully_qualified_name": "ImGui::IsWindowFocused",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiFocusedFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiFocusedFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is current window focused? or its root/child, depending on flags. see flags for options."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 399
            }
        },
        {
            "name": "ImGui_IsWindowHovered",
            "original_fully_qualified_name": "ImGui::IsWindowHovered",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiHoveredFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiHoveredFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is current window hovered and hoverable (e.g. not blocked by a popup/modal)? See ImGuiHoveredFlags_ for options. IMPORTANT: If you are trying to check whether your mouse should be dispatched to Dear ImGui or to your underlying app, you should not use this function! Use the 'io.WantCaptureMouse' boolean for that! Refer to FAQ entry \"How can I tell whether to dispatch mouse/keyboard to Dear ImGui or my application?\" for details."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 400
            }
        },
        {
            "name": "ImGui_GetWindowDrawList",
            "original_fully_qualified_name": "ImGui::GetWindowDrawList",
            "return_type": {
                "declaration": "ImDrawList*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImDrawList"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get draw list associated to the current window, to append your own drawing primitives"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 401
            }
        },
        {
            "name": "ImGui_GetWindowPos",
            "original_fully_qualified_name": "ImGui::GetWindowPos",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get current window position in screen space (IT IS UNLIKELY YOU EVER NEED TO USE THIS. Consider always using GetCursorScreenPos() and GetContentRegionAvail() instead)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 402
            }
        },
        {
            "name": "ImGui_GetWindowSize",
            "original_fully_qualified_name": "ImGui::GetWindowSize",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get current window size (IT IS UNLIKELY YOU EVER NEED TO USE THIS. Consider always using GetCursorScreenPos() and GetContentRegionAvail() instead)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 403
            }
        },
        {
            "name": "ImGui_GetWindowWidth",
            "original_fully_qualified_name": "ImGui::GetWindowWidth",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get current window width (IT IS UNLIKELY YOU EVER NEED TO USE THIS). Shortcut for GetWindowSize().x."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 404
            }
        },
        {
            "name": "ImGui_GetWindowHeight",
            "original_fully_qualified_name": "ImGui::GetWindowHeight",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get current window height (IT IS UNLIKELY YOU EVER NEED TO USE THIS). Shortcut for GetWindowSize().y."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 405
            }
        },
        {
            "name": "ImGui_SetNextWindowPos",
            "original_fully_qualified_name": "ImGui::SetNextWindowPos",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "pivot",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Window manipulation",
                    "// - Prefer using SetNextXXX functions (before Begin) rather that SetXXX functions (after Begin)."
                ],
                "attached": "// set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 409
            }
        },
        {
            "name": "ImGui_SetNextWindowSize",
            "original_fully_qualified_name": "ImGui::SetNextWindowSize",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 410
            }
        },
        {
            "name": "ImGui_SetNextWindowSizeConstraints",
            "original_fully_qualified_name": "ImGui::SetNextWindowSizeConstraints",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "size_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "custom_callback",
                    "type": {
                        "declaration": "ImGuiSizeCallback",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSizeCallback"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "custom_callback_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set next window size limits. use 0.0f or FLT_MAX if you don't want limits. Use -1 for both min and max of same axis to preserve current size (which itself is a constraint). Use callback to apply non-trivial programmatic constraints."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 411
            }
        },
        {
            "name": "ImGui_SetNextWindowContentSize",
            "original_fully_qualified_name": "ImGui::SetNextWindowContentSize",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 412
            }
        },
        {
            "name": "ImGui_SetNextWindowCollapsed",
            "original_fully_qualified_name": "ImGui::SetNextWindowCollapsed",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "collapsed",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set next window collapsed state. call before Begin()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 413
            }
        },
        {
            "name": "ImGui_SetNextWindowFocus",
            "original_fully_qualified_name": "ImGui::SetNextWindowFocus",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set next window to be focused / top-most. call before Begin()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 414
            }
        },
        {
            "name": "ImGui_SetNextWindowScroll",
            "original_fully_qualified_name": "ImGui::SetNextWindowScroll",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "scroll",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set next window scrolling value (use < 0.0f to not affect a given axis)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 415
            }
        },
        {
            "name": "ImGui_SetNextWindowBgAlpha",
            "original_fully_qualified_name": "ImGui::SetNextWindowBgAlpha",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "alpha",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 416
            }
        },
        {
            "name": "ImGui_SetWindowPos",
            "original_fully_qualified_name": "ImGui::SetWindowPos",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 417
            }
        },
        {
            "name": "ImGui_SetWindowSize",
            "original_fully_qualified_name": "ImGui::SetWindowSize",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 418
            }
        },
        {
            "name": "ImGui_SetWindowCollapsed",
            "original_fully_qualified_name": "ImGui::SetWindowCollapsed",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "collapsed",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 419
            }
        },
        {
            "name": "ImGui_SetWindowFocus",
            "original_fully_qualified_name": "ImGui::SetWindowFocus",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// (not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 420
            }
        },
        {
            "name": "ImGui_SetWindowFontScale",
            "original_fully_qualified_name": "ImGui::SetWindowFontScale",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "scale",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// [OBSOLETE] set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 421
            }
        },
        {
            "name": "ImGui_SetWindowPosStr",
            "original_fully_qualified_name": "ImGui::SetWindowPos",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "name",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set named window position."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 422
            }
        },
        {
            "name": "ImGui_SetWindowSizeStr",
            "original_fully_qualified_name": "ImGui::SetWindowSize",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "name",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set named window size. set axis to 0.0f to force an auto-fit on this axis."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 423
            }
        },
        {
            "name": "ImGui_SetWindowCollapsedStr",
            "original_fully_qualified_name": "ImGui::SetWindowCollapsed",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "name",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "collapsed",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set named window collapsed state"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 424
            }
        },
        {
            "name": "ImGui_SetWindowFocusStr",
            "original_fully_qualified_name": "ImGui::SetWindowFocus",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "name",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set named window to be focused / top-most. use NULL to remove focus."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 425
            }
        },
        {
            "name": "ImGui_GetScrollX",
            "original_fully_qualified_name": "ImGui::GetScrollX",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Windows Scrolling",
                    "// - Any change of Scroll will be applied at the beginning of next frame in the first call to Begin().",
                    "// - You may instead use SetNextWindowScroll() prior to calling Begin() to avoid this delay, as an alternative to using SetScrollX()/SetScrollY()."
                ],
                "attached": "// get scrolling amount [0 .. GetScrollMaxX()]"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 430
            }
        },
        {
            "name": "ImGui_GetScrollY",
            "original_fully_qualified_name": "ImGui::GetScrollY",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get scrolling amount [0 .. GetScrollMaxY()]"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 431
            }
        },
        {
            "name": "ImGui_SetScrollX",
            "original_fully_qualified_name": "ImGui::SetScrollX",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "scroll_x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set scrolling amount [0 .. GetScrollMaxX()]"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 432
            }
        },
        {
            "name": "ImGui_SetScrollY",
            "original_fully_qualified_name": "ImGui::SetScrollY",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "scroll_y",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set scrolling amount [0 .. GetScrollMaxY()]"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 433
            }
        },
        {
            "name": "ImGui_GetScrollMaxX",
            "original_fully_qualified_name": "ImGui::GetScrollMaxX",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 434
            }
        },
        {
            "name": "ImGui_GetScrollMaxY",
            "original_fully_qualified_name": "ImGui::GetScrollMaxY",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 435
            }
        },
        {
            "name": "ImGui_SetScrollHereX",
            "original_fully_qualified_name": "ImGui::SetScrollHereX",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "center_x_ratio",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.5f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 436
            }
        },
        {
            "name": "ImGui_SetScrollHereY",
            "original_fully_qualified_name": "ImGui::SetScrollHereY",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "center_y_ratio",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.5f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 437
            }
        },
        {
            "name": "ImGui_SetScrollFromPosX",
            "original_fully_qualified_name": "ImGui::SetScrollFromPosX",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "local_x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "center_x_ratio",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.5f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 438
            }
        },
        {
            "name": "ImGui_SetScrollFromPosY",
            "original_fully_qualified_name": "ImGui::SetScrollFromPosY",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "local_y",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "center_y_ratio",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.5f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 439
            }
        },
        {
            "name": "ImGui_PushFont",
            "original_fully_qualified_name": "ImGui::PushFont",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "font",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Parameters stacks (shared)"
                ],
                "attached": "// use NULL as a shortcut to push default font"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 442
            }
        },
        {
            "name": "ImGui_PopFont",
            "original_fully_qualified_name": "ImGui::PopFont",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 443
            }
        },
        {
            "name": "ImGui_PushStyleColor",
            "original_fully_qualified_name": "ImGui::PushStyleColor",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImGuiCol",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCol"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// modify a style color. always use this if you modify the style after NewFrame()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 444
            }
        },
        {
            "name": "ImGui_PushStyleColorImVec4",
            "original_fully_qualified_name": "ImGui::PushStyleColor",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImGuiCol",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCol"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 445
            }
        },
        {
            "name": "ImGui_PopStyleColor",
            "original_fully_qualified_name": "ImGui::PopStyleColor",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 446
            }
        },
        {
            "name": "ImGui_PushStyleVar",
            "original_fully_qualified_name": "ImGui::PushStyleVar",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImGuiStyleVar",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiStyleVar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "val",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// modify a style float variable. always use this if you modify the style after NewFrame()!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 447
            }
        },
        {
            "name": "ImGui_PushStyleVarImVec2",
            "original_fully_qualified_name": "ImGui::PushStyleVar",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImGuiStyleVar",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiStyleVar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "val",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// modify a style ImVec2 variable. \""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 448
            }
        },
        {
            "name": "ImGui_PushStyleVarX",
            "original_fully_qualified_name": "ImGui::PushStyleVarX",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImGuiStyleVar",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiStyleVar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "val_x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// modify X component of a style ImVec2 variable. \""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 449
            }
        },
        {
            "name": "ImGui_PushStyleVarY",
            "original_fully_qualified_name": "ImGui::PushStyleVarY",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImGuiStyleVar",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiStyleVar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "val_y",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// modify Y component of a style ImVec2 variable. \""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 450
            }
        },
        {
            "name": "ImGui_PopStyleVar",
            "original_fully_qualified_name": "ImGui::PopStyleVar",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 451
            }
        },
        {
            "name": "ImGui_PushItemFlag",
            "original_fully_qualified_name": "ImGui::PushItemFlag",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "option",
                    "type": {
                        "declaration": "ImGuiItemFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiItemFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "enabled",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// modify specified shared item flag, e.g. PushItemFlag(ImGuiItemFlags_NoTabStop, true)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 452
            }
        },
        {
            "name": "ImGui_PopItemFlag",
            "original_fully_qualified_name": "ImGui::PopItemFlag",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 453
            }
        },
        {
            "name": "ImGui_PushItemWidth",
            "original_fully_qualified_name": "ImGui::PushItemWidth",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "item_width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Parameters stacks (current window)"
                ],
                "attached": "// push width of items for common large \"item+label\" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 456
            }
        },
        {
            "name": "ImGui_PopItemWidth",
            "original_fully_qualified_name": "ImGui::PopItemWidth",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 457
            }
        },
        {
            "name": "ImGui_SetNextItemWidth",
            "original_fully_qualified_name": "ImGui::SetNextItemWidth",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "item_width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set width of the _next_ common large \"item+label\" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 458
            }
        },
        {
            "name": "ImGui_CalcItemWidth",
            "original_fully_qualified_name": "ImGui::CalcItemWidth",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 459
            }
        },
        {
            "name": "ImGui_PushTextWrapPos",
            "original_fully_qualified_name": "ImGui::PushTextWrapPos",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "wrap_local_pos_x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 460
            }
        },
        {
            "name": "ImGui_PopTextWrapPos",
            "original_fully_qualified_name": "ImGui::PopTextWrapPos",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 461
            }
        },
        {
            "name": "ImGui_GetFont",
            "original_fully_qualified_name": "ImGui::GetFont",
            "return_type": {
                "declaration": "ImFont*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImFont"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Style read access",
                    "// - Use the ShowStyleEditor() function to interactively see/edit the colors."
                ],
                "attached": "// get current font"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 465
            }
        },
        {
            "name": "ImGui_GetFontSize",
            "original_fully_qualified_name": "ImGui::GetFontSize",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get current font size (= height in pixels) of current font with current scale applied"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 466
            }
        },
        {
            "name": "ImGui_GetFontTexUvWhitePixel",
            "original_fully_qualified_name": "ImGui::GetFontTexUvWhitePixel",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get UV coordinate for a white pixel, useful to draw custom shapes via the ImDrawList API"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 467
            }
        },
        {
            "name": "ImGui_GetColorU32",
            "original_fully_qualified_name": "ImGui::GetColorU32",
            "return_type": {
                "declaration": "ImU32",
                "description": {
                    "kind": "User",
                    "name": "ImU32"
                }
            },
            "arguments": [
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImGuiCol",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCol"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "alpha_mul",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 468
            }
        },
        {
            "name": "ImGui_GetColorU32ImVec4",
            "original_fully_qualified_name": "ImGui::GetColorU32",
            "return_type": {
                "declaration": "ImU32",
                "description": {
                    "kind": "User",
                    "name": "ImU32"
                }
            },
            "arguments": [
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 469
            }
        },
        {
            "name": "ImGui_GetColorU32ImU32",
            "original_fully_qualified_name": "ImGui::GetColorU32",
            "return_type": {
                "declaration": "ImU32",
                "description": {
                    "kind": "User",
                    "name": "ImU32"
                }
            },
            "arguments": [
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "alpha_mul",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 470
            }
        },
        {
            "name": "ImGui_GetStyleColorVec4",
            "original_fully_qualified_name": "ImGui::GetStyleColorVec4",
            "return_type": {
                "declaration": "const ImVec4*",
                "description": {
                    "kind": "Pointer",
                    "is_nullable": false,
                    "inner_type": {
                        "kind": "User",
                        "name": "ImVec4",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImGuiCol",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCol"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 471
            }
        },
        {
            "name": "ImGui_GetCursorScreenPos",
            "original_fully_qualified_name": "ImGui::GetCursorScreenPos",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Layout cursor positioning",
                    "// - By \"cursor\" we mean the current output position.",
                    "// - The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down.",
                    "// - You can call SameLine() between widgets to undo the last carriage return and output at the right of the preceding widget.",
                    "// - YOU CAN DO 99% OF WHAT YOU NEED WITH ONLY GetCursorScreenPos() and GetContentRegionAvail().",
                    "// - Attention! We currently have inconsistencies between window-local and absolute positions we will aim to fix with future API:",
                    "//    - Absolute coordinate:        GetCursorScreenPos(), SetCursorScreenPos(), all ImDrawList:: functions. -> this is the preferred way forward.",
                    "//    - Window-local coordinates:   SameLine(offset), GetCursorPos(), SetCursorPos(), GetCursorStartPos(), PushTextWrapPos()",
                    "//    - Window-local coordinates:   GetContentRegionMax(), GetWindowContentRegionMin(), GetWindowContentRegionMax() --> all obsoleted. YOU DON'T NEED THEM.",
                    "// - GetCursorScreenPos() = GetCursorPos() + GetWindowPos(). GetWindowPos() is almost only ever useful to convert from window-local to absolute coordinates. Try not to use it."
                ],
                "attached": "// cursor position, absolute coordinates. THIS IS YOUR BEST FRIEND (prefer using this rather than GetCursorPos(), also more useful to work with ImDrawList API)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 483
            }
        },
        {
            "name": "ImGui_SetCursorScreenPos",
            "original_fully_qualified_name": "ImGui::SetCursorScreenPos",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// cursor position, absolute coordinates. THIS IS YOUR BEST FRIEND."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 484
            }
        },
        {
            "name": "ImGui_GetContentRegionAvail",
            "original_fully_qualified_name": "ImGui::GetContentRegionAvail",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// available space from current position. THIS IS YOUR BEST FRIEND."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 485
            }
        },
        {
            "name": "ImGui_GetCursorPos",
            "original_fully_qualified_name": "ImGui::GetCursorPos",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// [window-local] cursor position in window-local coordinates. This is not your best friend."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 486
            }
        },
        {
            "name": "ImGui_GetCursorPosX",
            "original_fully_qualified_name": "ImGui::GetCursorPosX",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// [window-local] \""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 487
            }
        },
        {
            "name": "ImGui_GetCursorPosY",
            "original_fully_qualified_name": "ImGui::GetCursorPosY",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// [window-local] \""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 488
            }
        },
        {
            "name": "ImGui_SetCursorPos",
            "original_fully_qualified_name": "ImGui::SetCursorPos",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "local_pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// [window-local] \""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 489
            }
        },
        {
            "name": "ImGui_SetCursorPosX",
            "original_fully_qualified_name": "ImGui::SetCursorPosX",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "local_x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// [window-local] \""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 490
            }
        },
        {
            "name": "ImGui_SetCursorPosY",
            "original_fully_qualified_name": "ImGui::SetCursorPosY",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "local_y",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// [window-local] \""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 491
            }
        },
        {
            "name": "ImGui_GetCursorStartPos",
            "original_fully_qualified_name": "ImGui::GetCursorStartPos",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// [window-local] initial cursor position, in window-local coordinates. Call GetCursorScreenPos() after Begin() to get the absolute coordinates version."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 492
            }
        },
        {
            "name": "ImGui_Separator",
            "original_fully_qualified_name": "ImGui::Separator",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Other layout functions"
                ],
                "attached": "// separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 495
            }
        },
        {
            "name": "ImGui_SameLine",
            "original_fully_qualified_name": "ImGui::SameLine",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "offset_from_start_x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "spacing",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// call between widgets or groups to layout them horizontally. X position given in window coordinates."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 496
            }
        },
        {
            "name": "ImGui_NewLine",
            "original_fully_qualified_name": "ImGui::NewLine",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// undo a SameLine() or force a new line when in a horizontal-layout context."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 497
            }
        },
        {
            "name": "ImGui_Spacing",
            "original_fully_qualified_name": "ImGui::Spacing",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// add vertical spacing."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 498
            }
        },
        {
            "name": "ImGui_Dummy",
            "original_fully_qualified_name": "ImGui::Dummy",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 499
            }
        },
        {
            "name": "ImGui_Indent",
            "original_fully_qualified_name": "ImGui::Indent",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "indent_w",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 500
            }
        },
        {
            "name": "ImGui_Unindent",
            "original_fully_qualified_name": "ImGui::Unindent",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "indent_w",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 501
            }
        },
        {
            "name": "ImGui_BeginGroup",
            "original_fully_qualified_name": "ImGui::BeginGroup",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// lock horizontal starting position"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 502
            }
        },
        {
            "name": "ImGui_EndGroup",
            "original_fully_qualified_name": "ImGui::EndGroup",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// unlock horizontal starting position + capture the whole group bounding box into one \"item\" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 503
            }
        },
        {
            "name": "ImGui_AlignTextToFramePadding",
            "original_fully_qualified_name": "ImGui::AlignTextToFramePadding",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 504
            }
        },
        {
            "name": "ImGui_GetTextLineHeight",
            "original_fully_qualified_name": "ImGui::GetTextLineHeight",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// ~ FontSize"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 505
            }
        },
        {
            "name": "ImGui_GetTextLineHeightWithSpacing",
            "original_fully_qualified_name": "ImGui::GetTextLineHeightWithSpacing",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 506
            }
        },
        {
            "name": "ImGui_GetFrameHeight",
            "original_fully_qualified_name": "ImGui::GetFrameHeight",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// ~ FontSize + style.FramePadding.y * 2"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 507
            }
        },
        {
            "name": "ImGui_GetFrameHeightWithSpacing",
            "original_fully_qualified_name": "ImGui::GetFrameHeightWithSpacing",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 508
            }
        },
        {
            "name": "ImGui_PushID",
            "original_fully_qualified_name": "ImGui::PushID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// ID stack/scopes",
                    "// Read the FAQ (docs/FAQ.md or http://dearimgui.com/faq) for more details about how ID are handled in dear imgui.",
                    "// - Those questions are answered and impacted by understanding of the ID stack system:",
                    "//   - \"Q: Why is my widget not reacting when I click on it?\"",
                    "//   - \"Q: How can I have widgets with an empty label?\"",
                    "//   - \"Q: How can I have multiple widgets with the same label?\"",
                    "// - Short version: ID are hashes of the entire ID stack. If you are creating widgets in a loop you most likely",
                    "//   want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.",
                    "// - You can also use the \"Label##foobar\" syntax within widget label to distinguish them from each others.",
                    "// - In this header file we use the \"label\"/\"name\" terminology to denote a string that will be displayed + used as an ID,",
                    "//   whereas \"str_id\" denote a string that is only used as an ID and not normally displayed."
                ],
                "attached": "// push string into the ID stack (will hash string)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 521
            }
        },
        {
            "name": "ImGui_PushIDStr",
            "original_fully_qualified_name": "ImGui::PushID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "str_id_begin",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "str_id_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// push string into the ID stack (will hash string)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 522
            }
        },
        {
            "name": "ImGui_PushIDPtr",
            "original_fully_qualified_name": "ImGui::PushID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "ptr_id",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// push pointer into the ID stack (will hash pointer)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 523
            }
        },
        {
            "name": "ImGui_PushIDInt",
            "original_fully_qualified_name": "ImGui::PushID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "int_id",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// push integer into the ID stack (will hash integer)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 524
            }
        },
        {
            "name": "ImGui_PopID",
            "original_fully_qualified_name": "ImGui::PopID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// pop from the ID stack."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 525
            }
        },
        {
            "name": "ImGui_GetID",
            "original_fully_qualified_name": "ImGui::GetID",
            "return_type": {
                "declaration": "ImGuiID",
                "description": {
                    "kind": "User",
                    "name": "ImGuiID"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 526
            }
        },
        {
            "name": "ImGui_GetIDStr",
            "original_fully_qualified_name": "ImGui::GetID",
            "return_type": {
                "declaration": "ImGuiID",
                "description": {
                    "kind": "User",
                    "name": "ImGuiID"
                }
            },
            "arguments": [
                {
                    "name": "str_id_begin",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "str_id_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 527
            }
        },
        {
            "name": "ImGui_GetIDPtr",
            "original_fully_qualified_name": "ImGui::GetID",
            "return_type": {
                "declaration": "ImGuiID",
                "description": {
                    "kind": "User",
                    "name": "ImGuiID"
                }
            },
            "arguments": [
                {
                    "name": "ptr_id",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 528
            }
        },
        {
            "name": "ImGui_GetIDInt",
            "original_fully_qualified_name": "ImGui::GetID",
            "return_type": {
                "declaration": "ImGuiID",
                "description": {
                    "kind": "User",
                    "name": "ImGuiID"
                }
            },
            "arguments": [
                {
                    "name": "int_id",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 529
            }
        },
        {
            "name": "ImGui_TextUnformatted",
            "original_fully_qualified_name": "ImGui::TextUnformatted",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Text"
                ],
                "attached": "// raw text without formatting. Roughly equivalent to Text(\"%s\", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 532
            }
        },
        {
            "name": "ImGui_Text",
            "original_fully_qualified_name": "ImGui::Text",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg1__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// formatted text"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 533
            }
        },
        {
            "name": "ImGui_TextV",
            "original_fully_qualified_name": "ImGui::TextV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 534
            }
        },
        {
            "name": "ImGui_TextColored",
            "original_fully_qualified_name": "ImGui::TextColored",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg2__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 535
            }
        },
        {
            "name": "ImGui_TextColoredV",
            "original_fully_qualified_name": "ImGui::TextColoredV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 536
            }
        },
        {
            "name": "ImGui_TextDisabled",
            "original_fully_qualified_name": "ImGui::TextDisabled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg1__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 537
            }
        },
        {
            "name": "ImGui_TextDisabledV",
            "original_fully_qualified_name": "ImGui::TextDisabledV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 538
            }
        },
        {
            "name": "ImGui_TextWrapped",
            "original_fully_qualified_name": "ImGui::TextWrapped",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg1__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 539
            }
        },
        {
            "name": "ImGui_TextWrappedV",
            "original_fully_qualified_name": "ImGui::TextWrappedV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 540
            }
        },
        {
            "name": "ImGui_LabelText",
            "original_fully_qualified_name": "ImGui::LabelText",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg2__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// display text+label aligned the same way as value+label widgets"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 541
            }
        },
        {
            "name": "ImGui_LabelTextV",
            "original_fully_qualified_name": "ImGui::LabelTextV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 542
            }
        },
        {
            "name": "ImGui_BulletText",
            "original_fully_qualified_name": "ImGui::BulletText",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg1__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// shortcut for Bullet()+Text()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 543
            }
        },
        {
            "name": "ImGui_BulletTextV",
            "original_fully_qualified_name": "ImGui::BulletTextV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 544
            }
        },
        {
            "name": "ImGui_SeparatorText",
            "original_fully_qualified_name": "ImGui::SeparatorText",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// currently: formatted text with an horizontal line"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 545
            }
        },
        {
            "name": "ImGui_Button",
            "original_fully_qualified_name": "ImGui::Button",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Main",
                    "// - Most widgets return true when the value has been changed or when pressed/selected",
                    "// - You may also use one of the many IsItemXXX functions (e.g. IsItemActive, IsItemHovered, etc.) to query widget state."
                ],
                "attached": "// button"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 550
            }
        },
        {
            "name": "ImGui_SmallButton",
            "original_fully_qualified_name": "ImGui::SmallButton",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// button with (FramePadding.y == 0) to easily embed within text"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 551
            }
        },
        {
            "name": "ImGui_InvisibleButton",
            "original_fully_qualified_name": "ImGui::InvisibleButton",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiButtonFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiButtonFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 552
            }
        },
        {
            "name": "ImGui_ArrowButton",
            "original_fully_qualified_name": "ImGui::ArrowButton",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "dir",
                    "type": {
                        "declaration": "ImGuiDir",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDir"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// square button with an arrow shape"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 553
            }
        },
        {
            "name": "ImGui_Checkbox",
            "original_fully_qualified_name": "ImGui::Checkbox",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 554
            }
        },
        {
            "name": "ImGui_CheckboxFlagsIntPtr",
            "original_fully_qualified_name": "ImGui::CheckboxFlags",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags_value",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 555
            }
        },
        {
            "name": "ImGui_CheckboxFlagsUintPtr",
            "original_fully_qualified_name": "ImGui::CheckboxFlags",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "unsigned int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "unsigned_int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags_value",
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 556
            }
        },
        {
            "name": "ImGui_RadioButton",
            "original_fully_qualified_name": "ImGui::RadioButton",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "active",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// use with e.g. if (RadioButton(\"one\", my_value==1)) { my_value = 1; }"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 557
            }
        },
        {
            "name": "ImGui_RadioButtonIntPtr",
            "original_fully_qualified_name": "ImGui::RadioButton",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_button",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// shortcut to handle the above pattern when value is an integer"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 558
            }
        },
        {
            "name": "ImGui_ProgressBar",
            "original_fully_qualified_name": "ImGui::ProgressBar",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fraction",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size_arg",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(-FLT_MIN, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "overlay",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 559
            }
        },
        {
            "name": "ImGui_Bullet",
            "original_fully_qualified_name": "ImGui::Bullet",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 560
            }
        },
        {
            "name": "ImGui_TextLink",
            "original_fully_qualified_name": "ImGui::TextLink",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// hyperlink text button, return true when clicked"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 561
            }
        },
        {
            "name": "ImGui_TextLinkOpenURL",
            "original_fully_qualified_name": "ImGui::TextLinkOpenURL",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "url",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// hyperlink text button, automatically open file/url when clicked"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 562
            }
        },
        {
            "name": "ImGui_Image",
            "original_fully_qualified_name": "ImGui::Image",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "user_texture_id",
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "image_size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv0",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "uv1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(1, 1)",
                    "is_instance_pointer": false
                },
                {
                    "name": "tint_col",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec4(1, 1, 1, 1)",
                    "is_instance_pointer": false
                },
                {
                    "name": "border_col",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec4(0, 0, 0, 0)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Images",
                    "// - Read about ImTextureID here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples",
                    "// - 'uv0' and 'uv1' are texture coordinates. Read about them from the same link above.",
                    "// - Note that Image() may add +2.0f to provided size if a border is visible, ImageButton() adds style.FramePadding*2.0f to provided size.",
                    "// - ImageButton() draws a background based on regular Button() color + optionally an inner background if specified."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 569
            }
        },
        {
            "name": "ImGui_ImageButton",
            "original_fully_qualified_name": "ImGui::ImageButton",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "user_texture_id",
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "image_size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv0",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "uv1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(1, 1)",
                    "is_instance_pointer": false
                },
                {
                    "name": "bg_col",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec4(0, 0, 0, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "tint_col",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec4(1, 1, 1, 1)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 570
            }
        },
        {
            "name": "ImGui_BeginCombo",
            "original_fully_qualified_name": "ImGui::BeginCombo",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "preview_value",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiComboFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiComboFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Combo Box (Dropdown)",
                    "// - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.",
                    "// - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose. This is analogous to how ListBox are created."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 575
            }
        },
        {
            "name": "ImGui_EndCombo",
            "original_fully_qualified_name": "ImGui::EndCombo",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndCombo() if BeginCombo() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 576
            }
        },
        {
            "name": "ImGui_ComboChar",
            "original_fully_qualified_name": "ImGui::Combo",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "current_item",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "items",
                    "type": {
                        "declaration": "const char*const[]",
                        "description": {
                            "kind": "Array",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Builtin",
                                    "builtin_type": "char",
                                    "storage_classes": [
                                        "const"
                                    ]
                                },
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "",
                    "is_instance_pointer": false
                },
                {
                    "name": "items_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "popup_max_height_in_items",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 577
            }
        },
        {
            "name": "ImGui_Combo",
            "original_fully_qualified_name": "ImGui::Combo",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "current_item",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "items_separated_by_zeros",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "popup_max_height_in_items",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Separate items with \\0 within a string, end item-list with \\0\\0. e.g. \"One\\0Two\\0Three\\0\""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 578
            }
        },
        {
            "name": "ImGui_ComboCallback",
            "original_fully_qualified_name": "ImGui::Combo",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "current_item",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "getter",
                    "type": {
                        "declaration": "const char* (*getter)(void* user_data, int idx)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "const char*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "char",
                                        "storage_classes": [
                                            "const"
                                        ]
                                    }
                                }
                            },
                            "arguments": [
                                {
                                    "name": "user_data",
                                    "type": {
                                        "declaration": "void*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "void"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "idx",
                                    "type": {
                                        "declaration": "int",
                                        "description": {
                                            "kind": "Builtin",
                                            "builtin_type": "int"
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "getter",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "Builtin",
                                            "builtin_type": "char",
                                            "storage_classes": [
                                                "const"
                                            ]
                                        }
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "user_data",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "void"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "idx",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "int"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "user_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "items_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "popup_max_height_in_items",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 579
            }
        },
        {
            "name": "ImGui_DragFloat",
            "original_fully_qualified_name": "ImGui::DragFloat",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Drag Sliders",
                    "// - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp.",
                    "// - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every function, note that a 'float v[X]' function argument is the same as 'float* v',",
                    "//   the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x",
                    "// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. \"%.3f\" -> 1.234; \"%5.2f secs\" -> 01.23 secs; \"Biscuit: %.0f\" -> Biscuit: 1; etc.",
                    "// - Format string may also be set to NULL or use the default format (\"%f\" or \"%d\").",
                    "// - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For keyboard/gamepad navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).",
                    "// - Use v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual input can override those limits if ImGuiSliderFlags_AlwaysClamp is not used.",
                    "// - Use v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with v_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.",
                    "// - We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.",
                    "// - Legacy: Pre-1.78 there are DragXXX() function signatures that take a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.",
                    "//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361"
                ],
                "attached": "// If v_min >= v_max we have no bound"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 593
            }
        },
        {
            "name": "ImGui_DragFloat2",
            "original_fully_qualified_name": "ImGui::DragFloat2",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float[2]",
                        "description": {
                            "kind": "Array",
                            "bounds": "2",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "2",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 594
            }
        },
        {
            "name": "ImGui_DragFloat3",
            "original_fully_qualified_name": "ImGui::DragFloat3",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float[3]",
                        "description": {
                            "kind": "Array",
                            "bounds": "3",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "3",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 595
            }
        },
        {
            "name": "ImGui_DragFloat4",
            "original_fully_qualified_name": "ImGui::DragFloat4",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float[4]",
                        "description": {
                            "kind": "Array",
                            "bounds": "4",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "4",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 596
            }
        },
        {
            "name": "ImGui_DragFloatRange2",
            "original_fully_qualified_name": "ImGui::DragFloatRange2",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_current_min",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_current_max",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "format_max",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 597
            }
        },
        {
            "name": "ImGui_DragInt",
            "original_fully_qualified_name": "ImGui::DragInt",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%d\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// If v_min >= v_max we have no bound"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 598
            }
        },
        {
            "name": "ImGui_DragInt2",
            "original_fully_qualified_name": "ImGui::DragInt2",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int[2]",
                        "description": {
                            "kind": "Array",
                            "bounds": "2",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "2",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%d\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 599
            }
        },
        {
            "name": "ImGui_DragInt3",
            "original_fully_qualified_name": "ImGui::DragInt3",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int[3]",
                        "description": {
                            "kind": "Array",
                            "bounds": "3",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "3",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%d\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 600
            }
        },
        {
            "name": "ImGui_DragInt4",
            "original_fully_qualified_name": "ImGui::DragInt4",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int[4]",
                        "description": {
                            "kind": "Array",
                            "bounds": "4",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "4",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%d\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 601
            }
        },
        {
            "name": "ImGui_DragIntRange2",
            "original_fully_qualified_name": "ImGui::DragIntRange2",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_current_min",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_current_max",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%d\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "format_max",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 602
            }
        },
        {
            "name": "ImGui_DragScalar",
            "original_fully_qualified_name": "ImGui::DragScalar",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "data_type",
                    "type": {
                        "declaration": "ImGuiDataType",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDataType"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "p_min",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "p_max",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 603
            }
        },
        {
            "name": "ImGui_DragScalarN",
            "original_fully_qualified_name": "ImGui::DragScalarN",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "data_type",
                    "type": {
                        "declaration": "ImGuiDataType",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDataType"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "components",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_speed",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "p_min",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "p_max",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 604
            }
        },
        {
            "name": "ImGui_SliderFloat",
            "original_fully_qualified_name": "ImGui::SliderFloat",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Regular Sliders",
                    "// - CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp.",
                    "// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. \"%.3f\" -> 1.234; \"%5.2f secs\" -> 01.23 secs; \"Biscuit: %.0f\" -> Biscuit: 1; etc.",
                    "// - Format string may also be set to NULL or use the default format (\"%f\" or \"%d\").",
                    "// - Legacy: Pre-1.78 there are SliderXXX() function signatures that take a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.",
                    "//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361"
                ],
                "attached": "// adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 612
            }
        },
        {
            "name": "ImGui_SliderFloat2",
            "original_fully_qualified_name": "ImGui::SliderFloat2",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float[2]",
                        "description": {
                            "kind": "Array",
                            "bounds": "2",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "2",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 613
            }
        },
        {
            "name": "ImGui_SliderFloat3",
            "original_fully_qualified_name": "ImGui::SliderFloat3",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float[3]",
                        "description": {
                            "kind": "Array",
                            "bounds": "3",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "3",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 614
            }
        },
        {
            "name": "ImGui_SliderFloat4",
            "original_fully_qualified_name": "ImGui::SliderFloat4",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float[4]",
                        "description": {
                            "kind": "Array",
                            "bounds": "4",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "4",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 615
            }
        },
        {
            "name": "ImGui_SliderAngle",
            "original_fully_qualified_name": "ImGui::SliderAngle",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_rad",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_degrees_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-360.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_degrees_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "+360.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.0f deg\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 616
            }
        },
        {
            "name": "ImGui_SliderInt",
            "original_fully_qualified_name": "ImGui::SliderInt",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%d\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 617
            }
        },
        {
            "name": "ImGui_SliderInt2",
            "original_fully_qualified_name": "ImGui::SliderInt2",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int[2]",
                        "description": {
                            "kind": "Array",
                            "bounds": "2",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "2",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%d\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 618
            }
        },
        {
            "name": "ImGui_SliderInt3",
            "original_fully_qualified_name": "ImGui::SliderInt3",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int[3]",
                        "description": {
                            "kind": "Array",
                            "bounds": "3",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "3",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%d\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 619
            }
        },
        {
            "name": "ImGui_SliderInt4",
            "original_fully_qualified_name": "ImGui::SliderInt4",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int[4]",
                        "description": {
                            "kind": "Array",
                            "bounds": "4",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "4",
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%d\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 620
            }
        },
        {
            "name": "ImGui_SliderScalar",
            "original_fully_qualified_name": "ImGui::SliderScalar",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "data_type",
                    "type": {
                        "declaration": "ImGuiDataType",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDataType"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_min",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_max",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 621
            }
        },
        {
            "name": "ImGui_SliderScalarN",
            "original_fully_qualified_name": "ImGui::SliderScalarN",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "data_type",
                    "type": {
                        "declaration": "ImGuiDataType",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDataType"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "components",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_min",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_max",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 622
            }
        },
        {
            "name": "ImGui_VSliderFloat",
            "original_fully_qualified_name": "ImGui::VSliderFloat",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 623
            }
        },
        {
            "name": "ImGui_VSliderInt",
            "original_fully_qualified_name": "ImGui::VSliderInt",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_min",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v_max",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%d\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 624
            }
        },
        {
            "name": "ImGui_VSliderScalar",
            "original_fully_qualified_name": "ImGui::VSliderScalar",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "data_type",
                    "type": {
                        "declaration": "ImGuiDataType",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDataType"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_min",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_max",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSliderFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSliderFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 625
            }
        },
        {
            "name": "ImGui_InputText",
            "original_fully_qualified_name": "ImGui::InputText",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "buf",
                    "type": {
                        "declaration": "char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "buf_size",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "callback",
                    "type": {
                        "declaration": "ImGuiInputTextCallback",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextCallback"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "user_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Input with Keyboard",
                    "// - If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.",
                    "// - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 630
            }
        },
        {
            "name": "ImGui_InputTextMultiline",
            "original_fully_qualified_name": "ImGui::InputTextMultiline",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "buf",
                    "type": {
                        "declaration": "char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "buf_size",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "callback",
                    "type": {
                        "declaration": "ImGuiInputTextCallback",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextCallback"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "user_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 631
            }
        },
        {
            "name": "ImGui_InputTextWithHint",
            "original_fully_qualified_name": "ImGui::InputTextWithHint",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "hint",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "buf",
                    "type": {
                        "declaration": "char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "buf_size",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "callback",
                    "type": {
                        "declaration": "ImGuiInputTextCallback",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextCallback"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "user_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 632
            }
        },
        {
            "name": "ImGui_InputFloat",
            "original_fully_qualified_name": "ImGui::InputFloat",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "step",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "step_fast",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 633
            }
        },
        {
            "name": "ImGui_InputFloat2",
            "original_fully_qualified_name": "ImGui::InputFloat2",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float[2]",
                        "description": {
                            "kind": "Array",
                            "bounds": "2",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "2",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 634
            }
        },
        {
            "name": "ImGui_InputFloat3",
            "original_fully_qualified_name": "ImGui::InputFloat3",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float[3]",
                        "description": {
                            "kind": "Array",
                            "bounds": "3",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "3",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 635
            }
        },
        {
            "name": "ImGui_InputFloat4",
            "original_fully_qualified_name": "ImGui::InputFloat4",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float[4]",
                        "description": {
                            "kind": "Array",
                            "bounds": "4",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "4",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.3f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 636
            }
        },
        {
            "name": "ImGui_InputInt",
            "original_fully_qualified_name": "ImGui::InputInt",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "step",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1",
                    "is_instance_pointer": false
                },
                {
                    "name": "step_fast",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "100",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 637
            }
        },
        {
            "name": "ImGui_InputInt2",
            "original_fully_qualified_name": "ImGui::InputInt2",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int[2]",
                        "description": {
                            "kind": "Array",
                            "bounds": "2",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "2",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 638
            }
        },
        {
            "name": "ImGui_InputInt3",
            "original_fully_qualified_name": "ImGui::InputInt3",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int[3]",
                        "description": {
                            "kind": "Array",
                            "bounds": "3",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "3",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 639
            }
        },
        {
            "name": "ImGui_InputInt4",
            "original_fully_qualified_name": "ImGui::InputInt4",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "int[4]",
                        "description": {
                            "kind": "Array",
                            "bounds": "4",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "4",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 640
            }
        },
        {
            "name": "ImGui_InputDouble",
            "original_fully_qualified_name": "ImGui::InputDouble",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "double*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "double"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "step",
                    "type": {
                        "declaration": "double",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "double"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0",
                    "is_instance_pointer": false
                },
                {
                    "name": "step_fast",
                    "type": {
                        "declaration": "double",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "double"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"%.6f\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 641
            }
        },
        {
            "name": "ImGui_InputScalar",
            "original_fully_qualified_name": "ImGui::InputScalar",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "data_type",
                    "type": {
                        "declaration": "ImGuiDataType",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDataType"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_step",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "p_step_fast",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 642
            }
        },
        {
            "name": "ImGui_InputScalarN",
            "original_fully_qualified_name": "ImGui::InputScalarN",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "data_type",
                    "type": {
                        "declaration": "ImGuiDataType",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDataType"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "components",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_step",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "p_step_fast",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "format",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputTextFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputTextFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 643
            }
        },
        {
            "name": "ImGui_ColorEdit3",
            "original_fully_qualified_name": "ImGui::ColorEdit3",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "float[3]",
                        "description": {
                            "kind": "Array",
                            "bounds": "3",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "3",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiColorEditFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiColorEditFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)",
                    "// - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.",
                    "// - You can pass the address of a first float element out of a contiguous structure, e.g. &myvector.x"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 648
            }
        },
        {
            "name": "ImGui_ColorEdit4",
            "original_fully_qualified_name": "ImGui::ColorEdit4",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "float[4]",
                        "description": {
                            "kind": "Array",
                            "bounds": "4",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "4",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiColorEditFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiColorEditFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 649
            }
        },
        {
            "name": "ImGui_ColorPicker3",
            "original_fully_qualified_name": "ImGui::ColorPicker3",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "float[3]",
                        "description": {
                            "kind": "Array",
                            "bounds": "3",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "3",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiColorEditFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiColorEditFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 650
            }
        },
        {
            "name": "ImGui_ColorPicker4",
            "original_fully_qualified_name": "ImGui::ColorPicker4",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "float[4]",
                        "description": {
                            "kind": "Array",
                            "bounds": "4",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "4",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiColorEditFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiColorEditFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "ref_col",
                    "type": {
                        "declaration": "const float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 651
            }
        },
        {
            "name": "ImGui_ColorButton",
            "original_fully_qualified_name": "ImGui::ColorButton",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "desc_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiColorEditFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiColorEditFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// display a color square/button, hover for details, return true when pressed."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 652
            }
        },
        {
            "name": "ImGui_SetColorEditOptions",
            "original_fully_qualified_name": "ImGui::SetColorEditOptions",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiColorEditFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiColorEditFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 653
            }
        },
        {
            "name": "ImGui_TreeNode",
            "original_fully_qualified_name": "ImGui::TreeNode",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Trees",
                    "// - TreeNode functions return true when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 657
            }
        },
        {
            "name": "ImGui_TreeNodeStr",
            "original_fully_qualified_name": "ImGui::TreeNode",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg2__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 658
            }
        },
        {
            "name": "ImGui_TreeNodePtr",
            "original_fully_qualified_name": "ImGui::TreeNode",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "ptr_id",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg2__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// \""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 659
            }
        },
        {
            "name": "ImGui_TreeNodeV",
            "original_fully_qualified_name": "ImGui::TreeNodeV",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 660
            }
        },
        {
            "name": "ImGui_TreeNodeVPtr",
            "original_fully_qualified_name": "ImGui::TreeNodeV",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "ptr_id",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 661
            }
        },
        {
            "name": "ImGui_TreeNodeEx",
            "original_fully_qualified_name": "ImGui::TreeNodeEx",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTreeNodeFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTreeNodeFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 662
            }
        },
        {
            "name": "ImGui_TreeNodeExStr",
            "original_fully_qualified_name": "ImGui::TreeNodeEx",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTreeNodeFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTreeNodeFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg3__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 663
            }
        },
        {
            "name": "ImGui_TreeNodeExPtr",
            "original_fully_qualified_name": "ImGui::TreeNodeEx",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "ptr_id",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTreeNodeFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTreeNodeFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg3__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 664
            }
        },
        {
            "name": "ImGui_TreeNodeExV",
            "original_fully_qualified_name": "ImGui::TreeNodeExV",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTreeNodeFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTreeNodeFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 665
            }
        },
        {
            "name": "ImGui_TreeNodeExVPtr",
            "original_fully_qualified_name": "ImGui::TreeNodeExV",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "ptr_id",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTreeNodeFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTreeNodeFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 666
            }
        },
        {
            "name": "ImGui_TreePush",
            "original_fully_qualified_name": "ImGui::TreePush",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// ~ Indent()+PushID(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 667
            }
        },
        {
            "name": "ImGui_TreePushPtr",
            "original_fully_qualified_name": "ImGui::TreePush",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "ptr_id",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// \""
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 668
            }
        },
        {
            "name": "ImGui_TreePop",
            "original_fully_qualified_name": "ImGui::TreePop",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// ~ Unindent()+PopID()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 669
            }
        },
        {
            "name": "ImGui_GetTreeNodeToLabelSpacing",
            "original_fully_qualified_name": "ImGui::GetTreeNodeToLabelSpacing",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 670
            }
        },
        {
            "name": "ImGui_CollapsingHeader",
            "original_fully_qualified_name": "ImGui::CollapsingHeader",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTreeNodeFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTreeNodeFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 671
            }
        },
        {
            "name": "ImGui_CollapsingHeaderBoolPtr",
            "original_fully_qualified_name": "ImGui::CollapsingHeader",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_visible",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTreeNodeFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTreeNodeFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// when 'p_visible != NULL': if '*p_visible==true' display an additional small close button on upper right of the header which will set the bool to false when clicked, if '*p_visible==false' don't display the header."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 672
            }
        },
        {
            "name": "ImGui_SetNextItemOpen",
            "original_fully_qualified_name": "ImGui::SetNextItemOpen",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "is_open",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set next TreeNode/CollapsingHeader open state."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 673
            }
        },
        {
            "name": "ImGui_SetNextItemStorageID",
            "original_fully_qualified_name": "ImGui::SetNextItemStorageID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "storage_id",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set id to use for open/close storage (default to same as item id)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 674
            }
        },
        {
            "name": "ImGui_Selectable",
            "original_fully_qualified_name": "ImGui::Selectable",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "selected",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "false",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSelectableFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSelectableFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Selectables",
                    "// - A selectable highlights when hovered, and can display another color when selected.",
                    "// - Neighbors selectable extend their highlight bounds in order to leave no gap between them. This is so a series of selected Selectable appear contiguous."
                ],
                "attached": "// \"bool selected\" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 679
            }
        },
        {
            "name": "ImGui_SelectableBoolPtr",
            "original_fully_qualified_name": "ImGui::Selectable",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_selected",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiSelectableFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSelectableFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// \"bool* p_selected\" point to the selection state (read-write), as a convenient helper."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 680
            }
        },
        {
            "name": "ImGui_BeginMultiSelect",
            "original_fully_qualified_name": "ImGui::BeginMultiSelect",
            "return_type": {
                "declaration": "ImGuiMultiSelectIO*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiMultiSelectIO"
                    }
                }
            },
            "arguments": [
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiMultiSelectFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMultiSelectFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "selection_size",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                },
                {
                    "name": "items_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Multi-selection system for Selectable(), Checkbox(), TreeNode() functions [BETA]",
                    "// - This enables standard multi-selection/range-selection idioms (CTRL+Mouse/Keyboard, SHIFT+Mouse/Keyboard, etc.) in a way that also allow a clipper to be used.",
                    "// - ImGuiSelectionUserData is often used to store your item index within the current view (but may store something else).",
                    "// - Read comments near ImGuiMultiSelectIO for instructions/details and see 'Demo->Widgets->Selection State & Multi-Select' for demo.",
                    "// - TreeNode() is technically supported but... using this correctly is more complicated. You need some sort of linear/random access to your tree,",
                    "//   which is suited to advanced trees setups already implementing filters and clipper. We will work simplifying the current demo.",
                    "// - 'selection_size' and 'items_count' parameters are optional and used by a few features. If they are costly for you to compute, you may avoid them."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 689
            }
        },
        {
            "name": "ImGui_EndMultiSelect",
            "original_fully_qualified_name": "ImGui::EndMultiSelect",
            "return_type": {
                "declaration": "ImGuiMultiSelectIO*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiMultiSelectIO"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 690
            }
        },
        {
            "name": "ImGui_SetNextItemSelectionUserData",
            "original_fully_qualified_name": "ImGui::SetNextItemSelectionUserData",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "selection_user_data",
                    "type": {
                        "declaration": "ImGuiSelectionUserData",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiSelectionUserData"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 691
            }
        },
        {
            "name": "ImGui_IsItemToggledSelection",
            "original_fully_qualified_name": "ImGui::IsItemToggledSelection",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Was the last item selection state toggled? Useful if you need the per-item information _before_ reaching EndMultiSelect(). We only returns toggle _event_ in order to handle clipping correctly."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 692
            }
        },
        {
            "name": "ImGui_BeginListBox",
            "original_fully_qualified_name": "ImGui::BeginListBox",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: List Boxes",
                    "// - This is essentially a thin wrapper to using BeginChild/EndChild with the ImGuiChildFlags_FrameStyle flag for stylistic changes + displaying a label.",
                    "// - If you don't need a label you can probably simply use BeginChild() with the ImGuiChildFlags_FrameStyle flag for the same result.",
                    "// - You can submit contents and manage your selection state however you want it, by creating e.g. Selectable() or any other items.",
                    "// - The simplified/old ListBox() api are helpers over BeginListBox()/EndListBox() which are kept available for convenience purpose. This is analoguous to how Combos are created.",
                    "// - Choose frame width:   size.x > 0.0f: custom  /  size.x < 0.0f or -FLT_MIN: right-align   /  size.x = 0.0f (default): use current ItemWidth",
                    "// - Choose frame height:  size.y > 0.0f: custom  /  size.y < 0.0f or -FLT_MIN: bottom-align  /  size.y = 0.0f (default): arbitrary default height which can fit ~7 items"
                ],
                "attached": "// open a framed scrolling region"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 701
            }
        },
        {
            "name": "ImGui_EndListBox",
            "original_fully_qualified_name": "ImGui::EndListBox",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndListBox() if BeginListBox() returned true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 702
            }
        },
        {
            "name": "ImGui_ListBox",
            "original_fully_qualified_name": "ImGui::ListBox",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "current_item",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "items",
                    "type": {
                        "declaration": "const char*const[]",
                        "description": {
                            "kind": "Array",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Builtin",
                                    "builtin_type": "char",
                                    "storage_classes": [
                                        "const"
                                    ]
                                },
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "",
                    "is_instance_pointer": false
                },
                {
                    "name": "items_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "height_in_items",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 703
            }
        },
        {
            "name": "ImGui_ListBoxCallback",
            "original_fully_qualified_name": "ImGui::ListBox",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "current_item",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "getter",
                    "type": {
                        "declaration": "const char* (*getter)(void* user_data, int idx)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "const char*",
                                "description": {
                                    "kind": "Pointer",
                                    "inner_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "char",
                                        "storage_classes": [
                                            "const"
                                        ]
                                    }
                                }
                            },
                            "arguments": [
                                {
                                    "name": "user_data",
                                    "type": {
                                        "declaration": "void*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "void"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "idx",
                                    "type": {
                                        "declaration": "int",
                                        "description": {
                                            "kind": "Builtin",
                                            "builtin_type": "int"
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "getter",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Pointer",
                                        "inner_type": {
                                            "kind": "Builtin",
                                            "builtin_type": "char",
                                            "storage_classes": [
                                                "const"
                                            ]
                                        }
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "user_data",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "void"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "idx",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "int"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "user_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "items_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "height_in_items",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 704
            }
        },
        {
            "name": "ImGui_PlotLines",
            "original_fully_qualified_name": "ImGui::PlotLines",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values",
                    "type": {
                        "declaration": "const float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values_offset",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "overlay_text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "scale_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "FLT_MAX",
                    "is_instance_pointer": false
                },
                {
                    "name": "scale_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "FLT_MAX",
                    "is_instance_pointer": false
                },
                {
                    "name": "graph_size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "stride",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "sizeof(float)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Data Plotting",
                    "// - Consider using ImPlot (https://github.com/epezent/implot) which is much better!"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 708
            }
        },
        {
            "name": "ImGui_PlotLinesCallback",
            "original_fully_qualified_name": "ImGui::PlotLines",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values_getter",
                    "type": {
                        "declaration": "float (*values_getter)(void* data, int idx)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "float",
                                "description": {
                                    "kind": "Builtin",
                                    "builtin_type": "float"
                                }
                            },
                            "arguments": [
                                {
                                    "name": "data",
                                    "type": {
                                        "declaration": "void*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "void"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "idx",
                                    "type": {
                                        "declaration": "int",
                                        "description": {
                                            "kind": "Builtin",
                                            "builtin_type": "int"
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "values_getter",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "float"
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "data",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "void"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "idx",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "int"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values_offset",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "overlay_text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "scale_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "FLT_MAX",
                    "is_instance_pointer": false
                },
                {
                    "name": "scale_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "FLT_MAX",
                    "is_instance_pointer": false
                },
                {
                    "name": "graph_size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 709
            }
        },
        {
            "name": "ImGui_PlotHistogram",
            "original_fully_qualified_name": "ImGui::PlotHistogram",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values",
                    "type": {
                        "declaration": "const float*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values_offset",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "overlay_text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "scale_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "FLT_MAX",
                    "is_instance_pointer": false
                },
                {
                    "name": "scale_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "FLT_MAX",
                    "is_instance_pointer": false
                },
                {
                    "name": "graph_size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "stride",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "sizeof(float)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 710
            }
        },
        {
            "name": "ImGui_PlotHistogramCallback",
            "original_fully_qualified_name": "ImGui::PlotHistogram",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values_getter",
                    "type": {
                        "declaration": "float (*values_getter)(void* data, int idx)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "float",
                                "description": {
                                    "kind": "Builtin",
                                    "builtin_type": "float"
                                }
                            },
                            "arguments": [
                                {
                                    "name": "data",
                                    "type": {
                                        "declaration": "void*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "void"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "idx",
                                    "type": {
                                        "declaration": "int",
                                        "description": {
                                            "kind": "Builtin",
                                            "builtin_type": "int"
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "values_getter",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "float"
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "data",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "void"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "idx",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "int"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "values_offset",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "overlay_text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "scale_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "FLT_MAX",
                    "is_instance_pointer": false
                },
                {
                    "name": "scale_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "FLT_MAX",
                    "is_instance_pointer": false
                },
                {
                    "name": "graph_size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 711
            }
        },
        {
            "name": "ImGui_BeginMenuBar",
            "original_fully_qualified_name": "ImGui::BeginMenuBar",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Widgets: Menus",
                    "// - Use BeginMenuBar() on a window ImGuiWindowFlags_MenuBar to append to its menu bar.",
                    "// - Use BeginMainMenuBar() to create a menu bar at the top of the screen and append to it.",
                    "// - Use BeginMenu() to create a menu. You can call BeginMenu() multiple time with the same identifier to append more items to it.",
                    "// - Not that MenuItem() keyboardshortcuts are displayed as a convenience but _not processed_ by Dear ImGui at the moment."
                ],
                "attached": "// append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 725
            }
        },
        {
            "name": "ImGui_EndMenuBar",
            "original_fully_qualified_name": "ImGui::EndMenuBar",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndMenuBar() if BeginMenuBar() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 726
            }
        },
        {
            "name": "ImGui_BeginMainMenuBar",
            "original_fully_qualified_name": "ImGui::BeginMainMenuBar",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// create and append to a full screen menu-bar."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 727
            }
        },
        {
            "name": "ImGui_EndMainMenuBar",
            "original_fully_qualified_name": "ImGui::EndMainMenuBar",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndMainMenuBar() if BeginMainMenuBar() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 728
            }
        },
        {
            "name": "ImGui_BeginMenu",
            "original_fully_qualified_name": "ImGui::BeginMenu",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "enabled",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "true",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// create a sub-menu entry. only call EndMenu() if this returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 729
            }
        },
        {
            "name": "ImGui_EndMenu",
            "original_fully_qualified_name": "ImGui::EndMenu",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndMenu() if BeginMenu() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 730
            }
        },
        {
            "name": "ImGui_MenuItem",
            "original_fully_qualified_name": "ImGui::MenuItem",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "shortcut",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "selected",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "false",
                    "is_instance_pointer": false
                },
                {
                    "name": "enabled",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "true",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return true when activated."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 731
            }
        },
        {
            "name": "ImGui_MenuItemBoolPtr",
            "original_fully_qualified_name": "ImGui::MenuItem",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "shortcut",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_selected",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "enabled",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "true",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return true when activated + toggle (*p_selected) if p_selected != NULL"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 732
            }
        },
        {
            "name": "ImGui_BeginTooltip",
            "original_fully_qualified_name": "ImGui::BeginTooltip",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Tooltips",
                    "// - Tooltips are windows following the mouse. They do not take focus away.",
                    "// - A tooltip window can contain items of any types.",
                    "// - SetTooltip() is more or less a shortcut for the 'if (BeginTooltip()) { Text(...); EndTooltip(); }' idiom (with a subtlety that it discard any previously submitted tooltip)"
                ],
                "attached": "// begin/append a tooltip window."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 738
            }
        },
        {
            "name": "ImGui_EndTooltip",
            "original_fully_qualified_name": "ImGui::EndTooltip",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndTooltip() if BeginTooltip()/BeginItemTooltip() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 739
            }
        },
        {
            "name": "ImGui_SetTooltip",
            "original_fully_qualified_name": "ImGui::SetTooltip",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg1__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set a text-only tooltip. Often used after a ImGui::IsItemHovered() check. Override any previous call to SetTooltip()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 740
            }
        },
        {
            "name": "ImGui_SetTooltipV",
            "original_fully_qualified_name": "ImGui::SetTooltipV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 741
            }
        },
        {
            "name": "ImGui_BeginItemTooltip",
            "original_fully_qualified_name": "ImGui::BeginItemTooltip",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Tooltips: helpers for showing a tooltip when hovering an item",
                    "// - BeginItemTooltip() is a shortcut for the 'if (IsItemHovered(ImGuiHoveredFlags_ForTooltip) && BeginTooltip())' idiom.",
                    "// - SetItemTooltip() is a shortcut for the 'if (IsItemHovered(ImGuiHoveredFlags_ForTooltip)) { SetTooltip(...); }' idiom.",
                    "// - Where 'ImGuiHoveredFlags_ForTooltip' itself is a shortcut to use 'style.HoverFlagsForTooltipMouse' or 'style.HoverFlagsForTooltipNav' depending on active input type. For mouse it defaults to 'ImGuiHoveredFlags_Stationary | ImGuiHoveredFlags_DelayShort'."
                ],
                "attached": "// begin/append a tooltip window if preceding item was hovered."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 747
            }
        },
        {
            "name": "ImGui_SetItemTooltip",
            "original_fully_qualified_name": "ImGui::SetItemTooltip",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg1__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set a text-only tooltip if preceding item was hovered. override any previous call to SetTooltip()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 748
            }
        },
        {
            "name": "ImGui_SetItemTooltipV",
            "original_fully_qualified_name": "ImGui::SetItemTooltipV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 749
            }
        },
        {
            "name": "ImGui_BeginPopup",
            "original_fully_qualified_name": "ImGui::BeginPopup",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiWindowFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiWindowFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Popups, Modals",
                    "//  - They block normal mouse hovering detection (and therefore most mouse interactions) behind them.",
                    "//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.",
                    "//  - Their visibility state (~bool) is held internally instead of being held by the programmer as we are used to with regular Begin*() calls.",
                    "//  - The 3 properties above are related: we need to retain popup visibility state in the library because popups may be closed as any time.",
                    "//  - You can bypass the hovering restriction by using ImGuiHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered() or IsWindowHovered().",
                    "//  - IMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup and BeginPopup generally needs to be at the same level of the stack.",
                    "//    This is sometimes leading to confusing mistakes. May rework this in the future.",
                    "//  - BeginPopup(): query popup state, if open start appending into the window. Call EndPopup() afterwards if returned true. ImGuiWindowFlags are forwarded to the window.",
                    "//  - BeginPopupModal(): block every interaction behind the window, cannot be closed by user, add a dimming background, has a title bar."
                ],
                "attached": "// return true if the popup is open, and you can start outputting to it."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 761
            }
        },
        {
            "name": "ImGui_BeginPopupModal",
            "original_fully_qualified_name": "ImGui::BeginPopupModal",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "name",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_open",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiWindowFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiWindowFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return true if the modal is open, and you can start outputting to it."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 762
            }
        },
        {
            "name": "ImGui_EndPopup",
            "original_fully_qualified_name": "ImGui::EndPopup",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndPopup() if BeginPopupXXX() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 763
            }
        },
        {
            "name": "ImGui_OpenPopup",
            "original_fully_qualified_name": "ImGui::OpenPopup",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "popup_flags",
                    "type": {
                        "declaration": "ImGuiPopupFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiPopupFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Popups: open/close functions",
                    "//  - OpenPopup(): set popup state to open. ImGuiPopupFlags are available for opening options.",
                    "//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.",
                    "//  - CloseCurrentPopup(): use inside the BeginPopup()/EndPopup() scope to close manually.",
                    "//  - CloseCurrentPopup() is called by default by Selectable()/MenuItem() when activated (FIXME: need some options).",
                    "//  - Use ImGuiPopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's already one at the same level. This is equivalent to e.g. testing for !IsAnyPopupOpen() prior to OpenPopup().",
                    "//  - Use IsWindowAppearing() after BeginPopup() to tell if a window just opened.",
                    "//  - IMPORTANT: Notice that for OpenPopupOnItemClick() we exceptionally default flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter"
                ],
                "attached": "// call to mark popup as open (don't call every frame!)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 773
            }
        },
        {
            "name": "ImGui_OpenPopupID",
            "original_fully_qualified_name": "ImGui::OpenPopup",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "id",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "popup_flags",
                    "type": {
                        "declaration": "ImGuiPopupFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiPopupFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// id overload to facilitate calling from nested stacks"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 774
            }
        },
        {
            "name": "ImGui_OpenPopupOnItemClick",
            "original_fully_qualified_name": "ImGui::OpenPopupOnItemClick",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "popup_flags",
                    "type": {
                        "declaration": "ImGuiPopupFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiPopupFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 775
            }
        },
        {
            "name": "ImGui_CloseCurrentPopup",
            "original_fully_qualified_name": "ImGui::CloseCurrentPopup",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// manually close the popup we have begin-ed into."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 776
            }
        },
        {
            "name": "ImGui_BeginPopupContextItem",
            "original_fully_qualified_name": "ImGui::BeginPopupContextItem",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "popup_flags",
                    "type": {
                        "declaration": "ImGuiPopupFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiPopupFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Popups: open+begin combined functions helpers",
                    "//  - Helpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g. hovering an item and right-clicking.",
                    "//  - They are convenient to easily create context menus, hence the name.",
                    "//  - IMPORTANT: Notice that BeginPopupContextXXX takes ImGuiPopupFlags just like OpenPopup() and unlike BeginPopup(). For full consistency, we may add ImGuiWindowFlags to the BeginPopupContextXXX functions in the future.",
                    "//  - IMPORTANT: Notice that we exceptionally default their flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter, so if you add other flags remember to re-add the ImGuiPopupFlags_MouseButtonRight."
                ],
                "attached": "// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 783
            }
        },
        {
            "name": "ImGui_BeginPopupContextWindow",
            "original_fully_qualified_name": "ImGui::BeginPopupContextWindow",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "popup_flags",
                    "type": {
                        "declaration": "ImGuiPopupFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiPopupFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// open+begin popup when clicked on current window."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 784
            }
        },
        {
            "name": "ImGui_BeginPopupContextVoid",
            "original_fully_qualified_name": "ImGui::BeginPopupContextVoid",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "popup_flags",
                    "type": {
                        "declaration": "ImGuiPopupFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiPopupFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// open+begin popup when clicked in void (where there are no windows)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 785
            }
        },
        {
            "name": "ImGui_IsPopupOpen",
            "original_fully_qualified_name": "ImGui::IsPopupOpen",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiPopupFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiPopupFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Popups: query functions",
                    "//  - IsPopupOpen(): return true if the popup is open at the current BeginPopup() level of the popup stack.",
                    "//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId: return true if any popup is open at the current BeginPopup() level of the popup stack.",
                    "//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId + ImGuiPopupFlags_AnyPopupLevel: return true if any popup is open."
                ],
                "attached": "// return true if the popup is open."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 791
            }
        },
        {
            "name": "ImGui_BeginTable",
            "original_fully_qualified_name": "ImGui::BeginTable",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "columns",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTableFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTableFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "outer_size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0.0f, 0.0f)",
                    "is_instance_pointer": false
                },
                {
                    "name": "inner_width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Tables",
                    "// - Full-featured replacement for old Columns API.",
                    "// - See Demo->Tables for demo code. See top of imgui_tables.cpp for general commentary.",
                    "// - See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.",
                    "// The typical call flow is:",
                    "// - 1. Call BeginTable(), early out if returning false.",
                    "// - 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.",
                    "// - 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.",
                    "// - 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.",
                    "// - 5. Populate contents:",
                    "//    - In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.",
                    "//    - If you are using tables as a sort of grid, where every column is holding the same type of contents,",
                    "//      you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().",
                    "//      TableNextColumn() will automatically wrap-around into the next row if needed.",
                    "//    - IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!",
                    "//    - Summary of possible call flow:",
                    "//        - TableNextRow() -> TableSetColumnIndex(0) -> Text(\"Hello 0\") -> TableSetColumnIndex(1) -> Text(\"Hello 1\")  // OK",
                    "//        - TableNextRow() -> TableNextColumn()      -> Text(\"Hello 0\") -> TableNextColumn()      -> Text(\"Hello 1\")  // OK",
                    "//        -                   TableNextColumn()      -> Text(\"Hello 0\") -> TableNextColumn()      -> Text(\"Hello 1\")  // OK: TableNextColumn() automatically gets to next row!",
                    "//        - TableNextRow()                           -> Text(\"Hello 0\")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!",
                    "// - 5. Call EndTable()"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 814
            }
        },
        {
            "name": "ImGui_EndTable",
            "original_fully_qualified_name": "ImGui::EndTable",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndTable() if BeginTable() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 815
            }
        },
        {
            "name": "ImGui_TableNextRow",
            "original_fully_qualified_name": "ImGui::TableNextRow",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "row_flags",
                    "type": {
                        "declaration": "ImGuiTableRowFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTableRowFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "min_row_height",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// append into the first cell of a new row."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 816
            }
        },
        {
            "name": "ImGui_TableNextColumn",
            "original_fully_qualified_name": "ImGui::TableNextColumn",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// append into the next column (or first column of next row if currently in last column). Return true when column is visible."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 817
            }
        },
        {
            "name": "ImGui_TableSetColumnIndex",
            "original_fully_qualified_name": "ImGui::TableSetColumnIndex",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "column_n",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// append into the specified column. Return true when column is visible."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 818
            }
        },
        {
            "name": "ImGui_TableSetupColumn",
            "original_fully_qualified_name": "ImGui::TableSetupColumn",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTableColumnFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTableColumnFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "init_width_or_weight",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "user_id",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Tables: Headers & Columns declaration",
                    "// - Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.",
                    "// - Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.",
                    "//   Headers are required to perform: reordering, sorting, and opening the context menu.",
                    "//   The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.",
                    "// - You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in",
                    "//   some advanced use cases (e.g. adding custom widgets in header row).",
                    "// - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 828
            }
        },
        {
            "name": "ImGui_TableSetupScrollFreeze",
            "original_fully_qualified_name": "ImGui::TableSetupScrollFreeze",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "cols",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rows",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// lock columns/rows so they stay visible when scrolled."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 829
            }
        },
        {
            "name": "ImGui_TableHeader",
            "original_fully_qualified_name": "ImGui::TableHeader",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// submit one header cell manually (rarely used)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 830
            }
        },
        {
            "name": "ImGui_TableHeadersRow",
            "original_fully_qualified_name": "ImGui::TableHeadersRow",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// submit a row with headers cells based on data provided to TableSetupColumn() + submit context menu"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 831
            }
        },
        {
            "name": "ImGui_TableAngledHeadersRow",
            "original_fully_qualified_name": "ImGui::TableAngledHeadersRow",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// submit a row with angled headers for every column with the ImGuiTableColumnFlags_AngledHeader flag. MUST BE FIRST ROW."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 832
            }
        },
        {
            "name": "ImGui_TableGetSortSpecs",
            "original_fully_qualified_name": "ImGui::TableGetSortSpecs",
            "return_type": {
                "declaration": "ImGuiTableSortSpecs*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiTableSortSpecs"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Tables: Sorting & Miscellaneous functions",
                    "// - Sorting: call TableGetSortSpecs() to retrieve latest sort specs for the table. NULL when not sorting.",
                    "//   When 'sort_specs->SpecsDirty == true' you should sort your data. It will be true when sorting specs have",
                    "//   changed since last call, or the first time. Make sure to set 'SpecsDirty = false' after sorting,",
                    "//   else you may wastefully sort your data every frame!",
                    "// - Functions args 'int column_n' treat the default value of -1 as the same as passing the current column index."
                ],
                "attached": "// get latest sort specs for the table (NULL if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 840
            }
        },
        {
            "name": "ImGui_TableGetColumnCount",
            "original_fully_qualified_name": "ImGui::TableGetColumnCount",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return number of columns (value passed to BeginTable)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 841
            }
        },
        {
            "name": "ImGui_TableGetColumnIndex",
            "original_fully_qualified_name": "ImGui::TableGetColumnIndex",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return current column index."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 842
            }
        },
        {
            "name": "ImGui_TableGetRowIndex",
            "original_fully_qualified_name": "ImGui::TableGetRowIndex",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return current row index."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 843
            }
        },
        {
            "name": "ImGui_TableGetColumnName",
            "original_fully_qualified_name": "ImGui::TableGetColumnName",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "column_n",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return \"\" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 844
            }
        },
        {
            "name": "ImGui_TableGetColumnFlags",
            "original_fully_qualified_name": "ImGui::TableGetColumnFlags",
            "return_type": {
                "declaration": "ImGuiTableColumnFlags",
                "description": {
                    "kind": "User",
                    "name": "ImGuiTableColumnFlags"
                }
            },
            "arguments": [
                {
                    "name": "column_n",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 845
            }
        },
        {
            "name": "ImGui_TableSetColumnEnabled",
            "original_fully_qualified_name": "ImGui::TableSetColumnEnabled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "column_n",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// change user accessible enabled/disabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 846
            }
        },
        {
            "name": "ImGui_TableGetHoveredColumn",
            "original_fully_qualified_name": "ImGui::TableGetHoveredColumn",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return hovered column. return -1 when table is not hovered. return columns_count if the unused space at the right of visible columns is hovered. Can also use (TableGetColumnFlags() & ImGuiTableColumnFlags_IsHovered) instead."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 847
            }
        },
        {
            "name": "ImGui_TableSetBgColor",
            "original_fully_qualified_name": "ImGui::TableSetBgColor",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "target",
                    "type": {
                        "declaration": "ImGuiTableBgTarget",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTableBgTarget"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "color",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "column_n",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 848
            }
        },
        {
            "name": "ImGui_Columns",
            "original_fully_qualified_name": "ImGui::Columns",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1",
                    "is_instance_pointer": false
                },
                {
                    "name": "id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "borders",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "true",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Legacy Columns API (prefer using Tables!)",
                    "// - You can also use SameLine(pos_x) to mimic simplified columns."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 852
            }
        },
        {
            "name": "ImGui_NextColumn",
            "original_fully_qualified_name": "ImGui::NextColumn",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// next column, defaults to current row or next row if the current row is finished"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 853
            }
        },
        {
            "name": "ImGui_GetColumnIndex",
            "original_fully_qualified_name": "ImGui::GetColumnIndex",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get current column index"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 854
            }
        },
        {
            "name": "ImGui_GetColumnWidth",
            "original_fully_qualified_name": "ImGui::GetColumnWidth",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [
                {
                    "name": "column_index",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get column width (in pixels). pass -1 to use current column"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 855
            }
        },
        {
            "name": "ImGui_SetColumnWidth",
            "original_fully_qualified_name": "ImGui::SetColumnWidth",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "column_index",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set column width (in pixels). pass -1 to use current column"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 856
            }
        },
        {
            "name": "ImGui_GetColumnOffset",
            "original_fully_qualified_name": "ImGui::GetColumnOffset",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [
                {
                    "name": "column_index",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 857
            }
        },
        {
            "name": "ImGui_SetColumnOffset",
            "original_fully_qualified_name": "ImGui::SetColumnOffset",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "column_index",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "offset_x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 858
            }
        },
        {
            "name": "ImGui_GetColumnsCount",
            "original_fully_qualified_name": "ImGui::GetColumnsCount",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 859
            }
        },
        {
            "name": "ImGui_BeginTabBar",
            "original_fully_qualified_name": "ImGui::BeginTabBar",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "str_id",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTabBarFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTabBarFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Tab Bars, Tabs",
                    "// - Note: Tabs are automatically created by the docking system (when in 'docking' branch). Use this to create tab bars/tabs yourself."
                ],
                "attached": "// create and append into a TabBar"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 863
            }
        },
        {
            "name": "ImGui_EndTabBar",
            "original_fully_qualified_name": "ImGui::EndTabBar",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndTabBar() if BeginTabBar() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 864
            }
        },
        {
            "name": "ImGui_BeginTabItem",
            "original_fully_qualified_name": "ImGui::BeginTabItem",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_open",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTabItemFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTabItemFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// create a Tab. Returns true if the Tab is selected."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 865
            }
        },
        {
            "name": "ImGui_EndTabItem",
            "original_fully_qualified_name": "ImGui::EndTabItem",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndTabItem() if BeginTabItem() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 866
            }
        },
        {
            "name": "ImGui_TabItemButton",
            "original_fully_qualified_name": "ImGui::TabItemButton",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiTabItemFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiTabItemFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 867
            }
        },
        {
            "name": "ImGui_SetTabItemClosed",
            "original_fully_qualified_name": "ImGui::SetTabItemClosed",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "tab_or_docked_window_label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 868
            }
        },
        {
            "name": "ImGui_LogToTTY",
            "original_fully_qualified_name": "ImGui::LogToTTY",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "auto_open_depth",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Logging/Capture",
                    "// - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging."
                ],
                "attached": "// start logging to tty (stdout)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 872
            }
        },
        {
            "name": "ImGui_LogToFile",
            "original_fully_qualified_name": "ImGui::LogToFile",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "auto_open_depth",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                },
                {
                    "name": "filename",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// start logging to file"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 873
            }
        },
        {
            "name": "ImGui_LogToClipboard",
            "original_fully_qualified_name": "ImGui::LogToClipboard",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "auto_open_depth",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// start logging to OS clipboard"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 874
            }
        },
        {
            "name": "ImGui_LogFinish",
            "original_fully_qualified_name": "ImGui::LogFinish",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// stop logging (close file, etc.)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 875
            }
        },
        {
            "name": "ImGui_LogButtons",
            "original_fully_qualified_name": "ImGui::LogButtons",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// helper to display buttons for logging to tty/file/clipboard"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 876
            }
        },
        {
            "name": "ImGui_LogText",
            "original_fully_qualified_name": "ImGui::LogText",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg1__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// pass text data straight to log (without being displayed)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 877
            }
        },
        {
            "name": "ImGui_LogTextV",
            "original_fully_qualified_name": "ImGui::LogTextV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 878
            }
        },
        {
            "name": "ImGui_BeginDragDropSource",
            "original_fully_qualified_name": "ImGui::BeginDragDropSource",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiDragDropFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDragDropFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Drag and Drop",
                    "// - On source items, call BeginDragDropSource(), if it returns true also call SetDragDropPayload() + EndDragDropSource().",
                    "// - On target candidates, call BeginDragDropTarget(), if it returns true also call AcceptDragDropPayload() + EndDragDropTarget().",
                    "// - If you stop calling BeginDragDropSource() the payload is preserved however it won't have a preview tooltip (we currently display a fallback \"...\" tooltip, see #1725)",
                    "// - An item can be both drag source and drop target."
                ],
                "attached": "// call after submitting an item which may be dragged. when this return true, you can call SetDragDropPayload() + EndDragDropSource()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 885
            }
        },
        {
            "name": "ImGui_SetDragDropPayload",
            "original_fully_qualified_name": "ImGui::SetDragDropPayload",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "type",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "data",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "sz",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "cond",
                    "type": {
                        "declaration": "ImGuiCond",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCond"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui. Return true when payload has been accepted."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 886
            }
        },
        {
            "name": "ImGui_EndDragDropSource",
            "original_fully_qualified_name": "ImGui::EndDragDropSource",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndDragDropSource() if BeginDragDropSource() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 887
            }
        },
        {
            "name": "ImGui_BeginDragDropTarget",
            "original_fully_qualified_name": "ImGui::BeginDragDropTarget",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 888
            }
        },
        {
            "name": "ImGui_AcceptDragDropPayload",
            "original_fully_qualified_name": "ImGui::AcceptDragDropPayload",
            "return_type": {
                "declaration": "const ImGuiPayload*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiPayload",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "type",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiDragDropFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiDragDropFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 889
            }
        },
        {
            "name": "ImGui_EndDragDropTarget",
            "original_fully_qualified_name": "ImGui::EndDragDropTarget",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// only call EndDragDropTarget() if BeginDragDropTarget() returns true!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 890
            }
        },
        {
            "name": "ImGui_GetDragDropPayload",
            "original_fully_qualified_name": "ImGui::GetDragDropPayload",
            "return_type": {
                "declaration": "const ImGuiPayload*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiPayload",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// peek directly into the current payload from anywhere. returns NULL when drag and drop is finished or inactive. use ImGuiPayload::IsDataType() to test for the payload type."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 891
            }
        },
        {
            "name": "ImGui_BeginDisabled",
            "original_fully_qualified_name": "ImGui::BeginDisabled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "disabled",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "true",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Disabling [BETA API]",
                    "// - Disable all user interactions and dim items visuals (applying style.DisabledAlpha over current colors)",
                    "// - Those can be nested but it cannot be used to enable an already disabled section (a single BeginDisabled(true) in the stack is enough to keep everything disabled)",
                    "// - Tooltips windows by exception are opted out of disabling.",
                    "// - BeginDisabled(false)/EndDisabled() essentially does nothing but is provided to facilitate use of boolean expressions (as a micro-optimization: if you have tens of thousands of BeginDisabled(false)/EndDisabled() pairs, you might want to reformulate your code to avoid making those calls)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 898
            }
        },
        {
            "name": "ImGui_EndDisabled",
            "original_fully_qualified_name": "ImGui::EndDisabled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 899
            }
        },
        {
            "name": "ImGui_PushClipRect",
            "original_fully_qualified_name": "ImGui::PushClipRect",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "clip_rect_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "clip_rect_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "intersect_with_current_clip_rect",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Clipping",
                    "// - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 903
            }
        },
        {
            "name": "ImGui_PopClipRect",
            "original_fully_qualified_name": "ImGui::PopClipRect",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 904
            }
        },
        {
            "name": "ImGui_SetItemDefaultFocus",
            "original_fully_qualified_name": "ImGui::SetItemDefaultFocus",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Focus, Activation"
                ],
                "attached": "// make last item the default focused item of of a newly appearing window."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 907
            }
        },
        {
            "name": "ImGui_SetKeyboardFocusHere",
            "original_fully_qualified_name": "ImGui::SetKeyboardFocusHere",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "offset",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 908
            }
        },
        {
            "name": "ImGui_SetNavCursorVisible",
            "original_fully_qualified_name": "ImGui::SetNavCursorVisible",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "visible",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Keyboard/Gamepad Navigation"
                ],
                "attached": "// alter visibility of keyboard/gamepad cursor. by default: show when using an arrow key, hide when clicking with mouse."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 911
            }
        },
        {
            "name": "ImGui_SetNextItemAllowOverlap",
            "original_fully_qualified_name": "ImGui::SetNextItemAllowOverlap",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Overlapping mode"
                ],
                "attached": "// allow next item to be overlapped by a subsequent item. Useful with invisible buttons, selectable, treenode covering an area where subsequent items may need to be added. Note that both Selectable() and TreeNode() have dedicated flags doing this."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 914
            }
        },
        {
            "name": "ImGui_IsItemHovered",
            "original_fully_qualified_name": "ImGui::IsItemHovered",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiHoveredFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiHoveredFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Item/Widgets Utilities and Query Functions",
                    "// - Most of the functions are referring to the previous Item that has been submitted.",
                    "// - See Demo Window under \"Widgets->Querying Status\" for an interactive visualization of most of those functions."
                ],
                "attached": "// is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 919
            }
        },
        {
            "name": "ImGui_IsItemActive",
            "original_fully_qualified_name": "ImGui::IsItemActive",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 920
            }
        },
        {
            "name": "ImGui_IsItemFocused",
            "original_fully_qualified_name": "ImGui::IsItemFocused",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is the last item focused for keyboard/gamepad navigation?"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 921
            }
        },
        {
            "name": "ImGui_IsItemClicked",
            "original_fully_qualified_name": "ImGui::IsItemClicked",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "mouse_button",
                    "type": {
                        "declaration": "ImGuiMouseButton",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseButton"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is the last item hovered and mouse clicked on? (**)  == IsMouseClicked(mouse_button) && IsItemHovered()Important. (**) this is NOT equivalent to the behavior of e.g. Button(). Read comments in function definition."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 922
            }
        },
        {
            "name": "ImGui_IsItemVisible",
            "original_fully_qualified_name": "ImGui::IsItemVisible",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is the last item visible? (items may be out of sight because of clipping/scrolling)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 923
            }
        },
        {
            "name": "ImGui_IsItemEdited",
            "original_fully_qualified_name": "ImGui::IsItemEdited",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// did the last item modify its underlying value this frame? or was pressed? This is generally the same as the \"bool\" return value of many widgets."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 924
            }
        },
        {
            "name": "ImGui_IsItemActivated",
            "original_fully_qualified_name": "ImGui::IsItemActivated",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// was the last item just made active (item was previously inactive)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 925
            }
        },
        {
            "name": "ImGui_IsItemDeactivated",
            "original_fully_qualified_name": "ImGui::IsItemDeactivated",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that require continuous editing."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 926
            }
        },
        {
            "name": "ImGui_IsItemDeactivatedAfterEdit",
            "original_fully_qualified_name": "ImGui::IsItemDeactivatedAfterEdit",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that require continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 927
            }
        },
        {
            "name": "ImGui_IsItemToggledOpen",
            "original_fully_qualified_name": "ImGui::IsItemToggledOpen",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// was the last item open state toggled? set by TreeNode()."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 928
            }
        },
        {
            "name": "ImGui_IsAnyItemHovered",
            "original_fully_qualified_name": "ImGui::IsAnyItemHovered",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is any item hovered?"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 929
            }
        },
        {
            "name": "ImGui_IsAnyItemActive",
            "original_fully_qualified_name": "ImGui::IsAnyItemActive",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is any item active?"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 930
            }
        },
        {
            "name": "ImGui_IsAnyItemFocused",
            "original_fully_qualified_name": "ImGui::IsAnyItemFocused",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is any item focused?"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 931
            }
        },
        {
            "name": "ImGui_GetItemID",
            "original_fully_qualified_name": "ImGui::GetItemID",
            "return_type": {
                "declaration": "ImGuiID",
                "description": {
                    "kind": "User",
                    "name": "ImGuiID"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get ID of last item (~~ often same ImGui::GetID(label) beforehand)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 932
            }
        },
        {
            "name": "ImGui_GetItemRectMin",
            "original_fully_qualified_name": "ImGui::GetItemRectMin",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get upper-left bounding rectangle of the last item (screen space)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 933
            }
        },
        {
            "name": "ImGui_GetItemRectMax",
            "original_fully_qualified_name": "ImGui::GetItemRectMax",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get lower-right bounding rectangle of the last item (screen space)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 934
            }
        },
        {
            "name": "ImGui_GetItemRectSize",
            "original_fully_qualified_name": "ImGui::GetItemRectSize",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get size of last item"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 935
            }
        },
        {
            "name": "ImGui_GetMainViewport",
            "original_fully_qualified_name": "ImGui::GetMainViewport",
            "return_type": {
                "declaration": "ImGuiViewport*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiViewport"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Viewports",
                    "// - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.",
                    "// - In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.",
                    "// - In the future we will extend this concept further to also represent Platform Monitor and support a \"no main platform window\" operation mode."
                ],
                "attached": "// return primary/default viewport. This can never be NULL."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 941
            }
        },
        {
            "name": "ImGui_GetBackgroundDrawList",
            "original_fully_qualified_name": "ImGui::GetBackgroundDrawList",
            "return_type": {
                "declaration": "ImDrawList*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImDrawList"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Background/Foreground Draw Lists"
                ],
                "attached": "// this draw list will be the first rendered one. Useful to quickly draw shapes/text behind dear imgui contents."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 944
            }
        },
        {
            "name": "ImGui_GetForegroundDrawList",
            "original_fully_qualified_name": "ImGui::GetForegroundDrawList",
            "return_type": {
                "declaration": "ImDrawList*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImDrawList"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 945
            }
        },
        {
            "name": "ImGui_IsRectVisibleBySize",
            "original_fully_qualified_name": "ImGui::IsRectVisible",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Miscellaneous Utilities"
                ],
                "attached": "// test if rectangle (of given size, starting from cursor position) is visible / not clipped."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 948
            }
        },
        {
            "name": "ImGui_IsRectVisible",
            "original_fully_qualified_name": "ImGui::IsRectVisible",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "rect_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rect_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 949
            }
        },
        {
            "name": "ImGui_GetTime",
            "original_fully_qualified_name": "ImGui::GetTime",
            "return_type": {
                "declaration": "double",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "double"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get global imgui time. incremented by io.DeltaTime every frame."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 950
            }
        },
        {
            "name": "ImGui_GetFrameCount",
            "original_fully_qualified_name": "ImGui::GetFrameCount",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get global imgui frame count. incremented by 1 every frame."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 951
            }
        },
        {
            "name": "ImGui_GetDrawListSharedData",
            "original_fully_qualified_name": "ImGui::GetDrawListSharedData",
            "return_type": {
                "declaration": "ImDrawListSharedData*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImDrawListSharedData"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// you may use this when creating your own ImDrawList instances."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 952
            }
        },
        {
            "name": "ImGui_GetStyleColorName",
            "original_fully_qualified_name": "ImGui::GetStyleColorName",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImGuiCol",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCol"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get a string corresponding to the enum value (for display, saving, etc.)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 953
            }
        },
        {
            "name": "ImGui_SetStateStorage",
            "original_fully_qualified_name": "ImGui::SetStateStorage",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "storage",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 954
            }
        },
        {
            "name": "ImGui_GetStateStorage",
            "original_fully_qualified_name": "ImGui::GetStateStorage",
            "return_type": {
                "declaration": "ImGuiStorage*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImGuiStorage"
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 955
            }
        },
        {
            "name": "ImGui_CalcTextSize",
            "original_fully_qualified_name": "ImGui::CalcTextSize",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [
                {
                    "name": "text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "hide_text_after_double_hash",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "false",
                    "is_instance_pointer": false
                },
                {
                    "name": "wrap_width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Text Utilities"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 958
            }
        },
        {
            "name": "ImGui_ColorConvertU32ToFloat4",
            "original_fully_qualified_name": "ImGui::ColorConvertU32ToFloat4",
            "return_type": {
                "declaration": "ImVec4",
                "description": {
                    "kind": "User",
                    "name": "ImVec4"
                }
            },
            "arguments": [
                {
                    "name": "in",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Color Utilities"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 961
            }
        },
        {
            "name": "ImGui_ColorConvertFloat4ToU32",
            "original_fully_qualified_name": "ImGui::ColorConvertFloat4ToU32",
            "return_type": {
                "declaration": "ImU32",
                "description": {
                    "kind": "User",
                    "name": "ImU32"
                }
            },
            "arguments": [
                {
                    "name": "in",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 962
            }
        },
        {
            "name": "ImGui_ColorConvertRGBtoHSV",
            "original_fully_qualified_name": "ImGui::ColorConvertRGBtoHSV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "r",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "g",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "b",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_h",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_s",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_v",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 963
            }
        },
        {
            "name": "ImGui_ColorConvertHSVtoRGB",
            "original_fully_qualified_name": "ImGui::ColorConvertHSVtoRGB",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "h",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "s",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_r",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_g",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_b",
                    "type": {
                        "declaration": "float*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "float"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 964
            }
        },
        {
            "name": "ImGui_IsKeyDown",
            "original_fully_qualified_name": "ImGui::IsKeyDown",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiKey",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKey"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Inputs Utilities: Keyboard/Mouse/Gamepad",
                    "// - the ImGuiKey enum contains all possible keyboard, mouse and gamepad inputs (e.g. ImGuiKey_A, ImGuiKey_MouseLeft, ImGuiKey_GamepadDpadUp...).",
                    "// - (legacy: before v1.87, we used ImGuiKey to carry native/user indices as defined by each backends. This was obsoleted in 1.87 (2022-02) and completely removed in 1.91.5 (2024-11). See https://github.com/ocornut/imgui/issues/4921)",
                    "// - (legacy: any use of ImGuiKey will assert when key < 512 to detect passing legacy native/user indices)"
                ],
                "attached": "// is key being held."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 970
            }
        },
        {
            "name": "ImGui_IsKeyPressed",
            "original_fully_qualified_name": "ImGui::IsKeyPressed",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiKey",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKey"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "repeat",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "true",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 971
            }
        },
        {
            "name": "ImGui_IsKeyReleased",
            "original_fully_qualified_name": "ImGui::IsKeyReleased",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiKey",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKey"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// was key released (went from Down to !Down)?"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 972
            }
        },
        {
            "name": "ImGui_IsKeyChordPressed",
            "original_fully_qualified_name": "ImGui::IsKeyChordPressed",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "key_chord",
                    "type": {
                        "declaration": "ImGuiKeyChord",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKeyChord"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// was key chord (mods + key) pressed, e.g. you can pass 'ImGuiMod_Ctrl | ImGuiKey_S' as a key-chord. This doesn't do any routing or focus check, please consider using Shortcut() function instead."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 973
            }
        },
        {
            "name": "ImGui_GetKeyPressedAmount",
            "original_fully_qualified_name": "ImGui::GetKeyPressedAmount",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiKey",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKey"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "repeat_delay",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rate",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 974
            }
        },
        {
            "name": "ImGui_GetKeyName",
            "original_fully_qualified_name": "ImGui::GetKeyName",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiKey",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKey"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// [DEBUG] returns English name of the key. Those names a provided for debugging purpose and are not meant to be saved persistently not compared."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 975
            }
        },
        {
            "name": "ImGui_SetNextFrameWantCaptureKeyboard",
            "original_fully_qualified_name": "ImGui::SetNextFrameWantCaptureKeyboard",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "want_capture_keyboard",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when true it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting \"io.WantCaptureKeyboard = want_capture_keyboard\"; after the next NewFrame() call."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 976
            }
        },
        {
            "name": "ImGui_Shortcut",
            "original_fully_qualified_name": "ImGui::Shortcut",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "key_chord",
                    "type": {
                        "declaration": "ImGuiKeyChord",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKeyChord"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Inputs Utilities: Shortcut Testing & Routing [BETA]",
                    "// - ImGuiKeyChord = a ImGuiKey + optional ImGuiMod_Alt/ImGuiMod_Ctrl/ImGuiMod_Shift/ImGuiMod_Super.",
                    "//       ImGuiKey_C                          // Accepted by functions taking ImGuiKey or ImGuiKeyChord arguments)",
                    "//       ImGuiMod_Ctrl | ImGuiKey_C          // Accepted by functions taking ImGuiKeyChord arguments)",
                    "//   only ImGuiMod_XXX values are legal to combine with an ImGuiKey. You CANNOT combine two ImGuiKey values.",
                    "// - The general idea is that several callers may register interest in a shortcut, and only one owner gets it.",
                    "//      Parent   -> call Shortcut(Ctrl+S)    // When Parent is focused, Parent gets the shortcut.",
                    "//        Child1 -> call Shortcut(Ctrl+S)    // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)",
                    "//        Child2 -> no call                  // When Child2 is focused, Parent gets the shortcut.",
                    "//   The whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.",
                    "//   This is an important property as it facilitate working with foreign code or larger codebase.",
                    "// - To understand the difference:",
                    "//   - IsKeyChordPressed() compares mods and call IsKeyPressed() -> function has no side-effect.",
                    "//   - Shortcut() submits a route, routes are resolved, if it currently can be routed it calls IsKeyChordPressed() -> function has (desirable) side-effects as it can prevents another call from getting the route.",
                    "// - Visualize registered routes in 'Metrics/Debugger->Inputs'."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 993
            }
        },
        {
            "name": "ImGui_SetNextItemShortcut",
            "original_fully_qualified_name": "ImGui::SetNextItemShortcut",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "key_chord",
                    "type": {
                        "declaration": "ImGuiKeyChord",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKeyChord"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImGuiInputFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiInputFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 994
            }
        },
        {
            "name": "ImGui_SetItemKeyOwner",
            "original_fully_qualified_name": "ImGui::SetItemKeyOwner",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiKey",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKey"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Inputs Utilities: Key/Input Ownership [BETA]",
                    "// - One common use case would be to allow your items to disable standard inputs behaviors such",
                    "//   as Tab or Alt key handling, Mouse Wheel scrolling, etc.",
                    "//   e.g. Button(...); SetItemKeyOwner(ImGuiKey_MouseWheelY); to make hovering/activating a button disable wheel for scrolling.",
                    "// - Reminder ImGuiKey enum include access to mouse buttons and gamepad, so key ownership can apply to them.",
                    "// - Many related features are still in imgui_internal.h. For instance, most IsKeyXXX()/IsMouseXXX() functions have an owner-id-aware version."
                ],
                "attached": "// Set key owner to last item ID if it is hovered or active. Equivalent to 'if (IsItemHovered() || IsItemActive()) { SetKeyOwner(key, GetItemID());'."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1002
            }
        },
        {
            "name": "ImGui_IsMouseDown",
            "original_fully_qualified_name": "ImGui::IsMouseDown",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "button",
                    "type": {
                        "declaration": "ImGuiMouseButton",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseButton"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Inputs Utilities: Mouse",
                    "// - To refer to a mouse button, you may use named enums in your code e.g. ImGuiMouseButton_Left, ImGuiMouseButton_Right.",
                    "// - You can also use regular integer: it is forever guaranteed that 0=Left, 1=Right, 2=Middle.",
                    "// - Dragging operations are only reported after mouse has moved a certain distance away from the initial clicking position (see 'lock_threshold' and 'io.MouseDraggingThreshold')"
                ],
                "attached": "// is mouse button held?"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1008
            }
        },
        {
            "name": "ImGui_IsMouseClicked",
            "original_fully_qualified_name": "ImGui::IsMouseClicked",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "button",
                    "type": {
                        "declaration": "ImGuiMouseButton",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseButton"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "repeat",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "false",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1009
            }
        },
        {
            "name": "ImGui_IsMouseReleased",
            "original_fully_qualified_name": "ImGui::IsMouseReleased",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "button",
                    "type": {
                        "declaration": "ImGuiMouseButton",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseButton"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// did mouse button released? (went from Down to !Down)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1010
            }
        },
        {
            "name": "ImGui_IsMouseDoubleClicked",
            "original_fully_qualified_name": "ImGui::IsMouseDoubleClicked",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "button",
                    "type": {
                        "declaration": "ImGuiMouseButton",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseButton"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// did mouse button double-clicked? Same as GetMouseClickedCount() == 2. (note that a double-click will also report IsMouseClicked() == true)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1011
            }
        },
        {
            "name": "ImGui_GetMouseClickedCount",
            "original_fully_qualified_name": "ImGui::GetMouseClickedCount",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [
                {
                    "name": "button",
                    "type": {
                        "declaration": "ImGuiMouseButton",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseButton"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return the number of successive mouse-clicks at the time where a click happen (otherwise 0)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1012
            }
        },
        {
            "name": "ImGui_IsMouseHoveringRect",
            "original_fully_qualified_name": "ImGui::IsMouseHoveringRect",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "r_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "r_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "clip",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "true",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1013
            }
        },
        {
            "name": "ImGui_IsMousePosValid",
            "original_fully_qualified_name": "ImGui::IsMousePosValid",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "mouse_pos",
                    "type": {
                        "declaration": "const ImVec2*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1014
            }
        },
        {
            "name": "ImGui_IsAnyMouseDown",
            "original_fully_qualified_name": "ImGui::IsAnyMouseDown",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// [WILL OBSOLETE] is any mouse button held? This was designed for backends, but prefer having backend maintain a mask of held mouse buttons, because upcoming input queue system will make this invalid."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1015
            }
        },
        {
            "name": "ImGui_GetMousePos",
            "original_fully_qualified_name": "ImGui::GetMousePos",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1016
            }
        },
        {
            "name": "ImGui_GetMousePosOnOpeningCurrentPopup",
            "original_fully_qualified_name": "ImGui::GetMousePosOnOpeningCurrentPopup",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1017
            }
        },
        {
            "name": "ImGui_IsMouseDragging",
            "original_fully_qualified_name": "ImGui::IsMouseDragging",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "button",
                    "type": {
                        "declaration": "ImGuiMouseButton",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseButton"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "lock_threshold",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// is mouse dragging? (uses io.MouseDraggingThreshold if lock_threshold < 0.0f)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1018
            }
        },
        {
            "name": "ImGui_GetMouseDragDelta",
            "original_fully_qualified_name": "ImGui::GetMouseDragDelta",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [
                {
                    "name": "button",
                    "type": {
                        "declaration": "ImGuiMouseButton",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseButton"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "lock_threshold",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (uses io.MouseDraggingThreshold if lock_threshold < 0.0f)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1019
            }
        },
        {
            "name": "ImGui_ResetMouseDragDelta",
            "original_fully_qualified_name": "ImGui::ResetMouseDragDelta",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "button",
                    "type": {
                        "declaration": "ImGuiMouseButton",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseButton"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "//"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1020
            }
        },
        {
            "name": "ImGui_GetMouseCursor",
            "original_fully_qualified_name": "ImGui::GetMouseCursor",
            "return_type": {
                "declaration": "ImGuiMouseCursor",
                "description": {
                    "kind": "User",
                    "name": "ImGuiMouseCursor"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// get desired mouse cursor shape. Important: reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1021
            }
        },
        {
            "name": "ImGui_SetMouseCursor",
            "original_fully_qualified_name": "ImGui::SetMouseCursor",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "cursor_type",
                    "type": {
                        "declaration": "ImGuiMouseCursor",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseCursor"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// set desired mouse cursor shape"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1022
            }
        },
        {
            "name": "ImGui_SetNextFrameWantCaptureMouse",
            "original_fully_qualified_name": "ImGui::SetNextFrameWantCaptureMouse",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "want_capture_mouse",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when true it instucts your app to ignore inputs). This is equivalent to setting \"io.WantCaptureMouse = want_capture_mouse;\" after the next NewFrame() call."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1023
            }
        },
        {
            "name": "ImGui_GetClipboardText",
            "original_fully_qualified_name": "ImGui::GetClipboardText",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Clipboard Utilities",
                    "// - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1027
            }
        },
        {
            "name": "ImGui_SetClipboardText",
            "original_fully_qualified_name": "ImGui::SetClipboardText",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1028
            }
        },
        {
            "name": "ImGui_LoadIniSettingsFromDisk",
            "original_fully_qualified_name": "ImGui::LoadIniSettingsFromDisk",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "ini_filename",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Settings/.Ini Utilities",
                    "// - The disk functions are automatically called if io.IniFilename != NULL (default is \"imgui.ini\").",
                    "// - Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.",
                    "// - Important: default value \"imgui.ini\" is relative to current working dir! Most apps will want to lock this to an absolute path (e.g. same path as executables)."
                ],
                "attached": "// call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1034
            }
        },
        {
            "name": "ImGui_LoadIniSettingsFromMemory",
            "original_fully_qualified_name": "ImGui::LoadIniSettingsFromMemory",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "ini_data",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "ini_size",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1035
            }
        },
        {
            "name": "ImGui_SaveIniSettingsToDisk",
            "original_fully_qualified_name": "ImGui::SaveIniSettingsToDisk",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "ini_filename",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1036
            }
        },
        {
            "name": "ImGui_SaveIniSettingsToMemory",
            "original_fully_qualified_name": "ImGui::SaveIniSettingsToMemory",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "out_ini_size",
                    "type": {
                        "declaration": "size_t*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "size_t"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1037
            }
        },
        {
            "name": "ImGui_DebugTextEncoding",
            "original_fully_qualified_name": "ImGui::DebugTextEncoding",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Debug Utilities",
                    "// - Your main debugging friend is the ShowMetricsWindow() function, which is also accessible from Demo->Tools->Metrics Debugger"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1041
            }
        },
        {
            "name": "ImGui_DebugFlashStyleColor",
            "original_fully_qualified_name": "ImGui::DebugFlashStyleColor",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImGuiCol",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiCol"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1042
            }
        },
        {
            "name": "ImGui_DebugStartItemPicker",
            "original_fully_qualified_name": "ImGui::DebugStartItemPicker",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1043
            }
        },
        {
            "name": "ImGui_DebugCheckVersionAndDataLayout",
            "original_fully_qualified_name": "ImGui::DebugCheckVersionAndDataLayout",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "version_str",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "sz_io",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "sz_style",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "sz_vec2",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "sz_vec4",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "sz_drawvert",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "sz_drawidx",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// This is called by IMGUI_CHECKVERSION() macro."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1044
            }
        },
        {
            "name": "ImGui_DebugLog",
            "original_fully_qualified_name": "ImGui::DebugLog",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg1__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Call via IMGUI_DEBUG_LOG() for maximum stripping in caller code!"
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_DEBUG_TOOLS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1046
            }
        },
        {
            "name": "ImGui_DebugLogV",
            "original_fully_qualified_name": "ImGui::DebugLogV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_DEBUG_TOOLS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1047
            }
        },
        {
            "name": "ImGui_SetAllocatorFunctions",
            "original_fully_qualified_name": "ImGui::SetAllocatorFunctions",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "alloc_func",
                    "type": {
                        "declaration": "ImGuiMemAllocFunc",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMemAllocFunc"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "free_func",
                    "type": {
                        "declaration": "ImGuiMemFreeFunc",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMemFreeFunc"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "user_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// Memory Allocators",
                    "// - Those functions are not reliant on the current context.",
                    "// - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()",
                    "//   for each static/DLL boundary you are calling from. Read \"Context and Memory Allocators\" section of imgui.cpp for more details."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1054
            }
        },
        {
            "name": "ImGui_GetAllocatorFunctions",
            "original_fully_qualified_name": "ImGui::GetAllocatorFunctions",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "p_alloc_func",
                    "type": {
                        "declaration": "ImGuiMemAllocFunc*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiMemAllocFunc"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_free_func",
                    "type": {
                        "declaration": "ImGuiMemFreeFunc*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiMemFreeFunc"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_user_data",
                    "type": {
                        "declaration": "void**",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Builtin",
                                    "builtin_type": "void"
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1055
            }
        },
        {
            "name": "ImGui_MemAlloc",
            "original_fully_qualified_name": "ImGui::MemAlloc",
            "return_type": {
                "declaration": "void*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "void"
                    }
                }
            },
            "arguments": [
                {
                    "name": "size",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1056
            }
        },
        {
            "name": "ImGui_MemFree",
            "original_fully_qualified_name": "ImGui::MemFree",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "ptr",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1057
            }
        },
        {
            "name": "ImVector_Construct",
            "original_fully_qualified_name": "ImVector_Construct",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "vector",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": true,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Construct a zero-size ImVector<> (of any type). This is primarily useful when calling ImFontGlyphRangesBuilder_BuildRanges()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1
            }
        },
        {
            "name": "ImVector_Destruct",
            "original_fully_qualified_name": "ImVector_Destruct",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "vector",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": true,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Destruct an ImVector<> (of any type). Important: Frees the vector memory but does not call destructors on contained objects (if they have them)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1
            }
        },
        {
            "name": "ImStr_FromCharStr",
            "original_fully_qualified_name": "ImStr_FromCharStr",
            "return_type": {
                "declaration": "ImStr",
                "description": {
                    "kind": "User",
                    "name": "ImStr"
                }
            },
            "arguments": [
                {
                    "name": "b",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": true,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Build an ImStr from a regular const char* (no data is copied, so you need to make sure the original char* isn't altered as long as you are using the ImStr)."
            },
            "conditionals": [
                {
                    "condition": "if",
                    "expression": "defined(IMGUI_HAS_IMSTR)"
                },
                {
                    "condition": "if",
                    "expression": "IMGUI_HAS_IMSTR"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 1
            }
        },
        {
            "name": "ImGuiStyle_ScaleAllSizes",
            "original_fully_qualified_name": "ScaleAllSizes",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStyle*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStyle"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "scale_factor",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStyle",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2189
            }
        },
        {
            "name": "ImGuiIO_AddKeyEvent",
            "original_fully_qualified_name": "AddKeyEvent",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiKey",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKey"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "down",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "preceding": [
                    "// Input Functions"
                ],
                "attached": "// Queue a new key down/up event. Key should be \"translated\" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2335
            }
        },
        {
            "name": "ImGuiIO_AddKeyAnalogEvent",
            "original_fully_qualified_name": "AddKeyAnalogEvent",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiKey",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKey"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "down",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Queue a new key down/up event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2336
            }
        },
        {
            "name": "ImGuiIO_AddMousePosEvent",
            "original_fully_qualified_name": "AddMousePosEvent",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "y",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2337
            }
        },
        {
            "name": "ImGuiIO_AddMouseButtonEvent",
            "original_fully_qualified_name": "AddMouseButtonEvent",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "button",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "down",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Queue a mouse button change"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2338
            }
        },
        {
            "name": "ImGuiIO_AddMouseWheelEvent",
            "original_fully_qualified_name": "AddMouseWheelEvent",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "wheel_x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "wheel_y",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Queue a mouse wheel update. wheel_y<0: scroll down, wheel_y>0: scroll up, wheel_x<0: scroll right, wheel_x>0: scroll left."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2339
            }
        },
        {
            "name": "ImGuiIO_AddMouseSourceEvent",
            "original_fully_qualified_name": "AddMouseSourceEvent",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "source",
                    "type": {
                        "declaration": "ImGuiMouseSource",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseSource"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Queue a mouse source change (Mouse/TouchScreen/Pen)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2340
            }
        },
        {
            "name": "ImGuiIO_AddFocusEvent",
            "original_fully_qualified_name": "AddFocusEvent",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "focused",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Queue a gain/loss of focus for the application (generally based on OS/platform focus of your window)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2341
            }
        },
        {
            "name": "ImGuiIO_AddInputCharacter",
            "original_fully_qualified_name": "AddInputCharacter",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "c",
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Queue a new character input"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2342
            }
        },
        {
            "name": "ImGuiIO_AddInputCharacterUTF16",
            "original_fully_qualified_name": "AddInputCharacterUTF16",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "c",
                    "type": {
                        "declaration": "ImWchar16",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar16"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Queue a new character input from a UTF-16 character, it can be a surrogate"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2343
            }
        },
        {
            "name": "ImGuiIO_AddInputCharactersUTF8",
            "original_fully_qualified_name": "AddInputCharactersUTF8",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "str",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Queue a new characters input from a UTF-8 string"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2344
            }
        },
        {
            "name": "ImGuiIO_SetKeyEventNativeData",
            "original_fully_qualified_name": "SetKeyEventNativeData",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiKey",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiKey"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "native_keycode",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "native_scancode",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "native_legacy_index",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// [Optional] Specify index for legacy <1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2346
            }
        },
        {
            "name": "ImGuiIO_SetAppAcceptingEvents",
            "original_fully_qualified_name": "SetAppAcceptingEvents",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "accepting_events",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Set master flag for accepting key/mouse/text events (default to true). Useful if you have native dialog boxes that are interrupting your application loop/refresh, and you want to disable events being queued while your app is frozen."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2347
            }
        },
        {
            "name": "ImGuiIO_ClearEventsQueue",
            "original_fully_qualified_name": "ClearEventsQueue",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Clear all incoming events."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2348
            }
        },
        {
            "name": "ImGuiIO_ClearInputKeys",
            "original_fully_qualified_name": "ClearInputKeys",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Clear current keyboard/gamepad state + current frame text input buffer. Equivalent to releasing all keys/buttons."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2349
            }
        },
        {
            "name": "ImGuiIO_ClearInputMouse",
            "original_fully_qualified_name": "ClearInputMouse",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// Clear current mouse state."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2350
            }
        },
        {
            "name": "ImGuiIO_ClearInputCharacters",
            "original_fully_qualified_name": "ClearInputCharacters",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiIO*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiIO",
            "comments": {
                "attached": "// [Obsoleted in 1.89.8] Clear the current frame text input buffer. Now included within ClearInputKeys()."
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2352
            }
        },
        {
            "name": "ImGuiInputTextCallbackData_DeleteChars",
            "original_fully_qualified_name": "DeleteChars",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiInputTextCallbackData*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiInputTextCallbackData"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "bytes_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiInputTextCallbackData",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2478
            }
        },
        {
            "name": "ImGuiInputTextCallbackData_InsertChars",
            "original_fully_qualified_name": "InsertChars",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiInputTextCallbackData*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiInputTextCallbackData"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiInputTextCallbackData",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2479
            }
        },
        {
            "name": "ImGuiInputTextCallbackData_SelectAll",
            "original_fully_qualified_name": "SelectAll",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiInputTextCallbackData*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiInputTextCallbackData"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiInputTextCallbackData",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2480
            }
        },
        {
            "name": "ImGuiInputTextCallbackData_ClearSelection",
            "original_fully_qualified_name": "ClearSelection",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiInputTextCallbackData*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiInputTextCallbackData"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiInputTextCallbackData",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2481
            }
        },
        {
            "name": "ImGuiInputTextCallbackData_HasSelection",
            "original_fully_qualified_name": "HasSelection",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiInputTextCallbackData*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiInputTextCallbackData",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiInputTextCallbackData",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2482
            }
        },
        {
            "name": "ImGuiPayload_Clear",
            "original_fully_qualified_name": "Clear",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiPayload*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiPayload"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiPayload",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2511
            }
        },
        {
            "name": "ImGuiPayload_IsDataType",
            "original_fully_qualified_name": "IsDataType",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiPayload*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiPayload",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "type",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiPayload",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2512
            }
        },
        {
            "name": "ImGuiPayload_IsPreview",
            "original_fully_qualified_name": "IsPreview",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiPayload*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiPayload",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiPayload",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2513
            }
        },
        {
            "name": "ImGuiPayload_IsDelivery",
            "original_fully_qualified_name": "IsDelivery",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiPayload*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiPayload",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiPayload",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2514
            }
        },
        {
            "name": "ImGuiTextFilter_ImGuiTextRange_empty",
            "original_fully_qualified_name": "empty",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiTextFilter_ImGuiTextRange*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextFilter_ImGuiTextRange",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextFilter_ImGuiTextRange",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2556
            }
        },
        {
            "name": "ImGuiTextFilter_ImGuiTextRange_split",
            "original_fully_qualified_name": "split",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiTextFilter_ImGuiTextRange*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextFilter_ImGuiTextRange",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "separator",
                    "type": {
                        "declaration": "char",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "char"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out",
                    "type": {
                        "declaration": "ImVector_ImGuiTextFilter_ImGuiTextRange*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVector_ImGuiTextFilter_ImGuiTextRange"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextFilter_ImGuiTextRange",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2557
            }
        },
        {
            "name": "ImGuiTextFilter_Draw",
            "original_fully_qualified_name": "Draw",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiTextFilter*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextFilter"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "\"Filter (inc,-exc)\"",
                    "is_instance_pointer": false
                },
                {
                    "name": "width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextFilter",
            "comments": {
                "attached": "// Helper calling InputText+Build"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2542
            }
        },
        {
            "name": "ImGuiTextFilter_PassFilter",
            "original_fully_qualified_name": "PassFilter",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiTextFilter*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextFilter",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextFilter",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2543
            }
        },
        {
            "name": "ImGuiTextFilter_Build",
            "original_fully_qualified_name": "Build",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiTextFilter*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextFilter"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextFilter",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2544
            }
        },
        {
            "name": "ImGuiTextFilter_Clear",
            "original_fully_qualified_name": "Clear",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiTextFilter*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextFilter"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextFilter",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2545
            }
        },
        {
            "name": "ImGuiTextFilter_IsActive",
            "original_fully_qualified_name": "IsActive",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiTextFilter*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextFilter",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextFilter",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2546
            }
        },
        {
            "name": "ImGuiTextBuffer_begin",
            "original_fully_qualified_name": "begin",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiTextBuffer*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextBuffer",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextBuffer",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2573
            }
        },
        {
            "name": "ImGuiTextBuffer_end",
            "original_fully_qualified_name": "end",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiTextBuffer*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextBuffer",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextBuffer",
            "comments": {
                "attached": "// Buf is zero-terminated, so end() will point on the zero-terminator"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2574
            }
        },
        {
            "name": "ImGuiTextBuffer_size",
            "original_fully_qualified_name": "size",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiTextBuffer*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextBuffer",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextBuffer",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2575
            }
        },
        {
            "name": "ImGuiTextBuffer_empty",
            "original_fully_qualified_name": "empty",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiTextBuffer*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextBuffer",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextBuffer",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2576
            }
        },
        {
            "name": "ImGuiTextBuffer_clear",
            "original_fully_qualified_name": "clear",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiTextBuffer*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextBuffer"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextBuffer",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2577
            }
        },
        {
            "name": "ImGuiTextBuffer_reserve",
            "original_fully_qualified_name": "reserve",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiTextBuffer*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextBuffer"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "capacity",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextBuffer",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2578
            }
        },
        {
            "name": "ImGuiTextBuffer_c_str",
            "original_fully_qualified_name": "c_str",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiTextBuffer*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextBuffer",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextBuffer",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2579
            }
        },
        {
            "name": "ImGuiTextBuffer_append",
            "original_fully_qualified_name": "append",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiTextBuffer*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextBuffer"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "str",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "str_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextBuffer",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2580
            }
        },
        {
            "name": "ImGuiTextBuffer_appendf",
            "original_fully_qualified_name": "appendf",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiTextBuffer*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextBuffer"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "__unnamed_arg2__",
                    "is_array": false,
                    "is_varargs": true,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextBuffer",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2581
            }
        },
        {
            "name": "ImGuiTextBuffer_appendfv",
            "original_fully_qualified_name": "appendfv",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiTextBuffer*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiTextBuffer"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "fmt",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "args",
                    "type": {
                        "declaration": "va_list",
                        "description": {
                            "kind": "User",
                            "name": "va_list"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiTextBuffer",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2582
            }
        },
        {
            "name": "ImGuiStorage_Clear",
            "original_fully_qualified_name": "Clear",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "comments": {
                "preceding": [
                    "// - Get***() functions find pair, never add/allocate. Pairs are sorted so a query is O(log N)",
                    "// - Set***() functions find pair, insertion on demand if missing.",
                    "// - Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2611
            }
        },
        {
            "name": "ImGuiStorage_GetInt",
            "original_fully_qualified_name": "GetInt",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "default_val",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2612
            }
        },
        {
            "name": "ImGuiStorage_SetInt",
            "original_fully_qualified_name": "SetInt",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "val",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2613
            }
        },
        {
            "name": "ImGuiStorage_GetBool",
            "original_fully_qualified_name": "GetBool",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "default_val",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "false",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2614
            }
        },
        {
            "name": "ImGuiStorage_SetBool",
            "original_fully_qualified_name": "SetBool",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "val",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2615
            }
        },
        {
            "name": "ImGuiStorage_GetFloat",
            "original_fully_qualified_name": "GetFloat",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "default_val",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2616
            }
        },
        {
            "name": "ImGuiStorage_SetFloat",
            "original_fully_qualified_name": "SetFloat",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "val",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2617
            }
        },
        {
            "name": "ImGuiStorage_GetVoidPtr",
            "original_fully_qualified_name": "GetVoidPtr",
            "return_type": {
                "declaration": "void*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "void"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "comments": {
                "attached": "// default_val is NULL"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2618
            }
        },
        {
            "name": "ImGuiStorage_SetVoidPtr",
            "original_fully_qualified_name": "SetVoidPtr",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "val",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2619
            }
        },
        {
            "name": "ImGuiStorage_GetIntRef",
            "original_fully_qualified_name": "GetIntRef",
            "return_type": {
                "declaration": "int*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "int"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "default_val",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "comments": {
                "preceding": [
                    "// - Get***Ref() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set.",
                    "// - References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.",
                    "// - A typical use case where this is convenient for quick hacking (e.g. add storage during a live Edit&Continue session if you can't modify existing struct)",
                    "//      float* pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat(\"var\", pvar, 0, 100.0f); some_var += *pvar;"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2625
            }
        },
        {
            "name": "ImGuiStorage_GetBoolRef",
            "original_fully_qualified_name": "GetBoolRef",
            "return_type": {
                "declaration": "bool*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "bool"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "default_val",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "false",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2626
            }
        },
        {
            "name": "ImGuiStorage_GetFloatRef",
            "original_fully_qualified_name": "GetFloatRef",
            "return_type": {
                "declaration": "float*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "float"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "default_val",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2627
            }
        },
        {
            "name": "ImGuiStorage_GetVoidPtrRef",
            "original_fully_qualified_name": "GetVoidPtrRef",
            "return_type": {
                "declaration": "void**",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Pointer",
                        "inner_type": {
                            "kind": "Builtin",
                            "builtin_type": "void"
                        }
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "key",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "default_val",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2628
            }
        },
        {
            "name": "ImGuiStorage_BuildSortByKey",
            "original_fully_qualified_name": "BuildSortByKey",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "comments": {
                "preceding": [
                    "// Advanced: for quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2631
            }
        },
        {
            "name": "ImGuiStorage_SetAllInt",
            "original_fully_qualified_name": "SetAllInt",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "val",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiStorage",
            "comments": {
                "preceding": [
                    "// Obsolete: use on your own storage if you know only integer are being stored (open/close all tree nodes)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2633
            }
        },
        {
            "name": "ImGuiListClipper_Begin",
            "original_fully_qualified_name": "Begin",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiListClipper*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiListClipper"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "items_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "items_height",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiListClipper",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2675
            }
        },
        {
            "name": "ImGuiListClipper_End",
            "original_fully_qualified_name": "End",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiListClipper*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiListClipper"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiListClipper",
            "comments": {
                "attached": "// Automatically called on the last call of Step() that returns false."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2676
            }
        },
        {
            "name": "ImGuiListClipper_Step",
            "original_fully_qualified_name": "Step",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiListClipper*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiListClipper"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiListClipper",
            "comments": {
                "attached": "// Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2677
            }
        },
        {
            "name": "ImGuiListClipper_IncludeItemByIndex",
            "original_fully_qualified_name": "IncludeItemByIndex",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiListClipper*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiListClipper"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "item_index",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiListClipper",
            "comments": {
                "preceding": [
                    "// Call IncludeItemByIndex() or IncludeItemsByIndex() *BEFORE* first call to Step() if you need a range of items to not be clipped, regardless of their visibility.",
                    "// (Due to alignment / padding of certain items it is possible that an extra item may be included on either end of the display range)."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2681
            }
        },
        {
            "name": "ImGuiListClipper_IncludeItemsByIndex",
            "original_fully_qualified_name": "IncludeItemsByIndex",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiListClipper*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiListClipper"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "item_begin",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "item_end",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiListClipper",
            "comments": {
                "attached": "// item_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2682
            }
        },
        {
            "name": "ImGuiListClipper_SeekCursorForItem",
            "original_fully_qualified_name": "SeekCursorForItem",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiListClipper*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiListClipper"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "item_index",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiListClipper",
            "comments": {
                "preceding": [
                    "// Seek cursor toward given item. This is automatically called while stepping.",
                    "// - The only reason to call this is: you can use ImGuiListClipper::Begin(INT_MAX) if you don't know item count ahead of time.",
                    "// - In this case, after all steps are done, you'll want to call SeekCursorForItem(item_count)."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2687
            }
        },
        {
            "name": "ImGuiListClipper_IncludeRangeByIndices",
            "original_fully_qualified_name": "IncludeRangeByIndices",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiListClipper*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiListClipper"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "item_begin",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "item_end",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiListClipper",
            "comments": {
                "attached": "// [renamed in 1.89.9]"
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2690
            }
        },
        {
            "name": "ImGuiListClipper_ForceDisplayRangeByIndices",
            "original_fully_qualified_name": "ForceDisplayRangeByIndices",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiListClipper*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiListClipper"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "item_begin",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "item_end",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiListClipper",
            "comments": {
                "attached": "// [renamed in 1.89.6]"
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2691
            }
        },
        {
            "name": "ImColor_SetHSV",
            "original_fully_qualified_name": "SetHSV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImColor*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImColor"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "h",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "s",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImColor",
            "comments": {
                "preceding": [
                    "// FIXME-OBSOLETE: May need to obsolete/cleanup those helpers."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2767
            }
        },
        {
            "name": "ImColor_HSV",
            "original_fully_qualified_name": "ImColor::HSV",
            "return_type": {
                "declaration": "ImColor",
                "description": {
                    "kind": "User",
                    "name": "ImColor"
                }
            },
            "arguments": [
                {
                    "name": "h",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "s",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": true,
            "original_class": "ImColor",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2768
            }
        },
        {
            "name": "ImGuiSelectionBasicStorage_ApplyRequests",
            "original_fully_qualified_name": "ApplyRequests",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiSelectionBasicStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiSelectionBasicStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "ms_io",
                    "type": {
                        "declaration": "ImGuiMultiSelectIO*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiMultiSelectIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiSelectionBasicStorage",
            "comments": {
                "attached": "// Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2897
            }
        },
        {
            "name": "ImGuiSelectionBasicStorage_Contains",
            "original_fully_qualified_name": "Contains",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiSelectionBasicStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiSelectionBasicStorage",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "id",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiSelectionBasicStorage",
            "comments": {
                "attached": "// Query if an item id is in selection."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2898
            }
        },
        {
            "name": "ImGuiSelectionBasicStorage_Clear",
            "original_fully_qualified_name": "Clear",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiSelectionBasicStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiSelectionBasicStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiSelectionBasicStorage",
            "comments": {
                "attached": "// Clear selection"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2899
            }
        },
        {
            "name": "ImGuiSelectionBasicStorage_Swap",
            "original_fully_qualified_name": "Swap",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiSelectionBasicStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiSelectionBasicStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "r",
                    "type": {
                        "declaration": "ImGuiSelectionBasicStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiSelectionBasicStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiSelectionBasicStorage",
            "comments": {
                "attached": "// Swap two selections"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2900
            }
        },
        {
            "name": "ImGuiSelectionBasicStorage_SetItemSelected",
            "original_fully_qualified_name": "SetItemSelected",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiSelectionBasicStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiSelectionBasicStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "id",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "selected",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiSelectionBasicStorage",
            "comments": {
                "attached": "// Add/remove an item from selection (generally done by ApplyRequests() function)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2901
            }
        },
        {
            "name": "ImGuiSelectionBasicStorage_GetNextSelectedItem",
            "original_fully_qualified_name": "GetNextSelectedItem",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiSelectionBasicStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiSelectionBasicStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "opaque_it",
                    "type": {
                        "declaration": "void**",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Builtin",
                                    "builtin_type": "void"
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_id",
                    "type": {
                        "declaration": "ImGuiID*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiID"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiSelectionBasicStorage",
            "comments": {
                "attached": "// Iterate selection with 'void* it = NULL; ImGuiID id; while (selection.GetNextSelectedItem(&it, &id)) { ... }'"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2902
            }
        },
        {
            "name": "ImGuiSelectionBasicStorage_GetStorageIdFromIndex",
            "original_fully_qualified_name": "GetStorageIdFromIndex",
            "return_type": {
                "declaration": "ImGuiID",
                "description": {
                    "kind": "User",
                    "name": "ImGuiID"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiSelectionBasicStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiSelectionBasicStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "idx",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiSelectionBasicStorage",
            "comments": {
                "attached": "// Convert index to item id based on provided adapter."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2903
            }
        },
        {
            "name": "ImGuiSelectionExternalStorage_ApplyRequests",
            "original_fully_qualified_name": "ApplyRequests",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImGuiSelectionExternalStorage*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiSelectionExternalStorage"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "ms_io",
                    "type": {
                        "declaration": "ImGuiMultiSelectIO*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiMultiSelectIO"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiSelectionExternalStorage",
            "comments": {
                "attached": "// Apply selection requests by using AdapterSetItemSelected() calls"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2916
            }
        },
        {
            "name": "ImDrawCmd_GetTexID",
            "original_fully_qualified_name": "GetTexID",
            "return_type": {
                "declaration": "ImTextureID",
                "description": {
                    "kind": "User",
                    "name": "ImTextureID"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImDrawCmd*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawCmd",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawCmd",
            "comments": {
                "preceding": [
                    "// Since 1.83: returns ImTextureID associated with this draw call. Warning: DO NOT assume this is always same as 'TextureId' (we will change this function for an upcoming feature)"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 2966
            }
        },
        {
            "name": "ImDrawListSplitter_Clear",
            "original_fully_qualified_name": "Clear",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawListSplitter*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawListSplitter"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawListSplitter",
            "comments": {
                "attached": "// Do not clear Channels[] so our allocations are reused next frame"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3011
            }
        },
        {
            "name": "ImDrawListSplitter_ClearFreeMemory",
            "original_fully_qualified_name": "ClearFreeMemory",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawListSplitter*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawListSplitter"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawListSplitter",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3012
            }
        },
        {
            "name": "ImDrawListSplitter_Split",
            "original_fully_qualified_name": "Split",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawListSplitter*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawListSplitter"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "draw_list",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawListSplitter",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3013
            }
        },
        {
            "name": "ImDrawListSplitter_Merge",
            "original_fully_qualified_name": "Merge",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawListSplitter*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawListSplitter"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "draw_list",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawListSplitter",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3014
            }
        },
        {
            "name": "ImDrawListSplitter_SetCurrentChannel",
            "original_fully_qualified_name": "SetCurrentChannel",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawListSplitter*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawListSplitter"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "draw_list",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "channel_idx",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawListSplitter",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3015
            }
        },
        {
            "name": "ImDrawList_PushClipRect",
            "original_fully_qualified_name": "PushClipRect",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "clip_rect_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "clip_rect_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "intersect_with_current_clip_rect",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "false",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3085
            }
        },
        {
            "name": "ImDrawList_PushClipRectFullScreen",
            "original_fully_qualified_name": "PushClipRectFullScreen",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3086
            }
        },
        {
            "name": "ImDrawList_PopClipRect",
            "original_fully_qualified_name": "PopClipRect",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3087
            }
        },
        {
            "name": "ImDrawList_PushTextureID",
            "original_fully_qualified_name": "PushTextureID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "texture_id",
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3088
            }
        },
        {
            "name": "ImDrawList_PopTextureID",
            "original_fully_qualified_name": "PopTextureID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3089
            }
        },
        {
            "name": "ImDrawList_GetClipRectMin",
            "original_fully_qualified_name": "GetClipRectMin",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3090
            }
        },
        {
            "name": "ImDrawList_GetClipRectMax",
            "original_fully_qualified_name": "GetClipRectMax",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3091
            }
        },
        {
            "name": "ImDrawList_AddLine",
            "original_fully_qualified_name": "AddLine",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "preceding": [
                    "// Primitives",
                    "// - Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have \"inward\" anti-aliasing.",
                    "// - For rectangular primitives, \"p_min\" and \"p_max\" represent the upper-left and lower-right corners.",
                    "// - For circle primitives, use \"num_segments == 0\" to automatically calculate tessellation (preferred).",
                    "//   In older versions (until Dear ImGui 1.77) the AddCircle functions defaulted to num_segments == 12.",
                    "//   In future versions we will use textures to provide cheaper and higher-quality circles.",
                    "//   Use AddNgon() and AddNgonFilled() functions if you need to guarantee a specific number of sides."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3100
            }
        },
        {
            "name": "ImDrawList_AddRect",
            "original_fully_qualified_name": "AddRect",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rounding",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImDrawFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// a: upper-left, b: lower-right (== upper-left + size)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3101
            }
        },
        {
            "name": "ImDrawList_AddRectFilled",
            "original_fully_qualified_name": "AddRectFilled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rounding",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImDrawFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// a: upper-left, b: lower-right (== upper-left + size)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3102
            }
        },
        {
            "name": "ImDrawList_AddRectFilledMultiColor",
            "original_fully_qualified_name": "AddRectFilledMultiColor",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col_upr_left",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col_upr_right",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col_bot_right",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col_bot_left",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3103
            }
        },
        {
            "name": "ImDrawList_AddQuad",
            "original_fully_qualified_name": "AddQuad",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p3",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p4",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3104
            }
        },
        {
            "name": "ImDrawList_AddQuadFilled",
            "original_fully_qualified_name": "AddQuadFilled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p3",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p4",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3105
            }
        },
        {
            "name": "ImDrawList_AddTriangle",
            "original_fully_qualified_name": "AddTriangle",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p3",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3106
            }
        },
        {
            "name": "ImDrawList_AddTriangleFilled",
            "original_fully_qualified_name": "AddTriangleFilled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p3",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3107
            }
        },
        {
            "name": "ImDrawList_AddCircle",
            "original_fully_qualified_name": "AddCircle",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3108
            }
        },
        {
            "name": "ImDrawList_AddCircleFilled",
            "original_fully_qualified_name": "AddCircleFilled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3109
            }
        },
        {
            "name": "ImDrawList_AddNgon",
            "original_fully_qualified_name": "AddNgon",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3110
            }
        },
        {
            "name": "ImDrawList_AddNgonFilled",
            "original_fully_qualified_name": "AddNgonFilled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3111
            }
        },
        {
            "name": "ImDrawList_AddEllipse",
            "original_fully_qualified_name": "AddEllipse",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rot",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3112
            }
        },
        {
            "name": "ImDrawList_AddEllipseFilled",
            "original_fully_qualified_name": "AddEllipseFilled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rot",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3113
            }
        },
        {
            "name": "ImDrawList_AddText",
            "original_fully_qualified_name": "AddText",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_begin",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3114
            }
        },
        {
            "name": "ImDrawList_AddTextImFontPtr",
            "original_fully_qualified_name": "AddText",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "font",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "font_size",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_begin",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "wrap_width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "cpu_fine_clip_rect",
                    "type": {
                        "declaration": "const ImVec4*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec4",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3115
            }
        },
        {
            "name": "ImDrawList_AddBezierCubic",
            "original_fully_qualified_name": "AddBezierCubic",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p3",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p4",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// Cubic Bezier (4 control points)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3116
            }
        },
        {
            "name": "ImDrawList_AddBezierQuadratic",
            "original_fully_qualified_name": "AddBezierQuadratic",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p3",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// Quadratic Bezier (3 control points)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3117
            }
        },
        {
            "name": "ImDrawList_AddPolyline",
            "original_fully_qualified_name": "AddPolyline",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "points",
                    "type": {
                        "declaration": "const ImVec2*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_points",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImDrawFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "preceding": [
                    "// General polygon",
                    "// - Only simple polygons are supported by filling functions (no self-intersections, no holes).",
                    "// - Concave polygon fill is more expensive than convex one: it has O(N^2) complexity. Provided as a convenience fo user but not used by main library."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3122
            }
        },
        {
            "name": "ImDrawList_AddConvexPolyFilled",
            "original_fully_qualified_name": "AddConvexPolyFilled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "points",
                    "type": {
                        "declaration": "const ImVec2*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_points",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3123
            }
        },
        {
            "name": "ImDrawList_AddConcavePolyFilled",
            "original_fully_qualified_name": "AddConcavePolyFilled",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "points",
                    "type": {
                        "declaration": "const ImVec2*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_points",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3124
            }
        },
        {
            "name": "ImDrawList_AddImage",
            "original_fully_qualified_name": "AddImage",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "user_texture_id",
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "uv_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(1, 1)",
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "IM_COL32_WHITE",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "preceding": [
                    "// Image primitives",
                    "// - Read FAQ to understand what ImTextureID is.",
                    "// - \"p_min\" and \"p_max\" represent the upper-left and lower-right corners of the rectangle.",
                    "// - \"uv_min\" and \"uv_max\" represent the normalized texture coordinates to use for those corners. Using (0,0)->(1,1) texture coordinates will generally display the entire texture."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3130
            }
        },
        {
            "name": "ImDrawList_AddImageQuad",
            "original_fully_qualified_name": "AddImageQuad",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "user_texture_id",
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p3",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p4",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv1",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "uv2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(1, 0)",
                    "is_instance_pointer": false
                },
                {
                    "name": "uv3",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(1, 1)",
                    "is_instance_pointer": false
                },
                {
                    "name": "uv4",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 1)",
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "IM_COL32_WHITE",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3131
            }
        },
        {
            "name": "ImDrawList_AddImageRounded",
            "original_fully_qualified_name": "AddImageRounded",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "user_texture_id",
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rounding",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImDrawFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3132
            }
        },
        {
            "name": "ImDrawList_PathClear",
            "original_fully_qualified_name": "PathClear",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "preceding": [
                    "// Stateful path API, add points then finish with PathFillConvex() or PathStroke()",
                    "// - Important: filled shapes must always use clockwise winding order! The anti-aliasing fringe depends on it. Counter-clockwise shapes will have \"inward\" anti-aliasing.",
                    "//   so e.g. 'PathArcTo(center, radius, PI * -0.5f, PI)' is ok, whereas 'PathArcTo(center, radius, PI, PI * -0.5f)' won't have correct anti-aliasing when followed by PathFillConvex()."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3137
            }
        },
        {
            "name": "ImDrawList_PathLineTo",
            "original_fully_qualified_name": "PathLineTo",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3138
            }
        },
        {
            "name": "ImDrawList_PathLineToMergeDuplicate",
            "original_fully_qualified_name": "PathLineToMergeDuplicate",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3139
            }
        },
        {
            "name": "ImDrawList_PathFillConvex",
            "original_fully_qualified_name": "PathFillConvex",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3140
            }
        },
        {
            "name": "ImDrawList_PathFillConcave",
            "original_fully_qualified_name": "PathFillConcave",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3141
            }
        },
        {
            "name": "ImDrawList_PathStroke",
            "original_fully_qualified_name": "PathStroke",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImDrawFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                },
                {
                    "name": "thickness",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "1.0f",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3142
            }
        },
        {
            "name": "ImDrawList_PathArcTo",
            "original_fully_qualified_name": "PathArcTo",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3143
            }
        },
        {
            "name": "ImDrawList_PathArcToFast",
            "original_fully_qualified_name": "PathArcToFast",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_min_of_12",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_max_of_12",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// Use precomputed angles for a 12 steps circle"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3144
            }
        },
        {
            "name": "ImDrawList_PathEllipticalArcTo",
            "original_fully_qualified_name": "PathEllipticalArcTo",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rot",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// Ellipse"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3145
            }
        },
        {
            "name": "ImDrawList_PathBezierCubicCurveTo",
            "original_fully_qualified_name": "PathBezierCubicCurveTo",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p3",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p4",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// Cubic Bezier (4 control points)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3146
            }
        },
        {
            "name": "ImDrawList_PathBezierQuadraticCurveTo",
            "original_fully_qualified_name": "PathBezierQuadraticCurveTo",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "p2",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "p3",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// Quadratic Bezier (3 control points)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3147
            }
        },
        {
            "name": "ImDrawList_PathRect",
            "original_fully_qualified_name": "PathRect",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "rect_min",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rect_max",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "rounding",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "flags",
                    "type": {
                        "declaration": "ImDrawFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3148
            }
        },
        {
            "name": "ImDrawList_AddCallback",
            "original_fully_qualified_name": "AddCallback",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "callback",
                    "type": {
                        "declaration": "ImDrawCallback",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawCallback"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "userdata",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "userdata_size",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "preceding": [
                    "// Advanced: Draw Callbacks",
                    "// - May be used to alter render state (change sampler, blending, current shader). May be used to emit custom rendering commands (difficult to do correctly, but possible).",
                    "// - Use special ImDrawCallback_ResetRenderState callback to instruct backend to reset its render state to the default.",
                    "// - Your rendering loop must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles. All standard backends are honoring this.",
                    "// - For some backends, the callback may access selected render-states exposed by the backend in a ImGui_ImplXXXX_RenderState structure pointed to by platform_io.Renderer_RenderState.",
                    "// - IMPORTANT: please be mindful of the different level of indirection between using size==0 (copying argument) and using size>0 (copying pointed data into a buffer).",
                    "//   - If userdata_size == 0: we copy/store the 'userdata' argument as-is. It will be available unmodified in ImDrawCmd::UserCallbackData during render.",
                    "//   - If userdata_size > 0,  we copy/store 'userdata_size' bytes pointed to by 'userdata'. We store them in a buffer stored inside the drawlist. ImDrawCmd::UserCallbackData will point inside that buffer so you have to retrieve data from there. Your callback may need to use ImDrawCmd::UserCallbackDataSize if you expect dynamically-sized data.",
                    "//   - Support for userdata_size > 0 was added in v1.91.4, October 2024. So earlier code always only allowed to copy/store a simple void*."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3159
            }
        },
        {
            "name": "ImDrawList_AddDrawCmd",
            "original_fully_qualified_name": "AddDrawCmd",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "preceding": [
                    "// Advanced: Miscellaneous"
                ],
                "attached": "// This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3162
            }
        },
        {
            "name": "ImDrawList_CloneOutput",
            "original_fully_qualified_name": "CloneOutput",
            "return_type": {
                "declaration": "ImDrawList*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImDrawList"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3163
            }
        },
        {
            "name": "ImDrawList_ChannelsSplit",
            "original_fully_qualified_name": "ChannelsSplit",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "preceding": [
                    "// Advanced: Channels",
                    "// - Use to split render into layers. By switching channels to can render out-of-order (e.g. submit FG primitives before BG primitives)",
                    "// - Use to minimize draw calls (e.g. if going back-and-forth between multiple clipping rectangles, prefer to append into separate channels then merge at the end)",
                    "// - This API shouldn't have been in ImDrawList in the first place!",
                    "//   Prefer using your own persistent instance of ImDrawListSplitter as you can stack them.",
                    "//   Using the ImDrawList::ChannelsXXXX you cannot stack a split over another."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3171
            }
        },
        {
            "name": "ImDrawList_ChannelsMerge",
            "original_fully_qualified_name": "ChannelsMerge",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3172
            }
        },
        {
            "name": "ImDrawList_ChannelsSetCurrent",
            "original_fully_qualified_name": "ChannelsSetCurrent",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "n",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3173
            }
        },
        {
            "name": "ImDrawList_PrimReserve",
            "original_fully_qualified_name": "PrimReserve",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "idx_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "vtx_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "preceding": [
                    "// Advanced: Primitives allocations",
                    "// - We render triangles (three vertices)",
                    "// - All primitives needs to be reserved via PrimReserve() beforehand."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3178
            }
        },
        {
            "name": "ImDrawList_PrimUnreserve",
            "original_fully_qualified_name": "PrimUnreserve",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "idx_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "vtx_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3179
            }
        },
        {
            "name": "ImDrawList_PrimRect",
            "original_fully_qualified_name": "PrimRect",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "a",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "b",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// Axis aligned rectangle (composed of two triangles)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3180
            }
        },
        {
            "name": "ImDrawList_PrimRectUV",
            "original_fully_qualified_name": "PrimRectUV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "a",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "b",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv_a",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv_b",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3181
            }
        },
        {
            "name": "ImDrawList_PrimQuadUV",
            "original_fully_qualified_name": "PrimQuadUV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "a",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "b",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "c",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "d",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv_a",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv_b",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv_c",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv_d",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3182
            }
        },
        {
            "name": "ImDrawList_PrimWriteVtx",
            "original_fully_qualified_name": "PrimWriteVtx",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3183
            }
        },
        {
            "name": "ImDrawList_PrimWriteIdx",
            "original_fully_qualified_name": "PrimWriteIdx",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "idx",
                    "type": {
                        "declaration": "ImDrawIdx",
                        "description": {
                            "kind": "User",
                            "name": "ImDrawIdx"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3184
            }
        },
        {
            "name": "ImDrawList_PrimVtx",
            "original_fully_qualified_name": "PrimVtx",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "uv",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "attached": "// Write vertex with unique index"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3185
            }
        },
        {
            "name": "ImDrawList__ResetForNewFrame",
            "original_fully_qualified_name": "_ResetForNewFrame",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "comments": {
                "preceding": [
                    "// [Internal helpers]"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3195
            }
        },
        {
            "name": "ImDrawList__ClearFreeMemory",
            "original_fully_qualified_name": "_ClearFreeMemory",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3196
            }
        },
        {
            "name": "ImDrawList__PopUnusedDrawCmd",
            "original_fully_qualified_name": "_PopUnusedDrawCmd",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3197
            }
        },
        {
            "name": "ImDrawList__TryMergeDrawCmds",
            "original_fully_qualified_name": "_TryMergeDrawCmds",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3198
            }
        },
        {
            "name": "ImDrawList__OnChangedClipRect",
            "original_fully_qualified_name": "_OnChangedClipRect",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3199
            }
        },
        {
            "name": "ImDrawList__OnChangedTextureID",
            "original_fully_qualified_name": "_OnChangedTextureID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3200
            }
        },
        {
            "name": "ImDrawList__OnChangedVtxOffset",
            "original_fully_qualified_name": "_OnChangedVtxOffset",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3201
            }
        },
        {
            "name": "ImDrawList__SetTextureID",
            "original_fully_qualified_name": "_SetTextureID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "texture_id",
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3202
            }
        },
        {
            "name": "ImDrawList__CalcCircleAutoSegmentCount",
            "original_fully_qualified_name": "_CalcCircleAutoSegmentCount",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3203
            }
        },
        {
            "name": "ImDrawList__PathArcToFastEx",
            "original_fully_qualified_name": "_PathArcToFastEx",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_min_sample",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_max_sample",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_step",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3204
            }
        },
        {
            "name": "ImDrawList__PathArcToN",
            "original_fully_qualified_name": "_PathArcToN",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "center",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "radius",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_min",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "a_max",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "num_segments",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawList",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3205
            }
        },
        {
            "name": "ImDrawData_Clear",
            "original_fully_qualified_name": "Clear",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawData*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawData"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawData",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3225
            }
        },
        {
            "name": "ImDrawData_AddDrawList",
            "original_fully_qualified_name": "AddDrawList",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawData*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawData"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "draw_list",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawData",
            "comments": {
                "attached": "// Helper to add an external draw list into an existing ImDrawData."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3226
            }
        },
        {
            "name": "ImDrawData_DeIndexAllBuffers",
            "original_fully_qualified_name": "DeIndexAllBuffers",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawData*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawData"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawData",
            "comments": {
                "attached": "// Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3227
            }
        },
        {
            "name": "ImDrawData_ScaleClipRects",
            "original_fully_qualified_name": "ScaleClipRects",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImDrawData*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawData"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "fb_scale",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImDrawData",
            "comments": {
                "attached": "// Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3228
            }
        },
        {
            "name": "ImFontGlyphRangesBuilder_Clear",
            "original_fully_qualified_name": "Clear",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontGlyphRangesBuilder*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontGlyphRangesBuilder"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontGlyphRangesBuilder",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3282
            }
        },
        {
            "name": "ImFontGlyphRangesBuilder_GetBit",
            "original_fully_qualified_name": "GetBit",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImFontGlyphRangesBuilder*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontGlyphRangesBuilder",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "n",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontGlyphRangesBuilder",
            "comments": {
                "attached": "// Get bit n in the array"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3283
            }
        },
        {
            "name": "ImFontGlyphRangesBuilder_SetBit",
            "original_fully_qualified_name": "SetBit",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontGlyphRangesBuilder*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontGlyphRangesBuilder"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "n",
                    "type": {
                        "declaration": "size_t",
                        "description": {
                            "kind": "User",
                            "name": "size_t"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontGlyphRangesBuilder",
            "comments": {
                "attached": "// Set bit n in the array"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3284
            }
        },
        {
            "name": "ImFontGlyphRangesBuilder_AddChar",
            "original_fully_qualified_name": "AddChar",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontGlyphRangesBuilder*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontGlyphRangesBuilder"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "c",
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontGlyphRangesBuilder",
            "comments": {
                "attached": "// Add character"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3285
            }
        },
        {
            "name": "ImFontGlyphRangesBuilder_AddText",
            "original_fully_qualified_name": "AddText",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontGlyphRangesBuilder*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontGlyphRangesBuilder"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontGlyphRangesBuilder",
            "comments": {
                "attached": "// Add string (each character of the UTF-8 string are added)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3286
            }
        },
        {
            "name": "ImFontGlyphRangesBuilder_AddRanges",
            "original_fully_qualified_name": "AddRanges",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontGlyphRangesBuilder*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontGlyphRangesBuilder"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "ranges",
                    "type": {
                        "declaration": "const ImWchar*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImWchar",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontGlyphRangesBuilder",
            "comments": {
                "attached": "// Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCII/Latin+Ext"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3287
            }
        },
        {
            "name": "ImFontGlyphRangesBuilder_BuildRanges",
            "original_fully_qualified_name": "BuildRanges",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontGlyphRangesBuilder*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontGlyphRangesBuilder"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "out_ranges",
                    "type": {
                        "declaration": "ImVector_ImWchar*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVector_ImWchar"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontGlyphRangesBuilder",
            "comments": {
                "attached": "// Output new ranges (ImVector_Construct()/ImVector_Destruct() can be used to safely construct out_ranges)"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3288
            }
        },
        {
            "name": "ImFontAtlasCustomRect_IsPacked",
            "original_fully_qualified_name": "IsPacked",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImFontAtlasCustomRect*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlasCustomRect",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlasCustomRect",
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 3304
            }
        },
        {
            "name": "ImFontAtlas_AddFont",
            "original_fully_qualified_name": "AddFont",
            "return_type": {
                "declaration": "ImFont*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImFont"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "font_cfg",
                    "type": {
                        "declaration": "const ImFontConfig*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontConfig",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3337
            }
        },
        {
            "name": "ImFontAtlas_AddFontDefault",
            "original_fully_qualified_name": "AddFontDefault",
            "return_type": {
                "declaration": "ImFont*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImFont"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "font_cfg",
                    "type": {
                        "declaration": "const ImFontConfig*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontConfig",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3338
            }
        },
        {
            "name": "ImFontAtlas_AddFontFromFileTTF",
            "original_fully_qualified_name": "AddFontFromFileTTF",
            "return_type": {
                "declaration": "ImFont*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImFont"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "filename",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size_pixels",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "font_cfg",
                    "type": {
                        "declaration": "const ImFontConfig*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontConfig",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "glyph_ranges",
                    "type": {
                        "declaration": "const ImWchar*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImWchar",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3339
            }
        },
        {
            "name": "ImFontAtlas_AddFontFromMemoryTTF",
            "original_fully_qualified_name": "AddFontFromMemoryTTF",
            "return_type": {
                "declaration": "ImFont*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImFont"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "font_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "font_data_size",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size_pixels",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "font_cfg",
                    "type": {
                        "declaration": "const ImFontConfig*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontConfig",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "glyph_ranges",
                    "type": {
                        "declaration": "const ImWchar*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImWchar",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3340
            }
        },
        {
            "name": "ImFontAtlas_AddFontFromMemoryCompressedTTF",
            "original_fully_qualified_name": "AddFontFromMemoryCompressedTTF",
            "return_type": {
                "declaration": "ImFont*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImFont"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "compressed_font_data",
                    "type": {
                        "declaration": "const void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "compressed_font_data_size",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size_pixels",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "font_cfg",
                    "type": {
                        "declaration": "const ImFontConfig*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontConfig",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "glyph_ranges",
                    "type": {
                        "declaration": "const ImWchar*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImWchar",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3341
            }
        },
        {
            "name": "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",
            "original_fully_qualified_name": "AddFontFromMemoryCompressedBase85TTF",
            "return_type": {
                "declaration": "ImFont*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImFont"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "compressed_font_data_base85",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size_pixels",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "font_cfg",
                    "type": {
                        "declaration": "const ImFontConfig*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontConfig",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "glyph_ranges",
                    "type": {
                        "declaration": "const ImWchar*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImWchar",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3342
            }
        },
        {
            "name": "ImFontAtlas_ClearInputData",
            "original_fully_qualified_name": "ClearInputData",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3343
            }
        },
        {
            "name": "ImFontAtlas_ClearTexData",
            "original_fully_qualified_name": "ClearTexData",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3344
            }
        },
        {
            "name": "ImFontAtlas_ClearFonts",
            "original_fully_qualified_name": "ClearFonts",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Clear output font data (glyphs storage, UV coordinates)."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3345
            }
        },
        {
            "name": "ImFontAtlas_Clear",
            "original_fully_qualified_name": "Clear",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Clear all input and output."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3346
            }
        },
        {
            "name": "ImFontAtlas_Build",
            "original_fully_qualified_name": "Build",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "preceding": [
                    "// Build atlas, retrieve pixel data.",
                    "// User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().",
                    "// The pitch is always = Width * BytesPerPixels (1 or 4)",
                    "// Building in RGBA32 format is provided for convenience and compatibility, but note that unless you manually manipulate or copy color data into",
                    "// the texture (e.g. when using the AddCustomRect*** api), then the RGB pixels emitted will always be white (~75% of memory/bandwidth waste."
                ],
                "attached": "// Build pixels data. This is called automatically for you by the GetTexData*** functions."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3353
            }
        },
        {
            "name": "ImFontAtlas_GetTexDataAsAlpha8",
            "original_fully_qualified_name": "GetTexDataAsAlpha8",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "out_pixels",
                    "type": {
                        "declaration": "unsigned char**",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Builtin",
                                    "builtin_type": "unsigned_char"
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_width",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_height",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_bytes_per_pixel",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// 1 byte per-pixel"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3354
            }
        },
        {
            "name": "ImFontAtlas_GetTexDataAsRGBA32",
            "original_fully_qualified_name": "GetTexDataAsRGBA32",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "out_pixels",
                    "type": {
                        "declaration": "unsigned char**",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Builtin",
                                    "builtin_type": "unsigned_char"
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_width",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_height",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_bytes_per_pixel",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// 4 bytes-per-pixel"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3355
            }
        },
        {
            "name": "ImFontAtlas_IsBuilt",
            "original_fully_qualified_name": "IsBuilt",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Bit ambiguous: used to detect when user didn't build texture but effectively we should check TexID != 0 except that would be backend dependent..."
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3356
            }
        },
        {
            "name": "ImFontAtlas_SetTexID",
            "original_fully_qualified_name": "SetTexID",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "id",
                    "type": {
                        "declaration": "ImTextureID",
                        "description": {
                            "kind": "User",
                            "name": "ImTextureID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3357
            }
        },
        {
            "name": "ImFontAtlas_GetGlyphRangesDefault",
            "original_fully_qualified_name": "GetGlyphRangesDefault",
            "return_type": {
                "declaration": "const ImWchar*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImWchar",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "preceding": [
                    "// Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)",
                    "// NB: Make sure that your string are UTF-8 and NOT in your local code page.",
                    "// Read https://github.com/ocornut/imgui/blob/master/docs/FONTS.md/#about-utf-8-encoding for details.",
                    "// NB: Consider using ImFontGlyphRangesBuilder to build glyph ranges from textual data."
                ],
                "attached": "// Basic Latin, Extended Latin"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3367
            }
        },
        {
            "name": "ImFontAtlas_GetGlyphRangesGreek",
            "original_fully_qualified_name": "GetGlyphRangesGreek",
            "return_type": {
                "declaration": "const ImWchar*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImWchar",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Default + Greek and Coptic"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3368
            }
        },
        {
            "name": "ImFontAtlas_GetGlyphRangesKorean",
            "original_fully_qualified_name": "GetGlyphRangesKorean",
            "return_type": {
                "declaration": "const ImWchar*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImWchar",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Default + Korean characters"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3369
            }
        },
        {
            "name": "ImFontAtlas_GetGlyphRangesJapanese",
            "original_fully_qualified_name": "GetGlyphRangesJapanese",
            "return_type": {
                "declaration": "const ImWchar*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImWchar",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3370
            }
        },
        {
            "name": "ImFontAtlas_GetGlyphRangesChineseFull",
            "original_fully_qualified_name": "GetGlyphRangesChineseFull",
            "return_type": {
                "declaration": "const ImWchar*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImWchar",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3371
            }
        },
        {
            "name": "ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon",
            "original_fully_qualified_name": "GetGlyphRangesChineseSimplifiedCommon",
            "return_type": {
                "declaration": "const ImWchar*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImWchar",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3372
            }
        },
        {
            "name": "ImFontAtlas_GetGlyphRangesCyrillic",
            "original_fully_qualified_name": "GetGlyphRangesCyrillic",
            "return_type": {
                "declaration": "const ImWchar*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImWchar",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Default + about 400 Cyrillic characters"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3373
            }
        },
        {
            "name": "ImFontAtlas_GetGlyphRangesThai",
            "original_fully_qualified_name": "GetGlyphRangesThai",
            "return_type": {
                "declaration": "const ImWchar*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImWchar",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Default + Thai characters"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3374
            }
        },
        {
            "name": "ImFontAtlas_GetGlyphRangesVietnamese",
            "original_fully_qualified_name": "GetGlyphRangesVietnamese",
            "return_type": {
                "declaration": "const ImWchar*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImWchar",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "attached": "// Default + Vietnamese characters"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3375
            }
        },
        {
            "name": "ImFontAtlas_AddCustomRectRegular",
            "original_fully_qualified_name": "AddCustomRectRegular",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "width",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "height",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "preceding": [
                    "// You can request arbitrary rectangles to be packed into the atlas, for your own purposes.",
                    "// - After calling Build(), you can query the rectangle position and render your pixels.",
                    "// - If you render colored output, set 'atlas->TexPixelsUseColors = true' as this may help some backends decide of preferred texture format.",
                    "// - You can also request your rectangles to be mapped as font glyph (given a font + Unicode point),",
                    "//   so you can render e.g. custom colorful icons and use them as regular glyphs.",
                    "// - Read docs/FONTS.md for more details about using colorful icons.",
                    "// - Note: this API may be redesigned later in order to support multi-monitor varying DPI settings."
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3388
            }
        },
        {
            "name": "ImFontAtlas_AddCustomRectFontGlyph",
            "original_fully_qualified_name": "AddCustomRectFontGlyph",
            "return_type": {
                "declaration": "int",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "int"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "font",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "id",
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "width",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "height",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "advance_x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "offset",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "ImVec2(0, 0)",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3389
            }
        },
        {
            "name": "ImFontAtlas_GetCustomRectByIndex",
            "original_fully_qualified_name": "GetCustomRectByIndex",
            "return_type": {
                "declaration": "ImFontAtlasCustomRect*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImFontAtlasCustomRect"
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "index",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3390
            }
        },
        {
            "name": "ImFontAtlas_CalcCustomRectUV",
            "original_fully_qualified_name": "CalcCustomRectUV",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "rect",
                    "type": {
                        "declaration": "const ImFontAtlasCustomRect*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlasCustomRect",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_uv_min",
                    "type": {
                        "declaration": "ImVec2*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_uv_max",
                    "type": {
                        "declaration": "ImVec2*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "comments": {
                "preceding": [
                    "// [Internal]"
                ]
            },
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 3393
            }
        },
        {
            "name": "ImFontAtlas_GetMouseCursorTexData",
            "original_fully_qualified_name": "GetMouseCursorTexData",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFontAtlas*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontAtlas"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "cursor",
                    "type": {
                        "declaration": "ImGuiMouseCursor",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiMouseCursor"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_offset",
                    "type": {
                        "declaration": "ImVec2*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_size",
                    "type": {
                        "declaration": "ImVec2*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "out_uv_border",
                    "type": {
                        "declaration": "ImVec2[2]",
                        "description": {
                            "kind": "Array",
                            "bounds": "2",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "2",
                    "is_instance_pointer": false
                },
                {
                    "name": "out_uv_fill",
                    "type": {
                        "declaration": "ImVec2[2]",
                        "description": {
                            "kind": "Array",
                            "bounds": "2",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImVec2"
                            }
                        }
                    },
                    "is_array": true,
                    "is_varargs": false,
                    "array_bounds": "2",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFontAtlas",
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 3394
            }
        },
        {
            "name": "ImFont_FindGlyph",
            "original_fully_qualified_name": "FindGlyph",
            "return_type": {
                "declaration": "const ImFontGlyph*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImFontGlyph",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "c",
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3468
            }
        },
        {
            "name": "ImFont_FindGlyphNoFallback",
            "original_fully_qualified_name": "FindGlyphNoFallback",
            "return_type": {
                "declaration": "const ImFontGlyph*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "User",
                        "name": "ImFontGlyph",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "c",
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3469
            }
        },
        {
            "name": "ImFont_GetCharAdvance",
            "original_fully_qualified_name": "GetCharAdvance",
            "return_type": {
                "declaration": "float",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "float"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "c",
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3470
            }
        },
        {
            "name": "ImFont_IsLoaded",
            "original_fully_qualified_name": "IsLoaded",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3471
            }
        },
        {
            "name": "ImFont_GetDebugName",
            "original_fully_qualified_name": "GetDebugName",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3472
            }
        },
        {
            "name": "ImFont_CalcTextSizeA",
            "original_fully_qualified_name": "CalcTextSizeA",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "max_width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "wrap_width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_begin",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                },
                {
                    "name": "remaining",
                    "type": {
                        "declaration": "const char**",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Builtin",
                                    "builtin_type": "char",
                                    "storage_classes": [
                                        "const"
                                    ]
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "comments": {
                "preceding": [
                    "// 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.",
                    "// 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable."
                ],
                "attached": "// utf8"
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3476
            }
        },
        {
            "name": "ImFont_CalcWordWrapPositionA",
            "original_fully_qualified_name": "CalcWordWrapPositionA",
            "return_type": {
                "declaration": "const char*",
                "description": {
                    "kind": "Pointer",
                    "inner_type": {
                        "kind": "Builtin",
                        "builtin_type": "char",
                        "storage_classes": [
                            "const"
                        ]
                    }
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "scale",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "wrap_width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3477
            }
        },
        {
            "name": "ImFont_RenderChar",
            "original_fully_qualified_name": "RenderChar",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "draw_list",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "c",
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3478
            }
        },
        {
            "name": "ImFont_RenderText",
            "original_fully_qualified_name": "RenderText",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "draw_list",
                    "type": {
                        "declaration": "ImDrawList*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImDrawList"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "pos",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "col",
                    "type": {
                        "declaration": "ImU32",
                        "description": {
                            "kind": "User",
                            "name": "ImU32"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "clip_rect",
                    "type": {
                        "declaration": "ImVec4",
                        "description": {
                            "kind": "User",
                            "name": "ImVec4"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_begin",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "text_end",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "wrap_width",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0.0f",
                    "is_instance_pointer": false
                },
                {
                    "name": "cpu_fine_clip",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "false",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3479
            }
        },
        {
            "name": "ImFont_BuildLookupTable",
            "original_fully_qualified_name": "BuildLookupTable",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "comments": {
                "preceding": [
                    "// [Internal] Don't use!"
                ]
            },
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 3482
            }
        },
        {
            "name": "ImFont_ClearOutputData",
            "original_fully_qualified_name": "ClearOutputData",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 3483
            }
        },
        {
            "name": "ImFont_GrowIndex",
            "original_fully_qualified_name": "GrowIndex",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "new_size",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 3484
            }
        },
        {
            "name": "ImFont_AddGlyph",
            "original_fully_qualified_name": "AddGlyph",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "src_cfg",
                    "type": {
                        "declaration": "const ImFontConfig*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFontConfig",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "c",
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "x0",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "y0",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "x1",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "y1",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "u0",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v0",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "u1",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "v1",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "advance_x",
                    "type": {
                        "declaration": "float",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "float"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 3485
            }
        },
        {
            "name": "ImFont_AddRemapChar",
            "original_fully_qualified_name": "AddRemapChar",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "dst",
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "src",
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "overwrite_dst",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "true",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "comments": {
                "attached": "// Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built."
            },
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 3486
            }
        },
        {
            "name": "ImFont_SetGlyphVisible",
            "original_fully_qualified_name": "SetGlyphVisible",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "c",
                    "type": {
                        "declaration": "ImWchar",
                        "description": {
                            "kind": "User",
                            "name": "ImWchar"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "visible",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 3487
            }
        },
        {
            "name": "ImFont_IsGlyphRangeUnused",
            "original_fully_qualified_name": "IsGlyphRangeUnused",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "ImFont*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImFont"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                },
                {
                    "name": "c_begin",
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "c_last",
                    "type": {
                        "declaration": "unsigned int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "unsigned_int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImFont",
            "is_internal": true,
            "source_location": {
                "filename": "imgui.h",
                "line": 3488
            }
        },
        {
            "name": "ImGuiViewport_GetCenter",
            "original_fully_qualified_name": "GetCenter",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiViewport*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiViewport",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiViewport",
            "comments": {
                "preceding": [
                    "// Helpers"
                ]
            },
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3527
            }
        },
        {
            "name": "ImGuiViewport_GetWorkCenter",
            "original_fully_qualified_name": "GetWorkCenter",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [
                {
                    "name": "self",
                    "type": {
                        "declaration": "const ImGuiViewport*",
                        "description": {
                            "kind": "Pointer",
                            "is_nullable": false,
                            "inner_type": {
                                "kind": "User",
                                "name": "ImGuiViewport",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": true
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "original_class": "ImGuiViewport",
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3528
            }
        },
        {
            "name": "ImGui_PushButtonRepeat",
            "original_fully_qualified_name": "ImGui::PushButtonRepeat",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "repeat",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": true,
            "comments": {
                "preceding": [
                    "// OBSOLETED in 1.91.0 (from July 2024)"
                ]
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3593
            }
        },
        {
            "name": "ImGui_PopButtonRepeat",
            "original_fully_qualified_name": "ImGui::PopButtonRepeat",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": true,
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3594
            }
        },
        {
            "name": "ImGui_PushTabStop",
            "original_fully_qualified_name": "ImGui::PushTabStop",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "tab_stop",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": true,
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3595
            }
        },
        {
            "name": "ImGui_PopTabStop",
            "original_fully_qualified_name": "ImGui::PopTabStop",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": true,
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3596
            }
        },
        {
            "name": "ImGui_GetContentRegionMax",
            "original_fully_qualified_name": "ImGui::GetContentRegionMax",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Content boundaries max (e.g. window boundaries including scrolling, or current column boundaries). You should never need this. Always use GetCursorScreenPos() and GetContentRegionAvail()!"
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3597
            }
        },
        {
            "name": "ImGui_GetWindowContentRegionMin",
            "original_fully_qualified_name": "ImGui::GetWindowContentRegionMin",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Content boundaries min for the window (roughly (0,0)-Scroll), in window-local coordinates. You should never need this. Always use GetCursorScreenPos() and GetContentRegionAvail()!"
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3598
            }
        },
        {
            "name": "ImGui_GetWindowContentRegionMax",
            "original_fully_qualified_name": "ImGui::GetWindowContentRegionMax",
            "return_type": {
                "declaration": "ImVec2",
                "description": {
                    "kind": "User",
                    "name": "ImVec2"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "attached": "// Content boundaries max for the window (roughly (0,0)+Size-Scroll), in window-local coordinates. You should never need this. Always use GetCursorScreenPos() and GetContentRegionAvail()!"
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3599
            }
        },
        {
            "name": "ImGui_BeginChildFrame",
            "original_fully_qualified_name": "ImGui::BeginChildFrame",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "id",
                    "type": {
                        "declaration": "ImGuiID",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiID"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "size",
                    "type": {
                        "declaration": "ImVec2",
                        "description": {
                            "kind": "User",
                            "name": "ImVec2"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "window_flags",
                    "type": {
                        "declaration": "ImGuiWindowFlags",
                        "description": {
                            "kind": "User",
                            "name": "ImGuiWindowFlags"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "0",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": true,
            "comments": {
                "preceding": [
                    "// OBSOLETED in 1.90.0 (from September 2023)"
                ]
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3601
            }
        },
        {
            "name": "ImGui_EndChildFrame",
            "original_fully_qualified_name": "ImGui::EndChildFrame",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": true,
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3602
            }
        },
        {
            "name": "ImGui_ShowStackToolWindow",
            "original_fully_qualified_name": "ImGui::ShowStackToolWindow",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "p_open",
                    "type": {
                        "declaration": "bool*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "bool"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "NULL",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": true,
            "comments": {
                "preceding": [
                    "//static inline bool BeginChild(const char* str_id, const ImVec2& size_arg, bool borders, ImGuiWindowFlags window_flags){ return BeginChild(str_id, size_arg, borders ? ImGuiChildFlags_Borders : ImGuiChildFlags_None, window_flags); } // Unnecessary as true == ImGuiChildFlags_Borders",
                    "//static inline bool BeginChild(ImGuiID id, const ImVec2& size_arg, bool borders, ImGuiWindowFlags window_flags)        { return BeginChild(id, size_arg, borders ? ImGuiChildFlags_Borders : ImGuiChildFlags_None, window_flags);     } // Unnecessary as true == ImGuiChildFlags_Borders"
                ]
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3605
            }
        },
        {
            "name": "ImGui_ComboObsolete",
            "original_fully_qualified_name": "ImGui::Combo",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "current_item",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "old_callback",
                    "type": {
                        "declaration": "bool (*old_callback)(void* user_data, int idx, const char** out_text)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "bool",
                                "description": {
                                    "kind": "Builtin",
                                    "builtin_type": "bool"
                                }
                            },
                            "arguments": [
                                {
                                    "name": "user_data",
                                    "type": {
                                        "declaration": "void*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "void"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "idx",
                                    "type": {
                                        "declaration": "int",
                                        "description": {
                                            "kind": "Builtin",
                                            "builtin_type": "int"
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "out_text",
                                    "type": {
                                        "declaration": "const char**",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "char",
                                                    "storage_classes": [
                                                        "const"
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "old_callback",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "bool"
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "user_data",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "void"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "idx",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "int"
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "out_text",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Pointer",
                                                    "inner_type": {
                                                        "kind": "Builtin",
                                                        "builtin_type": "char",
                                                        "storage_classes": [
                                                            "const"
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "user_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "items_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "popup_max_height_in_items",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3606
            }
        },
        {
            "name": "ImGui_ListBoxObsolete",
            "original_fully_qualified_name": "ImGui::ListBox",
            "return_type": {
                "declaration": "bool",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "bool"
                }
            },
            "arguments": [
                {
                    "name": "label",
                    "type": {
                        "declaration": "const char*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "char",
                                "storage_classes": [
                                    "const"
                                ]
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "current_item",
                    "type": {
                        "declaration": "int*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "int"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "old_callback",
                    "type": {
                        "declaration": "bool (*old_callback)(void* user_data, int idx, const char** out_text)",
                        "type_details": {
                            "flavour": "function_pointer",
                            "return_type": {
                                "declaration": "bool",
                                "description": {
                                    "kind": "Builtin",
                                    "builtin_type": "bool"
                                }
                            },
                            "arguments": [
                                {
                                    "name": "user_data",
                                    "type": {
                                        "declaration": "void*",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "void"
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "idx",
                                    "type": {
                                        "declaration": "int",
                                        "description": {
                                            "kind": "Builtin",
                                            "builtin_type": "int"
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                },
                                {
                                    "name": "out_text",
                                    "type": {
                                        "declaration": "const char**",
                                        "description": {
                                            "kind": "Pointer",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "char",
                                                    "storage_classes": [
                                                        "const"
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    "is_array": false,
                                    "is_varargs": false,
                                    "is_instance_pointer": false
                                }
                            ]
                        },
                        "description": {
                            "kind": "Type",
                            "name": "old_callback",
                            "inner_type": {
                                "kind": "Pointer",
                                "inner_type": {
                                    "kind": "Function",
                                    "return_type": {
                                        "kind": "Builtin",
                                        "builtin_type": "bool"
                                    },
                                    "parameters": [
                                        {
                                            "kind": "Type",
                                            "name": "user_data",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Builtin",
                                                    "builtin_type": "void"
                                                }
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "idx",
                                            "inner_type": {
                                                "kind": "Builtin",
                                                "builtin_type": "int"
                                            }
                                        },
                                        {
                                            "kind": "Type",
                                            "name": "out_text",
                                            "inner_type": {
                                                "kind": "Pointer",
                                                "inner_type": {
                                                    "kind": "Pointer",
                                                    "inner_type": {
                                                        "kind": "Builtin",
                                                        "builtin_type": "char",
                                                        "storage_classes": [
                                                            "const"
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "user_data",
                    "type": {
                        "declaration": "void*",
                        "description": {
                            "kind": "Pointer",
                            "inner_type": {
                                "kind": "Builtin",
                                "builtin_type": "void"
                            }
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "items_count",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                },
                {
                    "name": "height_in_items",
                    "type": {
                        "declaration": "int",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "int"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "default_value": "-1",
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3607
            }
        },
        {
            "name": "ImGui_SetItemAllowOverlap",
            "original_fully_qualified_name": "ImGui::SetItemAllowOverlap",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": false,
            "comments": {
                "preceding": [
                    "// OBSOLETED in 1.89.7 (from June 2023)"
                ],
                "attached": "// Use SetNextItemAllowOverlap() before item."
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3609
            }
        },
        {
            "name": "ImGui_PushAllowKeyboardFocus",
            "original_fully_qualified_name": "ImGui::PushAllowKeyboardFocus",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [
                {
                    "name": "tab_stop",
                    "type": {
                        "declaration": "bool",
                        "description": {
                            "kind": "Builtin",
                            "builtin_type": "bool"
                        }
                    },
                    "is_array": false,
                    "is_varargs": false,
                    "is_instance_pointer": false
                }
            ],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": true,
            "comments": {
                "preceding": [
                    "// OBSOLETED in 1.89.4 (from March 2023)"
                ]
            },
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3611
            }
        },
        {
            "name": "ImGui_PopAllowKeyboardFocus",
            "original_fully_qualified_name": "ImGui::PopAllowKeyboardFocus",
            "return_type": {
                "declaration": "void",
                "description": {
                    "kind": "Builtin",
                    "builtin_type": "void"
                }
            },
            "arguments": [],
            "is_default_argument_helper": false,
            "is_manual_helper": false,
            "is_imstr_helper": false,
            "has_imstr_helper": false,
            "is_unformatted_helper": false,
            "is_static": true,
            "conditionals": [
                {
                    "condition": "ifndef",
                    "expression": "IMGUI_DISABLE_OBSOLETE_FUNCTIONS"
                }
            ],
            "is_internal": false,
            "source_location": {
                "filename": "imgui.h",
                "line": 3612
            }
        }
    ]
}